Improving coverage has been a major challenge for dynamic analysis approaches . In DINA, we currently utilize Monkey for input generation to exercise the targeted components. Although we achieve excellent IAC detection performance, we may still suffer from potential false negatives. We inherit some of the input generation limitations of Monkey. However, this fuzzing approach is still widely used by recent approaches that target DCL (e.g., DyDroid ), which relies on the observation that third-party libraries launch their DCL events when starting the app, which is sufficient for our analysis. Furthermore, the empirical study performed in  shows Monkey has achieved the best coverage among all analyzed input generation tools including DynoDroid  and PUMA.

IntelliDroid  is a recently-proposed input generation tool using event-chain detection and input injection with constraint solver. We integrate Intellidroid with DINA to replace Monkey. However, it fails to trigger most of the reflective/DCL calls. We found that most of the statically-identified paths related to reflective calls cannot be successfully triggered by Intellidroid, mainly due to the limited input type support, the limitations in the constrain solver, and its lack of support in dealing with environmental contexts/variables. Furthermore, a malicious app may perform emulator detection to halt its malicious activities during the analysis. DINA addresses this issue by performing the analysis on real devices.

# IAC detection accuracy.

Compared with static and dynamic tainting analysis based approaches, DINA does not perform precise data flow tracking analysis, which may lead to the imprecision of our detection results. Thus, the static analysis results may contain false positives. However, we use dynamic analysis to narrow down the scope of analysis on the methods that are dynamically executed. Therefore, we can effectively alleviate the imprecision brought by the lack of tainting analysis. One major benefit of our approach, however, is the improvement on runtime performance as shown in Section IV-D compared to other approaches.

Furthermore, existing static IAC analysis cannot handle an Intent that has been obfuscated in a manifest file. In such scenario, static analysis cannot identify app pairs by simply matching the Intents. This type of obfuscation makes static analysis to identify app pairs ineffective. By using dynamic analysis, DINA, on the other hand, can be extended to uncover app pairs during execution by performing runtime analysis to observe sent and received Intents by apps in the same bundle. This extension can be achieved by monitoring the ActivityManager, which we plan to implement in future work.

# VI. RELATED WORK
With respect to reflection and DCL, several research efforts attempt to improve soundness of static analysis in the presence of dynamically loaded code through Java reflection. DroidRA  adapts TAMI F LEX  to statically analyze Android apps for dynamically loaded code. Unlike TAMI - F LEX, DroidRA does not execute apps; instead, it uses a constraint solver to resolve reflection targets. However, these static analysis approaches only work when reflection targets.

can be identified from the source code, which is typically not the case in sophisticated security attacks, where a malicious component may be externally downloaded from hidden APKs.

Our approach however detects reflection targets and captures dynamically loaded code using dynamic analysis. With respect to ICC Analysis, numerous techniques have been proposed to focus on Intent and component analysis within the boundary of one app. IccTA  and its successor  leverage an Intent resolution scheme to identify inter-component privacy leaks. However, their approach relies on a preprocessing step connecting Android components through code instrumentation, which can lead to scalability issues , . S EPAR  and SEALANT  perform compositional security analysis at a higher level of abstraction. While these research efforts are concerned with security analysis of component interactions between Android apps, DINAâ€™s analysis, however, goes far beyond single application analysis, and enables reflection and DCL-aware assessment of the overall security posture of a system, greatly increasing the scope of potential ICC-based misbehavior analysis.

# VII. CONCLUSION
In this paper, we present DINA, a hybrid analysis approach for detecting malicious IAC activities in dynamically loaded code. DINA utilizes a systematic approach based on control-flow, data-flow, and method call graphs to identify malicious IAC activities across multiple apps. We have shown DINA can effectively resolve reflective and DCL calls at runtime for real-world apps. We demonstrate that multi-app, colluding attacks concealed by reflection and DCL can be launched to perform stealthy attacks, and evading existing detection approaches. In particular, we discover several popular real-world apps, which can trigger vulnerable IAC activities through reflection and DCL, leading to surreptitious privacy leakage. We have compared DINA with existing IAC vulnerability and reflection analysis tools. DINA analyzes most of apps in less than five minutes, and can identify malicious IAC behaviors concealed by reflective calls that no previous approach was able to detect. We believe further effort is required to better regulate the usage of reflection and DCL calls to close the attack avenues without undermining their utilities..