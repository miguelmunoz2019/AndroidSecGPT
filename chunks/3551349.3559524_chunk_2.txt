Public Id: BUG-A003-0001; Type: Security Bug; Risk Level: High; Risk Score: 8;
Sub Type: SMS data leakage; // App vulnerability type
Description: The app sends an SMS attached with the sensitive data (in plaintext) to authenticate that user, but the data is stored in the SMS outbox unexpectedly. If an adversary registers a content observer to the SMS outbox on the mobile device with some permissions, the user's sensitive data can be easily intercepted by the adversary who impersonates that user to manipulate her legitimate banking account.

Location: Found a flow to sink virtualinvoke $r10.<android.telephony.SmsManager: void sendTextMessage(), from the following sources: $r5 = virtualinvoke $r4.<android.widget.EditText: android.text.Editable getText()>() (in <com.globe.gcash.android.activity.transaction.RegistrationTransactionActivity: void doNext()>)
=> RegistrationTransactionActivity;doNext();$r4;$r5 // Activity, Method, Variables logging
==> pin;firstName;lastName;addr // Sensitive data tagging
Patch Method: Avoid sending sensitive data via SMS and store the sensitive data in the SMS outbox accordingly.

# Listing 2: An example of a security vulnerability report generated by AUSERA.

Third-party libraries also cause security threats for users, which are likely to be inadvertently introduced. Therefore, we also integrate ATVHunter  to involve the ability of binary SCA for apps. More technique details can be found in.

# 2 Used Techniques in AUSERA
For the techniques used in AUSERA, we also integrate the basic design from . The main updates are as follows. (1) We first update the keywords of sensitive data to make it more general for common apps instead of only for one type of those apps. Note that, the set also can be customized by users. For example, if the tool is used to scan healthcare apps, they can add more professional health keywords to represent sensitive data for their scanning tasks. (2) We update the set of sinks to map more vulnerability types introduced in the category of data storage security such as android.database.sqlite.SQLiteDatabase: void execSQL for SQLite leakage. The defined sinks can be found in the file of Source-AndSinks in the configuration folder. (3) For the phase of function identification, we add more APIs to help locate the functional implementations. Note that, the vulnerable functions are not identified as a true vulnerable case until they have been verified for the reachability analysis. For example, if the invalid server verification (do nothing in the verification function body) is not triggered by any other methods or classes, it is considered no threat to mobile users.

# 3 EVALUATION
To demonstrate the effectiveness of AUSERA, we select 4 open-source and representative tools (i.e., AndroBugs , MobSF , Qark , and Super ) to compare the detection results. We use their latest versions on GitHub and conduct the evaluations on Ubuntu 21 with 64G memory and Intel@Core i9-100900 CPU@2GHz × 20.

# 3 Ground-truth Dataset
Due to the lack of an available benchmark dataset of the vulnerability taxonomy, we first present a ground-truth dataset including all 50 types of vulnerabilities summarized in our taxonomy. We construct the ground-truth dataset based on the following criteria. (1) We first consider the existing benchmark apps as part of the ground-truth dataset, which includes two benchmark apps (i.e., Diva app  and MSTG app ). DIVA (Damn insecure and vulnerable App) is an app intentionally designed to be insecure with 727 stars. Diva app contains many representative data leakage and data access vulnerabilities. All these vulnerabilities are manually injected into one app. Similarly, the MSTG app  is used as an example to demonstrate different vulnerabilities explained in the OWASP Mobile Security Testing Guide. (2) These two benchmark apps cannot cover all vulnerabilities in taxonomy, therefore, we use another 4 apps in our previous studies . These four apps are all banking apps, and the vulnerabilities within these apps have been patched by developers according to our reporting in the latest versions. Therefore, the disclosure will not cause damage in the real world. We also release these 4 apps on the GitHub repository (https://github.com/tjusenchen/AUSERA).

# 3 Evaluation Result
The evaluation result is shown in Table 1. Compared with the existing 4 tools, AUSERA obtains the best performance. Specifically, on the one hand, owing to the sensitive data tagging and reachability analysis, AUSERA significantly reduces the false positives, which has been validated in . On the other hand, owing to the proposed taxonomy, compared with other tools, the result of AUSERA is more complete with low false negatives. Compared with the vulnerability types, AUSERA achieves a more complete result with all 50 vulnerability types. On the contrary, AndroBugs, MobSF, Qark, and Super support 20 types, 20 types, 11 types, and 15 types, respectively. Meanwhile, even for the support vulnerability types, due to the technical limitations, they will inevitably introduce false positives. For example, sensitive data disclosure through LogCat is always detected by MobSF, Qark, and Super as shown in Table 1, but they just match the following APIs.

# AUSERA: Automated Security Vulnerability Detection for Android Apps
Prcaect 80na77856
Overoll Scour !arninu Sccuml; Duq
Faund 
DM
Curpontril
BUG 400? 00J5
BUG A0OZ OJJL
ASE ’22, October 10–14, 2022, Rochester, MI, USA
# Introduction
Iituc Typt Loruong Drtois
Amiciu andnd Andrc d
if used (e.g., Log.e(), Log.d(), and Log.v.). There is no doubt that it has incurred plenty of false positives. If the data are not sensitive, such as “menu_title,” it is very normal for developers to log or write messages to understand the state of their apps. The risk is that some credentials (e.g., PIN code and password) are also leaked by logging outputs. Another example is the vulnerability of using the Web-View JavaScript Interface, which is supported by AndroBugs, Qark, and Super. However, they only check the implementation status of the API addJavascriptInterface(), they ignore the vulnerability only occurs when the SDK version is lower than 4. Similarly, for the Fragment injection vulnerability, only when the component is exported by default, the vulnerable Fragment code inherited from PreferenceActivity causes a real vulnerability. However, AndroBugs ignores checking the precondition causing false positives.

# 4 CONCLUSION
In this paper, we proposed a security vulnerability taxonomy for Android apps, which includes 5 categories and 50 vulnerability types, based on which we implemented and released AUSERA to automatically detect vulnerability in Android apps, achieving an accurate result compared with existing tools. Finally, we highlight that the set of sensitive data and vulnerability types can be further expanded according to the detection scenarios for app developers and security analysts.

Through cooperation with a leading security company from Singapore, named Scantist , AUSERA is also in the process of product development to provide security scanning service for users, as shown in Figure 2..