# 3 System Design and Implementation
Our system consists of three main processes, including static code, dynamic, and result analyses. The metadata analysis in static analysis decompiles the executable file of an Android application to obtain basic metadata information. Then, we can preliminarily obtain permissions, components, and other security-related information of the application in a lightweight analysis process. Further, we analyze the transmission path of the data of interest within the application by data flow analysis. To overcome the false alarm and omission of static analysis, further verify the results of static analysis, and detect security vulnerabilities triggered only by actual operation, we propose a dynamic analysis method based on the executable script and API hooks. The result analysis process needs to aggregate the static and dynamic analysis results, generating the final security vulnerability analysis results. Our hybrid method takes advantage of both static and dynamic analyses. Compared with running these two methods independently, our method is more accurate and comprehensively detects security vulnerabilities in Android applications. Figure 1 shows the architecture of detection system.

# 3 Vulnerability judgment rules
# 3 Vulnerability pattern
We use formal language to describe the corresponding vulnerability pattern instead of natural language. First, a few definitions are given below. The security vulnerability patterns are formally described as follows:
V D .v1; v2; v3; v4/
For example, we perform a static analysis on the application and discover that the application may possess the security vulnerability of loading code from the outside using the class loader technique. We express the vulnerability as V D .dynamically loading file, 1, a path p about dynamically loading file exists, data flow analysis).

# 3 Matching rules
Our vulnerability rule is a set of description specifications based on safety experience and defined in the form of the above formalized expressions. Table 1 shows the nine important security vulnerabilities that are considered in the present study.

The vulnerability named unrestricted component refers to the unreasonable setting of the component properties in Android applications; it may cause the component to be illegally called. The Android: exported attribute in its Androidmanifest.xml file is simply set to be true with no valid permissions to restrict the other applications’ components from calling it. The insecure JavaScript in WebView vulnerability means that applications with WebView have the ability to communicate between JavaScript code and native code through event response function and other methods. If unsecure JavaScript functions are used, it may lead to JavaScript injection attack and expose the sensitive resources obtained by the application to unknown web content. The sensitive data processed in plaintext refers to the situation that applications process sensitive information in unencrypted plaintext in various ways. In addition, we separately list the situations in which the application calls the logcat interface and outputs sensitive data as logs as the privacy leak by log vulnerability. The vulnerability named dynamically loading file means that the application invokes various techniques to load files from outside itself during running. For example, many applications use dynamic code loading to load external code or Android Package (APK) files through methods such as DexClassLoader. This has been proven that it may lead to malicious code execution. At the same time, if the application uses shell commands or techniques such as Native Development Kit (NDK) and libraries written in C/C++, we will consider that this application may also feature such type of vulnerabilities. Security vulnerabilities can also occur if an insecure password is used in an application. These situations can be that the application uses a simple reversible encoding function to encrypt, or simply hard-code the secret keys into the code without any protections, and so on. Intent exposure refers to the fact that other applications can start an application and make it perform dangerous operations by constructing intents containing malicious content using the components exposed by the target applications. If the IntentFilter information of the application is not configured properly, it is easy for other applications to exploit the vulnerability to attack. SQL inject vulnerabilities are also possible in Android applications. The application may use SQLite (a lightweight database on the Android platform) without proper type detection and validation of the parameters passed in the SQL statement. This condition can lead to collisions and
# Junwei Tang et al.: A Novel Hybrid Method to Analyze Security Vulnerabilities in Android Applications
database leaks. Another type of vulnerability involves user input. If the information entered by the user is incorrectly validated by the application, it may cause serious consequences, such as program logic failure and application sensitive information leakage. We focus on the input to the login and registration UI of the application here. Validation of input information on other UIs can be extended in the future.

# 3 Static analysis
# 3 Metadata analysis
Metadata analysis mainly uses decompiling technology to obtain the metadata information of Android applications. Android applications are usually developed in Java language, compiled into dex format files, and run in Android virtual machine instances. However, the packing technology causes considerable difficulty to directly reverse the analysis.

First, we extract and analyze the AndroidManifest.xml file. This file contains metadata, such as application permission request, component construction, and main activity. In the subsequent data flow analysis, we map the different elements to the corresponding Java objects based on these metadata, and complete the analysis and detection of the vulnerabilities in accordance with the vulnerability judgment rules.

The binary code (APK file) is decompiled into a folder containing a bytecode file named dex.class. We decompile the code into smali format code, which can be further decompiled into Java code. However, this Java code will miss several program semantic information and may increase the probability of decompilation failure. Thus, we analyze the permissions, components, and other related security vulnerabilities of Android applications directly from the smali code. Through this intermediate bytecode form, we can directly analyze whether unsafe functions are called in the application through string regular matching. The comprehensive use of Static Android Analysis Framework (SAAF), AXMLPrinter2, and baksmali can effectively obtain highly readable and semantically complete bytecode files. The combination of various decompiler tools can effectively improve the decompiler’s success rate.

# 3 Data flow analysis
The core of the static data flow analysis is to track the information of the marked tainted data, analyze its possible propagation paths, and then perform the corresponding processing. The main principle is to mark the data of interest as “tainted”. Thus, a series of new data is generated through operations, such as arithmetic and logic operations, and will inherit the “tainted or not” property of the source data. In this manner, operations, such as jump, call, and assignment of tainted data, are analyzed to build the corresponding propagation path of tainted data.

Soot is the classic Java code data flow analysis tool. FlowDroid expands Soot to the information flow analysis of Android applications. FlowDroid transforms Android applications that are based on component life cycle and callback function running mechanism into a Java program based on a dummy main function. Based on the prepared source and sink, sensitive data flow analysis can be performed for the entire Android application. Whether a path in the application starts with the defined source point and ends with the sink point must be determined. The existence of such a path can indicate that the application features the corresponding security vulnerabilities. This path is called the vulnerability path.

We extend the ideas of detecting such sensitive data leakage, and enrich the range of source and sink points. We have defined several functions that are unsafe for our own application scenarios as source and sink points. This data flow analysis can determine whether vulnerability paths caused by the use of sequences of the corresponding functions exist. Based on the expansion of the above tools, we mark the sensitive information and use static taint analysis technology to obtain the possible propagation path of the taint information to determine whether a vulnerability path exists in the application.