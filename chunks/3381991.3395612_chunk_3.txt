The security and privacy of m-health apps have been analyzed in . The m-health apps have a PII-rich environment where confidentiality, integrity and privacy of users must be ensured and maintained. In , the authors performed both static and dynamic analysis of the selected m-health apps, along with tailored testing of each app’s functionalities. This research also presented an analysis of security and privacy concerns in m-health apps through a long-term evaluation, monitoring, and assessment of the quality of all communication channels within the apps examined. A similar work in  studied 160 m-health apps offered by Google Play and formulated a list of seven attacks that should be taken into consideration when evaluating app security and privacy. These attacks targeted sensitive information on the network, third-party services, Bluetooth, logging, SD card storage, exported components, and side channels. Another work was done on m-health mobile apps by . It analyzed m-health apps from two perspectives. First, the authors analyze EU and US data protection regulations and requirements for health data. Second, they analyzed a fitness app as a case study, showing that it did not protect personal data.

Banking apps have been inspected by researchers for their security and privacy. For example, the authors of  analyzed seven Android m-banking apps in Thailand and found many security-related issues. The apps did not encrypt user data and also were vulnerable to the repackaging attack, which would put users’ data at risk. Fahl et al. reviewed several of the most popular free apps and looked at the current state of SSL/TLS to detect potential man-in-the-middle (MITM) attacks . The study explored a variety of categories, including banking. Similar work was conducted in . The authors analyzed 34 banking apps on the iOS platform. The authors investigated how user inputs can be intercepted and how jailbreak detection mechanisms could be avoided in these apps. They leveraged the Cydia Substrate platform to intercept sensitive user inputs. They were able to intercept users’ inputs on 15 banking apps successfully. The remaining 18 banking apps have jailbreak detection, which blocked the interception of users’ inputs. Furthermore, they edited system functions and altered return values to make the mobile device appear like a non-jailbreak device for bypassing jailbreak detection. The result showed that 32 out of 34 (94%) banking apps were vulnerable to the input interception attack, even if banking apps had jailbreak detection mechanisms.

Our work differs from previous projects  in terms of the focus of the analysis and the methodology used. First, our study conducts a comprehensive evaluation of the security and privacy of FL apps, which have different functionalities and sensitive data than dating, banking, and m-health apps. For example, unlike dating, banking, and m-health apps, FL apps rely on a join code; if the apps fail to protect this secret code, the whole system is vulnerable, and sensitive information may be leaked. Also, the potential damage in FL apps can be wider than other categories. For example, FL apps normally have more than one user, so the harm can affect a whole family instead of one person as in other categories. Second, our methodology covers the data both in transit and rest. In addition, we evaluate the configurations of the FL apps’ back-end servers to determine whether they support transport security mechanisms. We also examined them for potential data leakage vulnerabilities like the absence of authentication and authorization mechanisms. In general, we study the security vulnerabilities and design weaknesses in FL apps in terms of confidentiality and integrity.

# 3 THREAT MODEL
Two main attacks are considered in the FL app threat model: network and local storage attacks. Figure 2 illustrates the threat model for our security and privacy analysis of FL apps.

Network attacks have two scenarios. In the first scenario, an attacker can intercept and obtain sensitive data and secrets from insecure communications. The goal for the attacker in this scenario is to capture sensitive data as they travel between FL apps and their corresponding servers. An attacker who can intercept join codes will be able to join the family circle. Upon joining, the attacker then has a wide range of capabilities, such as knowing the location of everyone in the circle and accessing family messages. Family messages may contain important secrets like door PIN codes or credit card numbers. The attacker can change the content of the message to achieve harmful goals if traffic is not encrypted like persuading some family members to go to a dangerous location. In the second scenario, the attacker looks for patterns in network traffic to reveal sensitive information from mobile back-end servers. The attacker first needs an initial understanding of what kind of information is required by the mobile back-end server to return user data. For example, by knowing that some FL apps use certain packets to retrieve data from their corresponding servers, attackers can reuse the same packets to have the same response. This attack is similar to the replay attack. Network attacks can be mitigated by encrypting traffic to prevent sniffing, and deploying a secure authentication mechanism at the server side to prevent replay attacks.

# Session 3: Privacy and Data Sharing
# SACMAT ’20, June 10–12, 2020, Barcelona, Spain
The Android architecture allows apps to store their data in two kinds of data storage: internal and external storage (SD card) . In this paper, we refer to the internal and external storage together as local storage. The internal storage is used to keep the app’s private data on the device mainly for performance reasons. It is located on the “data/data” path, and it includes the shared preferences and the database directories.

The second type is the external storage which is a shared space. All apps can store data on the external storage. Specifically, any app that has a read_external_storage permission can read the data stored on external storage, meaning that an attacker does not need a rooted device to access data stored by other apps on the external storage. An attacker or malicious app only needs to have read_external_storage permission. Therefore, sensitive data stored on external storage can be compromised via a covert channel attack , which exploits the feature that allows transferring sensitive information between apps. Android developer documentation states that storing private data on external storage is not recommended . Data should always be stored in an encrypted form, so that attackers cannot easily compromise it.

It is worth noting that we do not consider whether the FL apps are malicious apps. So, if owners of the apps want to compromise user data, they can easily do that. Other types of attacks, such as repackaging attacks, DDoS (Distributed Denial-of-Service) attacks, and attacks that target API vulnerabilities, are also not considered. In addition, we do not address leaks that occurred over encrypted channels, such as via SSL connections.

# 4 METHODOLOGY
# 4 Dataset
Our raw dataset contains 41 FL apps collected from the official Google Play store. We use a keyword matching method to find apps in the FL category. FL apps are listed in a variety of different categories in the store. Thus, we use the keyword “family locator” to identify as many as possible of FL apps for our study.

We also crawl the apps’ descriptions, including the app name, publisher, developer’s information, app version, number of downloads, and users’ comments. Table 1 lists the 41 FL apps package names and their popularity in the Google Play store. The majority of the FL apps in our dataset have more than 100,000 downloads, and five apps have more than 1,000,000 downloads.

# 4 Framework
The App Permissions Extraction component is used to identify the most sensitive permissions requested by FL apps. By identifying and analyzing the sensitive permissions in these apps, we could understand what kinds of information leakage can potentially happen on both network traffic and local storage. Most of the FL apps request access to location, storage, and contact information. This analysis gives us insights into the type of sensitive information that can be leaked to unauthorized parties over leakage channels. We describe our findings in detail in Section 5.

In the Network Traffic Analysis component, we capture all traffic traces on an Android device for each app. Network traffic traces can be used to detect leakage of sensitive information over HTTP connections. If we find sensitive data in the traffic traces in plaintext, we raise concerns about app security.

For analyzing local storage, we first simulate functionalities of FL apps. Second, we record all the data that entered by the users. In addition, we record all permissions requested by the app. Third, we analyze the stored data on local storage if there are any security or privacy concerns.