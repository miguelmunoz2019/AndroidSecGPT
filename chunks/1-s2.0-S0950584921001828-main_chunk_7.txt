The lack of practical definitions for the broader human values in the SE context was argued by Mougouei et al.  as one reason why software engineering practices have not entirely successful in integrating human values in software. Previous works have attempted to address this issue using existing models from social sciences as a starting point. For example, some previous works chose to use Schwartz’s model [8–12] because of its extensiveness in comparison with other models. Nevertheless, these models still need to be adapted for the SE context. This adaptation is necessary because of the possible ‘differences in the meaning and interpretation of values in different contexts’ . For instance, our findings of security in the software engineering context have a limited scope within the app, unlike the definition of security in Schwartz’s model, which encompasses the whole society . We contributed towards the lack of practical human values definitions for software engineering by proposing descriptions of human values from issue discussions. Although the descriptions can still be developed further, we argue that these initial descriptions can empower software practitioners to consider human values in their software engineering practices. For instance, if some users have concerns regarding the independence of an application, the application developers may respond by considering to what extent they want to use third-party services. We realise that some of the themes that we discovered, especially those that are well-known in SE, such as efficiency or usability, may already have defined in SE. In this case, future work can compare our descriptions from the empirical study of issue discussions with their definitions in SE literature. We also believe that future research is still necessary to investigate how these definitions can help incorporate human values in software engineering.

# 5. Human values and non-functional requirements
One may argue that the system value themes that we found (Section 4), such as efficiency and usability, are similar to non-functional requirements (NFRs). The NFRs are usually related to quality properties, characteristics, or attributes of software . On the relation between NFRs and human values, Barn  conducted a meta-review of NFRs and found no reference for values. Barn concluded that ‘either value are systematically ignored in the practice of NFRs elicitation or value may not be NFR’ . Our definition of human values presence (Definition 2) and findings enable us to argue that values are similar to NFRs in terms of concerns a user or a contributor may have towards an application. However, we believe that they have a much broader sense, which includes non-technical requirements. In other words, we argue that NFRs can be seen as a subset of human values. In this sense, we agree with Barn’s proposal of utilising NFR frameworks to help integrate values into software.

discussions of pleasure and sense of belonging. This finding is in line with a previous study  that argues different app categories have different types of NFRs. On the other hand, this also means that the list of value themes we discovered may not be exhaustive. There might be other value themes discussed during software development that we did not discover but present in other projects that have different functionalities. For instance, we did not find any themes that correspond to some values in Schwartz models (Fig. 1), such as stimulation or achievement, which may appear in different software categories, such as computer games or educational applications [59–61].

The second factor that we found is the emphasis on specific values (i.e., values statement) supported by an application. We observed that this statement instigates a higher expectation of the values from the app’s users and contributors. For example, we discovered that Signal and Focus contributors frequently attempted to bring their privacy concerns in the discussions (see Section 4). These findings indicate that an app’s functionalities and values statements can influence the values present in the discussions. We argue the need for further research to investigate the dedication and functionalities of an app as factors influencing the presence of human values.

# 5. Factors that influence value presence
Our empirical study found that 33% of the discussions investigated in the three projects include at least one value theme. Among those, value themes appeared more in Signal, followed by K-9, then Focus. Our observation shows that at least two factors could explain these differences. Firstly, the functionality provided by an application could inspire discussions about a specific value theme. For instance, functionalities such as voice calls and group chat in Signal could trigger the discussions of pleasure and sense of belonging.

# 5. Towards the development of an automated detection tool
The abundance of software development data in GitHub makes complete manual analysis of human values infeasible. Previous works  have proposed automated techniques to analyse various aspects of software development from a vast amount of GitHub data. To the best of our knowledge, no automated tool exists to analyse the presence of value themes except for those well-known in SE in software development, such as privacy , security , or energy preservation . This study can serve as an initial step to inform the future development of automated techniques. We argue that AI-based approaches (e.g., machine learning approaches) can be leveraged to detect issue discussions that include human values. Furthermore, such AI-based approaches can identify which human values are pointed out in issue discussions. For this purpose, the manually analysed discussions from this study  can be used in future research as a dataset to develop such automated approaches. Our criteria to discover value themes seem to correspond with the relation between human values and sentiment or emotion. For example, literature in social sciences believes that values are infused with feeling  and ‘emotion is a source for values importance’ . For this reason, one can suggest using sentiment analysis or the presence of emotions to identify the presence of a particular value. Future work could consider utilising sentiment analysis, as demonstrated in previous work [65–68] to better identify values in discussions.

An automation of values discovery in issue discussions can help stakeholders on the development side, such as product owners or developers, to gain insight into values that are important to users. For software practitioners, an automated tool can inform the value implications an issue can have. Thus, software practitioners can prioritise issues based on the values discovered. Applying the tool in the repositories will allow product owners to track the occurrence of values in issues across development phases. This application enables monitoring of whether values are discussed sufficiently early in development. From a software testing perspective, testers can pay more attention to those issues where values are discussed.

# 6. Threats to validity
A threat to construct validity comes from the definition of human values that have not been tested in software engineering. At the same time, there are also no theoretical considerations to believe that this definition does not transfer to SE. We mitigated this by not limiting the analysts only to consider Schwartz’s basic values but also to provide descriptions of how the values look like in SE. All the persons involved in the analysis had a basic understanding of values theory. Moreover,
# A. Nurwidyantoro et al.

# Information and Software Technology 141 (2022) 106731
The values discovered in both the pilot and main study were validated and discussed to ensure there was no divergence of definitions across the analysts.

A threat to internal validity comes from the analysis process to discover values and the involvement of a single analyst in the main study. Although this can help increase the consistency of findings , the understanding of values and the subjectivity of the primary analyst may have affected the discovery of values. This issue was mitigated by performing a pilot study using an open coding approach used in other similar work  involving the primary analyst and five other analysts. In the main study, the primary analyst used the criteria and considered the initial values from the pilot study. Furthermore, three validators assessed and validated the primary analyst’s results. Another possible threat to internal validity may come from the use of issue discussions as a single data source that may make the intention of an issue reporter not clear for the analysis. To mitigate this threat, we analysed the whole thread of the issue as the analysis unit. We argue that a thread of issue could provide a decent amount of information about contributors’ concerns. The rationale behind this comes from the nature of the issue discussion, where contributors will ask for clarification from the reporter.