# Comparison of VAnDroid2 with the original VAnDroid framework (Cont.)
# VAnDroid2
# Correctness:
1. Consider the six bundles of the Ghera repository
2. Apply VAnDroid2 to these six app bundles
3. Analyze the correctness of the analysis results
4. Compare the results of VAnDroid2 with the results of COVERT and DIALDroid
Results: VAnDroid2’s analysis results are reliable, and this tool can correctly reveal the inter-app ICC attacks in Android app bundles.

# Scalability:
1. Construct a dataset of benign, malicious, and vulnerable apps from various repositories
2. Create 10 bundles of apps, each containing 35 apps, from the provided dataset
3. Apply the VAnDroid2 to these app bundles
4. Evaluate the scalability of the analysis results according to deal with the several issues (issues introduced in Section 6)
Results: VAnDroid2 has supported the scalability criterion in performing inter-app ICC vulnerability analysis.

# Run-Time Performance:
1. Without considering incremental ICC analysis: this tool is able to analyze app bundles containing hundreds of components in a few minutes.

2. With considering incremental ICC analysis: the effects of VAnDroid2’s incremental ICC analysis capability are visible when the size of the app bundles increases.

# Compare with IC3:
VAnDroid2 significantly outperforms in terms of extracting more comprehensive specifications as well as execution time.

# Compare with IccTA and Amandroid:
VAnDroid2 significantly outperforms the other tools and achieves higher precision, recall, and F-measure at the intra-app analysis level.

# Compare with COVERT:
VAnDroid2 significantly outperforms COVERT and reaches a precision of 100%, a recall of 100%, and an F-measure of 100% at inter-app level.

Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

NIRUMAND et al.

For benign and malicious apps, AndroZoo, as a growing collection of apps from various popular marketplaces is considered. For vulnerable apps, all known vulnerability benchmarks are used.

Another threat is related to the results of comparing the ability of VAnDroid2 in identifying ICC vulnerabilities with other state-of-the-art tools. In this comparison, the reported accuracy of VAnDroid2, in terms of precision, recall, and F-measure, depends on the quality of the dataset that we use as a ground truth with known security attacks. To overcome this threat, we used the results of ReproDroid, as a framework to identify the ground truth for data leaks of each test case in DroidBench and ICC-Bench. In the results of the ReproDroid framework, true positives and false positives are identified for each test case. In fact, an ICC communication has been identified that can cause a security issue (i.e., ICC-based privacy leakage).

# CONCLUSION</h8>
In this paper, a framework called VAnDroid2 was presented, as an extension to our previous work, to improve the detection of IAC security issues. VAnDroid2, based on MDRE, has three phases. At first, the comprehensive IR of each Android application is created without losing information. Then, by collecting security information in the form of domain-specific models from each app, the comprehension of the Android system is facilitated and all potential intent-based communications are extracted from a bundle of Android applications. Finally, by paying a one-time cost of modeling the security structure and specification of Android apps, the inter-app security analysis is performed and the results are displayed to the user using XMI models. VAnDroid2 is developed as an Eclipse-based tool. This tool has been applied to hundreds of real-world Android apps, and the correctness, scalability, and run-time performance are examined. VAnDroid2 is also compared with several existing state-of-the-art tools related to inter-component communication and inter-app communication analysis of Android apps. The evaluation results indicate that VAnDroid2 has been able to conduct a more effective IAC security analysis and achieve higher precision, recall, and F-measure in inter-app vulnerability detection.

To create the bundles of real-world apps, we randomly selected the apps from the created dataset. Since these bundles may not reflect the real bundles of installed Android applications on the users’ devices, as first future work, the information provided by marketplaces, such as Bazaar, for each Android app can be considered. Bazaar, as a local app store, provides the Users Also Installed section on the page of each Android app in the store. Based on this information, we can specify the apps that exist together on the users’ devices. Violation of the least-privilege principle in Android can cause serious security issues in Android ICC, including privilege escalation attacks. Hence, as second future work, the proposed approach can be expanded to detect vulnerabilities that lead to privilege escalation attacks, as one of the major categories of ICC vulnerabilities. Since VAnDroid2 focuses just on ICC analysis, as third future work, the proposed approach can be developed to consider URIs to detect other inter-app vulnerabilities such as passive data leaks and content pollution.

# DATA AVAILABILITY STATEMENT</h8>
The data that support the findings of this study are openly available in MDSE research group website at https://mdse.ui.ac.ir/project/vandroid2/.

# ORCID</h8>
Bahman Zamani https://orcid.org/0000-0001-6424-1442
Behrouz Tork-Ladani https://orcid.org/0000-0003-2280-8839
Jacques Klein https://orcid.org/0000-0003-4052-475X
# NIRUMAND et al.

1. Li L, Bissyandé TF, Papadakis M, et al. Static analysis of android apps: a systematic literature review. Inf Softw Technol. 2017;88:67-95. doi:10/j.infsof
2. Octeau D, McDaniel P, Jha S, et al. Effective inter-component communication mapping in android: an essential step towards holistic security analysis. Proceedings of the 22nd USENIX Security Symposium (USENIX Security 13); 2013; Washington, DC; LA-UR-13-26794.

3. Arzt S, Rasthofer S, Fritz C, et al. Flowdroid: precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. ACM SIGPLAN Not. 2014;49(6):259-269. doi:10/2666356
4. Li L, Bartel A, Bissyandé TF, et al. IccTA: detecting inter-component privacy leaks in android apps. Proceedings of the 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering; 2015.

5. Bagheri H, Sadeghi A, Garcia J, Malek S. COVERT: compositional analysis of android inter-app permission leakage. IEEE Trans Softw Eng. 2015;41(9):866-886. doi:10/TSE
6. Wei F, Roy S, Ou X. Amandroid: a precise and general inter-component data flow analysis framework for security vetting of android apps. ACM Trans Priv Secur (TOPS). 2018;21(3):1-32. doi:10/3183575
7. Wu T, Deng X, Yan J, Zhang J. Analyses for specific defects in android applications: a survey. Front Comput Sci. 2019;13:1210-1227. doi:10/s11704-018-7008-1
8. Sadeghi A, Bagheri H, Garcia J, Malek S. A taxonomy and qualitative comparison of program analysis techniques for security assessment of android software. IEEE Trans Softw Eng. 2016;43(6):492-530. doi:10/TSE
9. Bagheri H, Wang J, Aerts J, Malek S. Efficient, evolutionary security analysis of interacting android apps. Proceedings of the 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME); 2018.

10. Reaves B, Bowers J, Gorski SA III, et al. Android: assessment and evaluation of android application analysis tools. ACM Comput Surv (CSUR). 2016;49(3):1-30. doi:10/2996358
11. Pauck F, Bodden E, Wehrheim H. Do android taint analysis tools keep their promises? Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering; 2018.

12. Bruneliere H. Generic Model-based Approaches for Software Reverse Engineering and Comprehension. PhD thesis. Nantes University; 2018.

13. Sabir U, Azam F, Haq SU, Anwar MW, Butt WH, Amjad A. A model driven reverse engineering framework for generating high level UML models from java source code. IEEE Access. 2019;7:158931-158950. doi:10/ACCESS
14. Nirumand A, Zamani B, Tork LB. VAnDroid: a framework for vulnerability analysis of Android applications using a model-driven reverse engineering technique. Softw Pract Exp. 2019;49(1):70-99. doi:10/spe
15. Octeau D, Luchaup D, Dering M, Jha S, McDaniel P. Composite constant propagation: application to android inter-component communication analysis. Proceedings of the 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering; 2015.

16. Statista. Mobile OS market share 2021. Accessed July 30, 2021. https://www.statista.com/statistics/272698/global-market-share-held-by-mobile-operating-systems-since-2009/
17. Bhat P, Dutta K. A survey on various threats and current state of security in android platform. ACM Comput Surv. 2019;52(1):1-35. doi:10/3301285
18. Chin E, Felt AP, Greenwood K, Wagner D. Analyzing inter-application communication in Android. Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services; 2011:239-252.

19. Ma C, Wang T, Shen L, Liang D, Chen S, You D. Communication-based attacks detection in android applications. 2019;24(5):596-614. doi:10/TST
20. Samhi J, Bartel A, Bissyandé TF, Klein J. RAICC: revealing atypical inter-component communication in android apps. Proceedings of the 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE); 2021.

21. Android Developers. Context. Accessed July 3, 2021. https://developer.android.com/reference/android/content/Context
22. Android Developers. Pendingintent. Accessed July 3, 2021. https://developer.android.com/reference/android/app/PendingIntent
23. Android Developers. IntentSender. Accessed July 30, 2021. https://developer.android.com/reference/android/content/IntentSender
24. Six J. Application Security for the Android Platform: Processes, Permissions, and Other Safeguards. O’Reilly Media, Inc; 2011.

25. Jouault F, Allilaire F, Bézivin J, Kurtev I. ATL: a model transformation tool. Sci Comput Program. 2008;72(1-2):31-39. doi:10/j.scico
26. Eclipse Foundation. Eclipse Acceleo project. Accessed July 30, 2021. https://www.eclipse.org/acceleo/
27. Bruneliere H, Cabot J, Dupé G, Madiot F. MoDisco: a model driven reverse engineering framework. 2014;56(8):1012-1032. doi:10/j.infsof
28. Brambilla M, Cabot J, Wimmer M. Model-driven software engineering in practice. Synthesis lectures on software engineering; 2017.