# PREDICTING THE IMPACT OF ANDROID MALICIOUS SAMPLES VIA MACHINE LEARNING
JUNYANG QIU 1, WEI LUO 1, LEI PAN 1, (Member, IEEE), YONGHANG TAI 2, JUN ZHANG 3, (Senior Member, IEEE), AND YANG XIANG 3, (Senior Member, IEEE)
1 School of Information Technology, Deakin University, Geelong, VIC 3216, Australia
2 School of Physics and Electronic Information, Yunnan Normal University, Kunming 650500, China
3 School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, VIC 3122, Australia
Corresponding author: Yonghang Tai (taiyonghang@ynnu.edu.cn)
ABSTRACT Recently, Android malicious samples threaten billions of mobile end users’ security or privacy. The community researchers have designed many methods to automatically and accurately identify Android malware samples. However, the rapid increase of Android malicious samples outpowers the capabilities of traditional Android malware detectors and classifiers with respect to the cyber security risk management needs. It is important to identify the small proportion of Android malicious samples that may produce high cyber-security or privacy impact. In this paper, we propose a light-weight solution to automatically identify the Android malicious samples with high security and privacy impact. We manually check a number of Android malware families and corresponding security incidents and define two impact metrics for Android malicious samples. Our investigation results in a new Android malware dataset with impact ground truth (low impact or high impact). This new dataset is employed to empirically investigate the intrinsic characteristics of low-impact as well as high-impact malicious samples. To characterize and capture Android malicious samples’ pattern, reverse engineering is performed to extract semantic features to represent malicious samples. The leveraged features are parsed from both the AndroidManifest.xml files as well as the disassembled binary classes.dex codes. Then, the extracted features are embedded into numerical vectors. Furthermore, we train highly accurate support vector machine and deep neural network classifiers to categorize the candidate Android malicious samples into low impact or high impact. The empirical results validate the effectiveness of our designed light-weight solution. This method can be further utilized for identifying those high-impact Android malicious samples in the wild.

INDEX TERMS Android malware, deep neural network, high impact malicious samples, low impact malicious samples, static analysis, SVM.

# I. INTRODUCTION
Lately Android OS is the number one system globally, with approximately 86% of the whole global mobile phones market share in the Q1 of 2017 . Meanwhile, the prevalence of Android operating system, combining with its openness trait, has caused the number of Android malware skyrocketed in both the official markets (e.g., Google Play1) and third-party (WanDouJia2) Android application markets. In the first quarter of 2017 alone, over 750,000 new Android malware samples were identified by experts in G DATA security.

The associate editor coordinating the review of this manuscript and approving it for publication was Khalid Aamir.

1 https://play.google.com/store
2 https://www.wandoujia.com/
2169-3536 2019 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. VOLUME 7, 2019 See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

# EEE Access
# J. Qiu et al.: Predicting the Impact of Android Malicious Samples via Machine Learning
analysis which is performed during the run-time of the appli- cations. Hybrid analysis will perform both static analysis and dynamic analysis for the candidate applications. The major- ity of the existing works focused on determining whether the candidate Android applications are benign or malicious. However, along with the tremendous number of Android malware being detected every day, only a small fraction of them will incur serious damage to mobile users or organi- zations. Based on this observation, we infer the importance of predicting the impact of malware (low impact or high impact). If the malware is with high impact, we must defend it with high priority to be aware of its potential damage as much as possible. In this paper, we propose a new research problem: How to automatically predict the impact of the detected Android mawlare?
However, there are few work on predicting the impact of the detected Android malware so far. Most of the existing works concerned only the identification of Android mal- ware or classification of malware into the specific families. To investigate the solution to the proposed research ques- tion, we should address three critical challenges. Firstly we need to define the impact metrics to validate the impact of malicious Android samples. Besides, another challenge is the lack of an Android malware dataset with impact ground truth in terms of impact. The third challenge is about how to effectively and efficiently make the impact prediction for the newly encountered Android malware. To address the listed challenges, we make four main contributions in this work:
1. We raise a new research problem: how to automatically and accurately make the impact predict for the identi- fied Android malicious samples?
2. We define two impact metrics (the size of affected Android end devices, in short for SOD, and the size of infected countries, also called SOC) to characterize the impact of Android malicious samples.

3. We construct a new Android malware dataset (also called Mal_Impact Dataset) containing low impact and high impact malicious samples. To facilitate the fol- lowing similar works related to the impact prediction of Android malicious samples, we will release our constructed malware impact dataset to the public.

4. We design a light-weight solution to automatically and accurately make the impact prediction for the identi- fied Android malicious samples. Semantic features are decoded from AndroidManifest.xml files and disassem- bled binary classes.dex codes to represent the intrinsic characteristics of both low and high impact Android malicious samples. Then we train the Support Vector Machine and Deep Neural Network models to cate- gorize the candidate Android malicious samples into low or high impact. Our empirical studies validate the effectiveness and feasibility of our designed solution.

The rest of the paper is organized as follows: Section 2 reviews the related work of Android malware analysis. Our designed methodology is introduced in Section 3. In Section 4, we give the experimental settings, evaluation metrics and detailed results. In Section 5, we present the limitations of this work. Section 6 concludes the paper and gives the following research directions.

# II. RELATED WORK
The analysis and identification of Android malware has been an active research area in the recent years. The research communities have proposed many techniques to deal with the growing number and evolution of Android malware. Android malware detection is surveyed in.

# A. STATIC ANALYSIS TECHNIQUES
Static analysis is conducted through reverse engineering the binary codes of the candidate Android applications with- out actual execution. We can further divided static analysis into three categories: The first category is called signature related methods. These methods focus on producing a robust malware signature based on the particular strings or seman- tic code patterns in the applications’ code packages . Then in the malware detection process, if the candidate application’s signature is similar to one of the signatures in the malware’s signature database, then it is regarded as a malware. DroidAnalytics , AndroSimilar  and ASTROID  are three signature related examples. The sec- ond category is permission related methods which collect the requested permissions declared in AndroidManifest.xml files to detect potential malware. The permission related methods include ,  and . The final category is related to binary Dalvik bytecode classes.dex analysis. This category of methods will obtain the source code through disassembling the binary classes.dex bytecode, such as , , , . When the binary classes.dex codes have been disassem- bled into the corresponding source codes, the suspicious API calls, CFG (control flow graphs), or FCG (function call graphs) can be revealed to represent the discriminate patterns between malicious Android samples and benign samples , ,.

# B. DYNAMIC ANALYSIS TECHNIQUES
Dynamic analysis traces and analyses the malicious behav- iors and system calls of Android applications during exe- cution in the virtual environments. TaintDroid  was the pioneer dynamic analysis system. It was efficient in dynamic taint tracking. Another popular dynamic analysis system was DroidScope. DroidScope can rebuild semantic information seamlessly and simultaneously on the Java Dalvik level as well as Linux OS level . Zhang et al.  created a system called VetDroid, which can rebuild malicious and sensitive behaviors in Android applications. Another dynamic frame- work AppsPlayground was implemented to analyze Android applications automatically. AppsPlayground combined many automatic exploration and detection strategies (e.g., kernel level system call monitoring, taint tracing tool ) for large- scale Android applications analysis . An alternative dynamic solution was proposed by Georgios Portokalidis et al. to perform the detection task on remote
VOLUME 7, 2019 66305
# J. Qiu et al.: Predicting the Impact of Android Malicious Samples via Machine Learning
security servers in the cloud where execution of the appli- cations on the device is mirrored in virtual machine envi- ronments. The remote servers are not subject to the same constraints with the devices, thus it is possible to employ multiple detection techniques in parallel.