# Arabian Journal for Science and Engineering (2020) 45:3289–3315
1. Palomba, F.; Panichella, A.; De Lucia, A.; Oliveto, R.; Zaidman, A.: A textual-based technique for smell detection. In: 2016 IEEE 24th International Conference on Program Comprehension (ICPC), pp. 1–10 (2016)
2. Di Nucci, D.; Palomba, F.; Tamburri, D.A.; Serebrenik, A.; De Lucia, A.: Detecting code smells using machine learning techniques: are we there yet?. In: 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 612–621 (2018)
3. Liu, H., Jin, J., Xu, Z., Bu, Y., Zou, Y., Zhang, L.: Deep learning based code smell detection. IEEE Trans. Softw. Eng. (2019). https://doi.org/10/TSE
4. Banerjee, A.; Chong, L.K.; Chattopadhyay, S.; Roychoudhury, A.: Detecting energy bugs and hotspots in mobile apps. In: Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 588–598 (2014)
5. Hecht, G.: An approach to detect Android antipatterns. In: Proceedings of the 37th International Conference on Software Engineering, vol. 2, pp. 766–768 (2015)
6. Hecht, G.; Rouvoy, R.; Moha, N.; Duchien, L.: Detecting anti-patterns in android apps. In: Proceedings of the Second ACM International Conference on Mobile Software Engineering and Systems, pp. 148–149 (2015)
7. Palomba, F.; Di Nucci, D.; Panichella, A.; Zaidman, A.; De Lucia, A.: Lightweight detection of Android-specific code smells: the aDoctor project. In: 2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 487–491 (2017)
8. Rasool, G.; Arshad, Z.: A review of code smell mining techniques. J. Softw. Evol. Process 27(11), 867–895 (2017)
9. Carette, A.; Younes, M.A.A.; Hecht, G.; Moha, N.; Rouvoy, R.: Investigating the energy impact of android smells. In: 24th International IEEE Conference on Software Analysis, Evolution and Reengineering (SANER), p. 10 (2017)
10. Grano, G.; Di Sorbo, A.; Mercaldo, F.; Visaggio, C.A.; Canfora, G.; Panichella, S.: Android apps and user feedback: a dataset for software evolution and quality improvement. In: Proceedings of the 2nd ACM SIGSOFT International Workshop on App Market Analytics, pp. 8–11 (2017)
11. Mateus, B.G.; Martinez, M.: An empirical study on quality of Android applications written in Kotlin language (2018). arXiv preprint arXiv:1808
12. Peruma, A.S.A.: What the smell? An empirical investigation on the distribution and severity of test smells in open source Android applications. Master Thesis, Rochester Institute of Technology, Rochester, New York (2018)
13. Elsayed, E.K.; ElDahshan, K.A.; El-Sharawy, E.E.; Ghannam, N.E.: Reverse engineering approach for improving the quality of mobile applications. PeerJ Preprints 7, e27633v1 (2019)
14. Almalki, K.S.: Bad Droid! An in-depth empirical study on the occurrence and impact of Android specific code smells. Thesis. Rochester Institute of Technology (2018)
15. El-Dahshan, K.A.; Elsayed, E.K.; Ghannam, N.E.: Comparative study for detecting mobile application’s anti-patterns. In: Proceedings of the 2019 8th International Conference on Software and Information Engineering, pp. 1–8 (2019)
16. Habchi, S.; Hecht, G.; Rouvoy, R.; Moha, N.: Code smells in iOS apps: how do they compare to Android?. In: Proceedings of the 4th International Conference on Mobile Software Engineering and Systems, pp. 110–121 (2017)
17. Hecht, G.; Benomar, O.; Rouvoy, R.; Moha, N.; Duchien, L.: Tracking the software quality of android applications along their evolution (t). In: Proceedings of 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 236–247 (2015)
18. Mannan, U.A.; Ahmed, I.; Almurshed, R.A.M.; Dig, D.; Jensen, C.: Understanding code smells in android applications. In: Proceedings of the International Workshop on Mobile Software Engineering and Systems, pp. 225–234. ACM (2016)
19. Ghafari, M.; Gadient, P.; Nierstrasz, O.: Security smells in Android. In: Proceedings of IEEE 17th International Working Conference on Source Code Analysis and Manipulation, pp. 121–130 (2017)
20. Cruz, L.; Abreu, R.: Using automatic refactoring to improve energy efficiency of Android apps (2018). arXiv preprint arXiv:1803
21. Abbes, M.; Khomh, F.; Guéhéneuc, Y.-G.; Antoniol, G.: An empirical study of the impact of two antipatterns, blob and spaghetti code, on program comprehension. In: Proceedings of the 15th European Conference on Software Maintenance and Reengineering, Oldenburg, Germany. IEEE Computer Society, pp. 181–190 (2011)
22. Oliveira, J.; Viggiato, M.; Santos, M.; Figueiredo, E.; Marques-Neto, H.: An empirical study on the impact of android code smells on resource usage. In: International Conference on Software Engineering & Knowledge Engineering (SEKE) (2018)
23. Verdecchia, R.; Saez, R.A.; Procaccianti, G.; Lago, P.: Empirical evaluation of the energy impact of refactoring code smells. In: 5th International Conference on ICT for Sustainability, pp. 365–383 (2018)
24. Khomh, F.; Di Penta, M.; Guéhéneuc, Y.-G.; Antoniol, G.: An exploratory study of the impact of antipatterns on class change and fault-proneness. Empir. Softw. Eng. 17(3), 243–275 (2012)
25. Das, T.; Di Penta, M.; Malavolta, I.: A quantitative and qualitative investigation of performance-related commits in Android apps. In: 2016 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 443–447 (2016)
26. Tufano, M.; Palomba, F.; Bavota, G.; Oliveto, R.; Di Penta, M.; De Lucia, A.; Poshyvanyk, D.: When and why your code starts to smell bad. In: Proceedings of the 37th International Conference on Software Engineering, vol. 1, pp. 403–414 (2015)
27. Palomba, F.; Bavota, G.; Di Penta, M.; Fasano, F.; Oliveto, R.; De Lucia, A.: On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation. Empir. Softw. Eng. 23(3), 1188–1221 (2018)
28. Gadient, P.; Ghafari, M.; Frischknecht, P.; Nierstrasz, O.: Security code smells in Android ICC. Empir. Softw. Eng. 24, 3046–3076 (2018)
29. Olbrich, S.; Cruzes, D.S.; Basili, V.; Zazworka, N.: The evolution and impact of code smells: a case study of two open source systems. In: Proceedings of the 2009 3rd International Symposium on Empirical Software Engineering and Measurement, ser. ESEM’09, pp. 390–400 (2009)
30. Cairo, A.; Carneiro, G.; Monteiro, M.: The impact of code smells on software bugs: a systematic literature review. Information 9(11), 273 (2018)
31. Yamashita, A.; Counsell, S.: Code smells as system-level indicators of maintainability: an empirical study. J. Syst. Softw. 86(10), 2639–2653 (2013)
32. Perez-Castillo, R.; Piattini, M.: Analyzing the harmful effect of god class refactoring on power consumption. IEEE Softw. 31(3), 48–54 (2014)
33. Gottschalk, M.; Jelschen, J.; Winter, A.: Saving energy on mobile devices by refactoring. In: EnviroInfo. enviroinfo.eu, pp. 437–444 (2014)
34. Kim, D.K.: Towards performance-enhancing programming for Android application development. Int. J. Contents 13(4), 39–46 (2017)
35. Rodriguez, A.; Longo, M.; Zunino, A.: Using bad smell-driven code refactorings in mobile applications to reduce battery usage.

# Arabian Journal for Science and Engineering (2020) 45:3289–3315
# Arabian Journal for Science and Engineering (2020) 45:3289–3315
# Conference on Computational Science and Its Applications
pp. 665–682 (2017)
1. Kaur, A.; Dhiman, G.: A review on search-based tools and techniques to identify bad code smells in object-oriented systems. In: Harmony Search and Nature Inspired Optimization Algorithms, pp. 909–921 (2019).

2. Sharma, T.; Spinellis, D.: A survey on software smells. J. Syst. Softw. 138, 158–173 (2018)
3. Azeem, M.I.; Palomba, F.; Shi, L.; Wang, Q.: Machine learning techniques for code smell detection: a systematic literature review and meta-analysis. Information and Software Technology (2019)
4. Azadi, U.; Fontana, F.A.; Zanoni, M.: Poster: machine learning based code smell detection through WekaNose. In: 2018 IEEE/ACM 40th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion), pp. 288–289 (2018)
5. Caram, F.L.; Rodrigues, B.R.D.O.; Campanelli, A.S.; Parreiras, F.S.: Machine learning techniques for code smells detection: a systematic mapping study. Int. J. Softw. Eng. Knowl. Eng. 29(02), 285–316 (2019)
6. Alkharabsheh, K.; Crespo, Y.; Manso, E.; Taboada, J.A.: Software design smell detection: a systematic mapping study. Softw. Qual. J. 27, 1069–1148 (2018)
7. de Paulo Sobrinho, E.V.; De Lucia, A.; de Almeida Maia, M.: A systematic literature review on bad smells—5 W’s: which, when, what, who, where. IEEE Trans. Softw. Eng. 1–58 (2018)
8. Barbez, A.; Khomh, F.; Guéhéneuc, Y.G.: A machine-learning based ensemble method for anti-patterns detection (2019). arXiv preprint arXiv:1903.

9. Saranya, G.; Nehemiah, H.K.; Kannan, A.; Nithya, V.: Model level code smell detection using egapso based on similarity measures. Alexandria Eng. J. 57(3), 1631–1642 (2018)
10. Fernandes, E.; Oliveira, J.; Vale, G.; Paiva, T.; Figueiredo, E.: A review-based comparative study of bad smell detection tools. In: Proceedings of the 20th International Conference on Evaluation and Assessment in Software Engineering, p. 18. ACM (2016)
11. Din, J.; Al-Badareen, A.B.; Jusoh, Y.Y.: Antipatterns detection approaches in object-oriented design: a literature review. In: 2012 7th International Conference on Computing and Convergence Technology (ICCCT), pp. 926–931 (2012)
12. Kitchenham, B.; Pearl Brereton, O.; Budgen, D.; Turner, M.; Bailey, J.; Linkman, S.: Systematic literature reviews in software engineering–a systematic literature review. Inf. Softw. Technol. 51(1), 7–15 (2009)
13. Ibrahim, R.; Ahmed, M.; Nayak, R.; Jamel, S.: Reducing redundancy of test cases generation using code smell detection and refactoring. J. King Saud Univ. Comput. Inf. Sci. (2018, in press)
14. Palomba, F.; Di Nucci, D.; Panichella, A.; Zaidman, A.; De Lucia, A.: On the impact of code smells on the energy consumption of mobile applications. Inf. Softw. Technol. 105, 43–55 (2019)
15. Singh, S., & Kaur, S. (2017). A systematic literature review: Refactoring for disclosing code smells in object oriented software. Ain Shams Engineering Journal.