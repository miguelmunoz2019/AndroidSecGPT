# IX. DISCUSSION
Like any other program analysis tool, OAUTH LINT has a number of limitations: OAUTH LINT proposes a query language that helps developers to define OAuth-based anti-protocols. In this paper, we
# X. CONCLUSIONS AND FUTURE WORK
In this paper, we propose OA UTH L INT, the first static analyzer for checking anti-protocols (i.e., vulnerabilities) in mobile OAuth implementation. We propose five anti-protocols that widely appear in mobile apps and formalize them using our query language. Furthermore, we leverage a fully-automatic and demand-driven static analysis to identify anti-protocols that appear in the Android apps from the relying parties. To evaluate the effectiveness of our approach, we perform a systematic study on 600+ popular apps which have 10 millions of downloads. Our evaluation shows that for those popular apps that use OAuth API, more than 32% of them contain at least one anti-protocol. For those anti-protocols identified by OA UTH L INT, we also reported them to the developers of corresponding mobile apps.

There are several future directions that we plan to explore. First, we will develop techniques to automatically repair Android apps that have vulnerabilities in their OAuth implementations. Second, we are also very interested in applying program synthesis to perform a correct-by-construction paradigm for OAuth implementations. In that case, developers only need to specify the OAuth specifications using a high-level domain specific language and let the synthesizer generate the implementations..