1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# NIRUMAND et al.

# Ratings of selected apps from Google Play according to their 5-star ranking (282 Android apps)
Ghera1 is a growing repository of Android apps (benchmarks) that captures known vulnerabilities in Android applications in various categories, including Crypto, Networking, NonAPI, Permission, Storage, System, Web APIs, and ICC. This repository contains several bundles of Android apps. In each bundle, there is a benign app that has a specific vulnerability and a malicious app that exploits benign to establish a malicious communication. Since the vulnerabilities in the Ghera repository have already been reported in the literature and documented in Android documentation, these vulnerabilities are valid. These vulnerabilities can be examined by executing benign and malicious apps on Android emulators and devices. Therefore, they are exploitable and general. These vulnerabilities can occur on the Android app running on Android 5 to 8.

Due to the characteristics of Ghera, to examine the correctness criterion, the Ghera repository is used. From this repository, only bundles related to ICC that contain Intent Spoofing or Unauthorized Intent Receipt are considered. The bundles are as follows:
1. DynamicRegBroadcastReceiver-UnrestrictedAccess
2. EmptyPendingIntent-PrivEscalation
3. HighPriority-ActivityHijack
4. ImplicitPendingIntent-IntentHijack
5. StickyBroadcast-DataInjection
6. UnprotectedBroadcastRecv-PrivEscalation
According to an empirical evaluation by Ranganath and Mitra,1 COVERT10 and DIALDroid55 that claim to detect inter-app vulnerabilities failed to identify vulnerabilities in Ghera. Based on the results of applying VAnDroid2 to these bundles, this tool detected all the vulnerabilities in these bundles without any further reported security issues. Therefore, VAnDroid2 can correctly detect inter-app ICC vulnerabilities in Android applications, hence the approach conducted in this tool is reliable.

# RQ2 (Scalability)
Scalability indicates the ability of a software program to process an increasing number of elements as inputs The software system must be performed well while increasing the number of elements as inputs to examine this criterion According to this definition, in this evaluation, the ability of VAnDroid2 to deal with the following issues is examined:
# 1097024x, 2023, 4
Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# NIRUMAND et al.

# T A B L E 3
# Summary of the results obtained from running VAnDroid2 over the selected app bundles
• Android applications in various contexts
• Android applications with different components and resources
• Large applications (in terms of code size)
• Large number of applications
As explained before, we evaluated VAnDroid2 on 10 app bundles containing real-world Android applications to determine the ability of VAnDroid2 in inter-app ICC vulnerability detection. Table 3 shows the results of running VAnDroid2 on each bundle. The values in this table are the results obtained by applying VAnDroid2 on Android app bundles.

The Component column shows the total number of components (i.e., Activities, Services, Receivers, and Content Providers). The Intent column specifies the number of intents (both explicit and implicit). The Intent Filter column indicates the number of interfaces provided (i.e., intent filters). The Communication Domain column specifies all potential explicit and implicit interactions made by explicit and implicit intents, respectively.

The Component Permission column specifies the number of permissions enforced by components. The Warning column shows the number of warnings generated by VAnDroid2. Each of these warnings represents a unique interaction with all specifications (i.e., the sender and receiver components) that leads to an Intent Spoofing or Unauthorized Intent Receipt vulnerability. Note that the Intent Spoofing column is related to both explicit and implicit communication domains, but the Unauthorized Intent Receipt column is related to the implicit communication domain.

Consider bundle 10 in the last row, this bundle includes 137 app components, 159 explicit intents, 267 implicit intents, 70 intent filters, and 4 component permissions. As depicted in the Communication Domain column, out of 159 explicit intents, 86 explicit intents can make explicit inter-component communications in this app bundle. Also, out of 267 implicit intents, 196 implicit intents can make implicit ICCs in this app bundle. According to the Warning column, out of 282 ICCs, 123 communications can cause Intent Spoofing vulnerability. Out of 196 implicit ICCs, 173 communications can cause Unauthorized Intent Receipt vulnerability.

In Figure 17, we examined the execution time changes for the benign Android apps according to the three app-specific factors (i.e., the number of intents, the number of Activities, and LOC). As can be seen, when each of these factors increases significantly, the execution time does not increase significantly and is still an acceptable amount of time. The median evaluation time is 191 ms with the interquartile range of 832 ms, which indicates that VAnDroid2 can quickly analyze real-world Android applications.

Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# NIRUMAND et al.

# (emiTnoitucexE ms)
# T A B L E 4
# Benign Android apps in each bundle used in the evaluation
# F I G U R E 17
Scatterplot representing the execution time for the benign Android apps in each bundle according to (A) the number of intents, (B) the number of Activities, and (C) lines of code (LOC)
# 5. Execution time of applying VAnDroid2 to selected bundles
The results show that VAnDroid2 is able to automatically detect inter-app vulnerabilities in bundles of real-world apps in various contexts (depicted in Figure 15), with different components and resources (depicted in Tables 3 and 4), with large apps (i.e., in terms of code size as depicted in Table 4), and with new versions of Android API (according to the creation date of apps which are after December 2019). Therefore, VAnDroid2 has been able to support the scalability criterion in the detection of ICC vulnerabilities of Android apps.

# 6 RQ3 (run-time performance)
As described in Section 5, to further improve the performance and scalability of the proposed approach, incremental ICC analysis is also considered. In this section, first, the execution time of applying VAnDroid2 to the 10 bundles is examined. Then, the execution time of VAnDroid2 according to the incremental ICC analysis feature is evaluated.

# 6 Results for selected bundles
Since the first phase of VAnDroid2 is based on MoDisco, as depicted in Table 5, we measured the execution time of phase 1 of Figure 7 and the execution time of phases 2 and 3 of Figure 7, separately. As can be seen, VAnDroid2, in less than a few minutes, is able to analyze and identify inter-app ICC vulnerabilities in bundles of real-world apps that have different components and interactions.

# 6 Results for incremental ICC analysis
# 7 Discussion
According to the evaluation results, VAnDroid2, as a framework for detecting security issues in IAC, can be used by developers, security analysts, and researchers of Android applications. In the following, to discuss the strengths and weaknesses of VAnDroid2, in Section 7, a breakdown of the ICC vulnerabilities reported by VAnDroid2 is compared with the work of Chin et al In Section 7, VAnDroid2 is compared with the related work that are proposed in the static.

Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

# NIRUMAND et al.

F I G U R E 18 Execution time versus the increasing size of analyzed bundles. (A) the first five bundles; (B) the last five bundles
# T A B L E 6 Obtained breakdown by Chin et al and by VAnDroid2
Android analysis field (described in Section 3). In Section 7, VAnDroid2 is compared with several existing state-of-the-art tools related to ICC analysis of Android applications. The results of these comparisons indicate that the VAnDroid2 tool has been able to extract high-level representations (models) from the security specification and structure of Android apps without losing information. Also, this tool achieved more precision, recall, and F-measure than the other analysis tools. In Section 7, the (re)use and extension potential of VAnDroid2 for other types of ICC vulnerabilities are explained. Section 7 provides a tabular comparison between VAnDroid2 and the original VAnDroid framework19 to specify in detail the significance of the extensions made in VAnDroid2. Finally, in Section 7, limitations and threats to the validity of VAnDroid2 are discussed.