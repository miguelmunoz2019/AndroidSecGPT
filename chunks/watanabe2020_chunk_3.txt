Each of these vulnerability categories has the following implications. Information disclosure involves the inclusion or improper access control of sensitive information that may lead to undesired leakage. Cryptography involves the misuse of SSL/TLS and cryptographic-related code, which may lead to cryptographic integrity being compromised. ICC involves improper permissions that may allow another app to access an app’s sensitive information. WebView involves the misuse of Android’s WebView class, which has been a source of many vulnerabilities, including remote code execution.

AB = AndroBugs, STF = Secret Token Finder, MD = MalloDroid, WCC = Weak Certificate Checker, and QA = QARK
AWS and Google OAuth tokens. MalloDroid ,  is an open-source tool for statically analyzing an APK file for various potential SSL related security flaws, such as the inclusion of an invalid SSL certificate or misuse in the SSL validation logic. We considered the app vulnerable if at least one of the flaws was detected. Weak Certificate Checker is a tool we implemented to find cryptographically weak certificates used to sign an APK file. It does several checks, such as whether a certificate was created with a key with less than 1,024 bits, or is vulnerable to certain attacks, e.g., Wiener’s attack and common modulus attack. We considered the app vulnerable if at least one of the flaws was detected. QARK  is an open-source tool for analyzing vulnerabilities of Android apps either in source code or packaged APKs. The tool automates the use of multiple decompilers and combines their outputs to improve results. It covers various security related Android application vulnerabilities such as the creation of world-readable or world-writable files, activities that may leak data, private keys embedded in the source code, apps that are debuggable, etc.

# 4 Threats to Validity
Similar to the Droid-L system, Droid-V employs static code analysis to perform a large-scale study. Clearly, static code analysis may not be able to track dynamically assigned program code. Poeplau et al.  reported that malicious apps using dynamic code loading techniques can evade detection using offline vetting processes, e.g., static analysis, anti-virus scanning, or dynamic analysis in a sandbox without Internet connectivity. A malicious app can contain only the minimal functionality sufficient to circumvent
# WATANABE et al.: STUDY ON THE VULNERABILITIES OF FREE AND PAID MOBILE APPS
the vetting process on Google Play, i.e., Bouncer . The malicious code is downloaded only after the app is installed on a device. Dynamic code loading is an obstacle to vulnerability assessment for external code for non-malicious apps. Employing dynamic code analysis with Internet connectivity could be a promising solution to this problem. However, dynamic code analysis has several technical challenges, i.e., scalability, measuring and improving code coverage, and generating a test scenario for UI navigation . We intend to address these challenges in future work.

# 5 Characteristics of Free/paid Apps
In the following analyses, we attempt to characterize the collected data. The derived characteristics are useful to understand the sources and impacts of vulnerabilities associated with libraries. In other words, we investigate the number of installs, prices, and number of classes.

# 5 Number of Installs
This section describes the free and paid app datasets used in our analysis. Since there have been no studies that analyzed paid mobile apps on a large scale, it would be meaningful to present how they are different from free apps. As discussed later, paid apps exhibit different characteristics compared to free apps. We construe that this reflects differences in app development and maintenance processes. We first provide an overview of datasets and then present interesting findings derived through an analysis of paid/free apps and the corresponding metadata, such as the prices of paid apps and the number of installs.

# 5 Data Description
We collected paid and free Android apps available on Google Play . We collected and used Android apps for two purposes. The first purpose was to generate the fingerprint DB (Sect. 3). To this end, we collected 2M free apps and 30K paid apps from Google Play. Table 4 summarizes the data collected to generate the fingerprint DB. The second purpose was to analyze the vulnerabilities of the libraries. Collecting and analyzing all paid and free apps on Google Play was not feasible due to budgetary and labor costs; thus, we made use of filtration and sampling as follows. First, we compiled lists of paid and free apps published on Google Play. From each list, we selected both the top-K and randomly sampled apps. The selected apps were divided into four sets, i.e., paid top, paid random, free top, and free random apps. The top-K apps represent the most influential apps, and the randomly sampled apps reflect the statistics of each population. We used the top-5k and random-10k (rand-10k) apps for our analysis. In total, we 30k apps were used in our analyses. To further investigate the changes of vulnerabilities of apps/libraries over time, we updated these apps six months after we first collected them. Results for updated apps are presented in Sect. 6.

# 5 Prices
In this study, we are interested in how prices correlates to vulnerabilities. It is known that customers use price-perceived quality heuristics  when appraising the quality of a product or service. It is natural to assume that such perception might reflect expectations regarding security risks. In other words, customers may believe that a paid app has fewer security risks than a free app. After analyzing the vulnerabilities of paid mobile apps in the next section, we return to this issue in Sect. 7.

# IEICE TRANS. INF. & SYST., VOL.E103–D, NO FEBRUARY 2020
282
# 5 Time of Last Update
We look into the time of the last update, which represents whether a particular app is actively developed/maintained. This information is useful for predicting the security awareness of a developer. For instance, if an app has not been updated for a long time, it may have more security risks than apps with recent updates. Ideally, it is good to use the full history of updates to measure the average time between updates. However, such information is not accessible from the web interface of the official market. As a substitute, we made use of the last date an app received an update. Though the last update date is more coarse-grained than the full history of updates, it gives us useful information about an app’s development activity.

# 5 Number of Classes
# 6. Analysis Results
This section describes the results we obtained through extensive analysis of the datasets. We first present the software libraries detected using the Droid-L system (Sect. 6). Then, we present vulnerable libraries found with the two systems, i.e., Droid-L and Droid-V (Sect. 6). We also analyze how these results have changed over time (Sect. 6). Finally, we summarize the key findings derived through the analyses. Based on the findings, we provide several suggestions to stakeholders (Sect. 6).

# 6 Detected Software Libraries
Tables 7 and 8 present breakdowns of the extracted libraries per category/sub-category. In Table 7, we see that, across all the datasets, third-party libraries accounted for roughly 70%–80% of the detected libraries. Official libraries accounted for roughly 20%–30% of the detected libraries. The number of detected private libraries was much smaller than other categories. Next, in Table 8, we see that, across all datasets, development aid (Dev) was the most dominant type of third-party library. This observation was
# WATANABE et al.: STUDY ON THE VULNERABILITIES OF FREE AND PAID MOBILE APPS
# 6 Analysis of Vulnerable Apps/Libraries
Here, we first present the statistics for apps that contain the summarized vulnerabilities. We then examine the libraries with vulnerabilities. We also examine how the detected vulnerable libraries changed over a period of six months. Note that an app could have a vulnerability contained in multiple libraries.

# 6 Vulnerable Apps
# IEICE TRANS. INF. & SYST., VOL.E103–D, NO FEBRUARY 2020
# Vulnerable Libraries
Here, we examine how many detected vulnerabilities were attributed to libraries. We also assess the origins of the vulnerable libraries. Table 10, Vlib shows the fractions of apps whose vulnerabilities originated from their libraries for all vulnerable apps. For free apps, of the apps that contain at least one vulnerability, 71%–72% were vulnerable due to libraries. For paid apps, the fractions were a bit smaller; however, 46%–52% were vulnerable due to libraries. Thus, we conclude that most mobile apps’ vulnerabilities originate from libraries. On the other hand, the p-value of the two-sample t-test for the top free apps and randomly sampled free apps exceeded 0. Thus, we did not see the difference of tendencies due to the popularity of the apps.

Finally, the bottom panel of Fig. 9 shows the relationship between third-party library sub-categories and vulnerabilities. Among the sub-categories, Development Aid (Dev), Social Network (SNS), Advertisement (Ad), and App building framework (Build) were the main origins of the vulnerabilities. In addition, each sub-category contains intrinsic vulnerability patterns, e.g., while Ad libraries mainly contributed to the ID-GLOB and WV-RCEV, SNS libraries mainly contributed to WV-SSLV and WV-DOMS.