# 4. Replay protected memory Block (RPMB) partition
In rooted Android, user area partition can be quickly erased or hacked using read/write system calls. Therefore, hackers can take backup of this partition and restore it to another phone to access data . RPMB is a specific memory area in Embedded MultiMediaCard (eMMC). It is a secure storage partition, in which, all read and write commands issued to the RPMB must be authenticated. Authors in  implemented this hardware-based mechanism and developed.

# Offloading Encryption or deletion
Tinman separates cor and protects it by applying offloading mechanism (“javax.crypto—Android Developers,” Developer.android.com, 2016).

# H. Altuwaijri, S. Ghouzali / Journal of King Saud University – Computer and Information Sciences 32 (2020) 543–552
# 4. CATT
CATT is the first practical software-based defense against RowHammer attack proposed in . The researchers presented the design and implementation of this mitigation scheme. The main idea of CATT is not to prevent bit flips, but rather to limit the bit flips to memory pages that are already in the address space of the malicious application. Hence, strong isolation of user and kernel space is required to ensure that the attacker cannot exploit RowHammer to flip the bit in kernel memory. CATT solution has been successfully and efficiently applied to the Android operating system as it does not affect the run-time performance nor the stability of the system.

# 4. ARMOR
ARMOR, A Run-time Memory Hot-Row Detector, is a hardware defense against RowHammer attack developed in the University of Manchester – The school of Computer Science – . ARMOR solution is based on monitoring number of activations for each row in the DRAM and detects which specific rows are at risk of being “hammered” at run-time. It can detect all the possible RowHammer errors with a high level of confidence and accuracy. Additionally, it is scalable and technology independent.

# 4. Software threat solutions
Software threat solutions are mainly based on encryption schemes, which are one of the key security features for protecting data on a device. Android provides several encryption systems that can be used as a countermeasure for software-based threats.

# 4. Android encryption systems
There are two primary encryption systems provided by Android; Full Disk Encryption (FDE) and KeyChain.

# 4. Full disk encryption
Since Android 4 (released in October 2011), Android developers provide FDE that encrypts Android device to prevent data exposure and to protect users against data theft (Müller et al., 2013). However, Version 4.x does not necessarily indicate that the device supports encryption, there are specific 4 devices, which do not support encryption.

FDE uses the user’s password or PIN-lock screen to derive the encryption key through password-based key derivation function 2 (PBKDF2) to encrypt the device. Other lock screens, such as the pattern lock functionality cannot be used except in the latest version of Android 5 where PIN, Passwords, and Patterns can be used as encryption keys (“Full Disk Encryption | Android Open Source Project”, Source.android.com, 2016). Thus, the power of the encryption depends on the strength of the passcode . Moreover, requiring the user to type the encryption password every time he wants to unlock the screen, makes him even less likely to choose a secure password. Also, there is an increased chance that an attacker is shoulder surfing while user unlocks screen, which will disclose encryption password as well. Also, FDE is a lengthy process that makes the device unusable during that time, depending on the device capabilities; FDE may degrade the device performance. Once it is enabled, it cannot be reversed without a factory reset of the device. If the user forgets the key, there is no way to get the data back.

This encryption feature is disabled by default, and the user must activate it manually, which raises a security risk. Furthermore, it can only be activated if PIN-locks or passwords are in use (Müller et al., 2013). FDE does not encrypt whole disks, it encrypts user partitions mounted at (/data) only, which host app’s private directory. Each app has its own specific (/data) that it is hidden from users and cannot be read or written by any other app. It is usually used to store sensitive data such as configuration files, saved games data, or any other types of files that the user should not tamper with (“Remotely ring, lock, or erase a lost device – Accounts Help”, Support.google.com, 2016); (“Storing Application Data”, Google Developers, 2016). Moreover, FDE never applies for external storage.

However, in a recent release of Android 6 , the full disk encryption is mandatory by default . It encrypts the application’s private data (/data partition), and the application’s shared storage partition (/sdcard partition) also, which is the internal non-removable SD card (“Android 6 Compatibility Definition”, 2016). It is stated in Android 6 Compatibility Definition that the encryption must use AES with a key of 128-bits (or greater) and the key should be encrypted with lock screen passcode before being stored. “The encryption key SHOULD be AES encrypted with the lock screen passcode stretched using a slow stretching algorithm (e.g., PBKDF2 or scrypt). If the user has not specified a lock screen passcode or has disabled use of the passcode for encryption, the system SHOULD use a default passcode to wrap the encryption key” (“Android 6 Compatibility Definition”, 2016).

Overall, FDE depends on the Android version and device manufacturer, since each manufacturer supplies their devices with customized versions of the Android OS . Table 2 demonstrates different FDE features based on Android version and possible threats. None of these versions apply FDE to external storage.

# 4. KeyChain
Android version 4 introduces KeyChain API that allows developers to store user’s credentials used in an application securely. It is separate from FDE since it can be used even when the FDE system is not activated. This method of encryption depends on the developer’s decision in using it for their applications to store user’s credentials. Poor developer choices can lead to serious security problems. Moreover, if the Android system is already encrypted via FDE, there is no additional protection offered by the Android KeyChain. As in FDE, the user’s passcode is utilized to derive the cryptographic key that is used to encrypt a master key, as this means that the user influences the security of the KeyChain system by choosing the passcode for locking the Android device. KeyChain uses the same passcode used in screen lock as in FDE, and thus, if the passcode for the FDE system has already been determined by applying brute-force attack, there is no need to apply another attack for the KeyChain.

# 4. Other solutions
Based on Android encryption systems issues discussed above, Android secure storage application has been presented in . It prompts the user to store their data locally on the device in a secure way without an extra requirement. The proposed system provides an option to the user for encrypting specific files rather than full encryption. Moreover, the files can be saved in the unencrypted format without doing the factory reset as in FDE. Users can choose to store files in the secure storage; then these files will be encrypted using Password-Based Encryption Standard mechanism. The mechanism generates two keys; a master key that is generated from the user’s password and content protection key that is used to encrypt sensitive data, and it is encrypted by the master key. The main drawback of the proposed app is that it depends on the user’s password that can be stolen or forgotten. In contrast to passwords, user’s biometrics cannot be easily forged, duplicated, or shared. Google published Android 6 (released in October 2015) that includes Fingerprint API, which
# H. Altuwaijri, S. Ghouzali / Journal of King Saud University – Computer and Information Sciences 32 (2020) 543–552
# FDE features and threats.