# 2 BACKGROUND
When we are using mobile apps to, e.g., chat with friends, read posts on social platforms, or read emails, we often need to open a URL link. In order to provide a “one-stop” service to keep users within the app interface without the need of switching to a web browser, many apps have implemented their own in-app browsing interfaces (IABIs) which typically use the underlying browsing engines to load the web content.

# IABI (in-app browsing interface) and its address bar
We refer to the UI design of the entire screen when a mobile app opens a web page as the In-App Browsing Interface (IABI). In this paper, we mainly focus on the usability problems of IABIs’ address bars.

# Underlying browsing engines
The implementation of IABIs typically uses one of the following browsing engines:
- Chrome Custom Tabs (CCT in Android) 
# On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
# RAID ’21, October 6–8, 2021, San Sebastian, Spain
# Jump to stand-along
Before Page Opening
• SFSafariViewController (SF in iOS) 
• WebView (in Android) 
• UIWebView (in iOS)  and
• Custom browser engines implemented in native code.

# Chrome Custom Tabs and SFSafariViewController
CCT is supported by Chrome, which is a web browser developed by Google. A mobile app can send a special intent to Chrome to launch a CCT to open websites without implementing a built-in browser engine by themselves, assuming that Chrome is installed on the smartphone. Chrome also provides well-encapsulated APIs for developers to make some limited browsing UI customization, such as color and animation. Similarly, iOS has SF supported by Safari for developers to incorporate into their apps easily.

# WebView and UIWebView
Although CCT and SF provide convenient ways for a developer to implement IABI, one could choose, instead, to use lower-level display engines WebView and UIWebView (or even custom engines in native code ) for more comprehensive control over the UI. They allow developers to monitor specific events (e.g., loading and navigating) upon triggering of which developers can gather event information and make corresponding responses. The lower-level implementation of this design provides developers with very flexible control of the UI, which also implies more opportunities for design mistakes.

# 3 OVERVIEW OF OUR ANALYSIS
To reveal the usability security issues of IABIs in real-world applications, we analyze the IABIs in three phases corresponding to opening, displaying, and navigating a web page; see Figure 2. We design detailed security tests (T1 ∼ T8) to reveal security properties of the design of IABIs in real-world applications. URLs tested include those provided by https://badssl.com/ and homepages of Google and Facebook.

1. https://badssl.com
2. http://http.badssl.com
3. https://expired.badssl.com
4. https://wrong.host.badssl.com
5. https://self-signed.badssl.com
6. http://lock-title.badssl.com
7. https://long-extended-subdomain-name-containing-many-letters-and-dashes.badssl.com
8. http://http-login.badssl.com
9. https://google.com
10. https://m.facebook.com/login/
In this section, we will explain the details of our security tests T1 ∼ T8 and then describe in detail how the individual tests are performed in each stage.

# 3 Analyzing Risks before Page Opening
In the first phase of our analysis, we investigate how an app displays URLs before users tap on them to open the web pages (T1). The simplest design is to display only the URL of the website without other content. Some apps may show a box below the URL with additional information about the web page, e.g., the title and favicon.

T1 is an indispensable step in the process of opening a web page in the app. Since it is not a part of the IABI, we cannot compare it with mobile browsers, and existing work does not provide any principles about its design. Therefore, we assigned a GOOD rating according to criteria of other tests (T2, T6 & T7, see Section 3). It could be counter-intuitive, but we find that only displaying the URL without any other information could actually be a GOOD design because any additional information displayed (e.g., favicon) could potentially be taken advantage of by an attacker to provide misleading information (e.g., favicon being a lock emoji). NEUTRAL and BAD ratings are awarded accordingly.

To perform the test, we input all tested URLs to the subject apps and check the corresponding display. Note that at this moment the app does not open the website yet. Some apps may pre-load the website to get brief information about the website. We discuss the results of T1 in Section 4.

# 3 Analyzing Risks on Page Displaying
After an end user taps on the URL, the app could open the web page by switching to a stand-alone web browser (out of scope of our paper) or within the app implemented either with Chrome Custom Tabs (CCT)/SFSafariViewController (SF) or its customized IABI.

When displaying the corresponding web content, different apps could have their own design on the address bar, which is the focus of the analysis in this stage. It includes six tests as follows.

- T2: whether the URL is shown on the address bar (using URL9). End users need this information to know the origin of the page. Various designs include showing the URL and/or domain name.

- T3 and T4: how HTTPS and HTTP protocols are handled in the URL (using URL1 and URL2). The HTTPS indicator is very intuitive for users to recognize whether a web page meets the TLS requirement or not. IABIs should display the corresponding indicator in both HTTP and HTTPS web pages. If an IABI only displays the HTTPS indicators but shows no indicator for an HTTP page, the user may not know that the HTTP page is not secure before she opens another HTTPS page and sees the indicator.

- T5: how SSL errors are handled (using URL3∼5). The SSL errors tested include expired certificates, wrong hosts, and self-signed certificates. Various designs include blocking access, prompting options to end users, or accessing the web page without any warnings.

# RAID ’21, October 6–8, 2021, San Sebastian, Spain
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
- T6: how the title with a lock emoji is displayed (using URL6). Showing the lock emoji could mislead end users into believing that it is a secure web page with HTTPS protocol.

- T7: how URLs with long subdomain names are displayed (using URL7). Displaying only the long subdomain without the domain name could present an illusion of visiting a trusted domain.

Our ratings for T2 ∼ T7 are based on the evaluation of security indicators and principles on mobile browsers in existing work [9 –11], which perform systematic analysis based on best practices outlined in the World Wide Web (W3C) guidelines . In the following explanations, we first outline principles we extract from such guidelines that are applicable to IABIs, and then justify our definitions of the various ratings used in this paper.

# 1) Identity Signal: Availability
The security indicators showing identity of a website MUST be available to the user through either the primary or secondary interface at all times. We believe that IABIs should at least display the domain name of a website which is the basic identity of a page. Therefore in T2, we assign a GOOD rating to displaying the URL or domain name of a web page.

# 2) Error messages: Interruption/Proceeding options/Inhibit interaction
These three principles require that the error warnings MUST interrupt the users’ current task and inhibit the user to interact with the destination website. Meanwhile, the warnings MUST provide the user with distinct options (MUST NOT be only to continue). Accordingly, in T5 we test how IABIs react to erroneous certificates, like wrong-host, expired, or self-signed certificates. Our GOOD rating is consistent with this guideline, which is displaying a prompt with the option to continue or not before the user opens the SSL-error page. The only difference is that we relax the requirement a bit and allow IABIs to directly stop loading that page without providing options. A BAD rating is given to designs which directly open those pages with certificate errors. We assign NEUTRAL to designs that hand over the issue to a standalone browser, which is “lazy” but not compromising security.

# 3) TLS indicator: Availability
The TLS indicators MUST be available to the user through the primary or secondary interface at all times. Accordingly, we conduct T3 and T4, which test whether the HTTPS and HTTP indicators are displayed on the address bar. A GOOD rating is to display the indicators (lock/exclamation icons) to show whether a page meets the TLS requirement. A BAD design does not show any indicators. Displaying the scheme (“https://” or “http://”) also serves as an indicator, although not as intuitive as icons and therefore receives a NEUTRAL score.