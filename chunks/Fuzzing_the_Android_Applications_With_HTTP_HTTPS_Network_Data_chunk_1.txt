# Fuzzing the Android Applications With HTTP/HTTPS Network Data
XINYUE HUANG 1, ANMIN ZHOU1, PENG JIA2, LUPING LIU2, AND LIANG LIU1
1College of Cybersecurity, Sichuan University, Chengdu 610065, China
2College of Electronics and Information Engineering, Sichuan University, Chengdu 610065, China
Corresponding author: Liang Liu (liangzhai118@163.com)
# ABSTRACT
Nowadays, the number of mobile netizens continues to grow, mobile life continues to infiltrate people’s lives. Mobile applications play an increasingly important role in major industries (financial consumption, travel, education, and entertainment). High dependence and complexity make network communication become an important attack surface of mobile applications. How to quickly and efficiently discover security threats in the process of network interaction has become an urgent problem. This paper proposed a test method based on network packets fuzzing for Android applications. The scheme uses middleman technology to obtain the interaction data sent by servers to applications, adopts different mutation strategies to mutate the original data of different types, returns the mutated response data to applications, uses log monitoring technology to monitor crash information, thereby discovers potential security threats. 10 popular applications were tested based on the proposed method, and four kinds of problems were discovered. The problems contain unresponsiveness, crashes caused by JSON data exception, HTML content replacement, and URL redirection. The results indicated that the proposed method was effective in exposing bugs of mobile applications in the process of network data interaction.

# INDEX TERMS
Android applications, Fuzzing, HTTP/HTTPS, network data.

# I. INTRODUCTION
Nowadays, with the continuous development of the mobile network, Android applications face more and more security threats. These threats come from many sources –, and irregular/unexpected input data is one of the main reasons. For Android applications, data coming from the servers, files saved in local storage and operations performed by users are three main types of input data –.

At present, the main idea of mining and discovering the potential security threats based on input data, is to use fuzzing technology to mutate regular input data, and then check how the applications process the mutated data. Fuzzing is the technical means to discover applications’ code/logical defects by continuously inputting irregular data to them. It is one of the most common methods used in software security test –. File-based fuzzing technology is mature, and many fuzzing frameworks are available on Linux/Windows platforms (afl , Peach , etc.). User-based fuzzing technology mainly for the Android platform, which automatically manipulates applications and monitors if the applications crash, has test frameworks such as Monkey  and MonkeyRunner . Traditional network-based fuzzing is mainly used to test server-side applications (web applications, database applications, etc.), which is not effective and has limited support for massive mobile applications.

Considering the above problems, we proposed a fuzzing method based on network packets, to discover security threats and vulnerabilities of Android applications caused by the response data from servers. The main contributions of this paper are summarized as follows.

Novel: The main processing methods of Android applications on network data were summarized. Facing the plenty of data interaction between an Android application and its server, some valuable test objects were selected from a large number of HTTP/HTTPS response data, which reduced the difficulty of testing. At the same time, in order to adapt to the significantly different response data between various Android applications, a series of fuzzing strategies were developed. The proposed fuzzing method explores the potential security threats in Android applications from a new perspective.

Feasibility: In file-based fuzzing, mutated files can be repeatedly opened/loaded, different from this, mutated response data can be processed in real-time, which allows for immediate feedback on application behavior.

The associate editor coordinating the review of this manuscript and approving it for publication was Tianhua Xu.

2169-3536 2019 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

# EEE Access
# X. Huang et al.: Fuzzing the Android Applications With HTTP/HTTPS Network Data
Response data sent to an application will not be effectively processed without operating the application according to a particular sequence. Additionally, before triggering a crash, for the same test input data, fuzzing technology needs to generate variant samples and perform multiple tests. Therefore, how to achieve reproducibility is the main problem need to be solved when performing network-based fuzzing, to improve test efficiency. The fuzzing method proposed in this paper solved this problem by selecting appropriate test objects and formulating general fuzzing strategies.

Effectiveness: Experimental results proved the effectiveness of the proposed method. A corresponding fuzzing framework AAHF (standing for Android App HTTP/HTTPS Fuzzing) were implemented, and 10 popular Android applications were tested based on it. The test duration of each app was limited to 1-3 hours, and 4 kinds of problems, containing no responding, crash caused by JSON data, HTML content replacement and URL redirection, were discovered. Each tested application contained at least one of these problems. The results indicated that in addition to users’ private data leakage, incorrect network communication data also would bring security threats to Android applications.

The following content of this paper are organized as follows. Section II introduces the relevant research. Section III introduces the proposed network-based fuzzing method. The effectiveness of the method is evaluated based on the experiments in Section IV, and Section V discusses the limitations and future work.

# II. BACKGROUND
# A. NETWORK-BASED FUZZING ON ANDROID APPLICATIONS
Currently, fuzzing on Android applications’ network data is focused on searching for server-side security issues. The core idea of server-side fuzzing is to mutate the request packets sent by mobile applications, to exploit possible vulnerabilities on the server side. Zuo et al.  discovered authentication vulnerabilities existing on the server side by processing HTTP request data of mobile applications, using differential feature analysis to identify protocol domains, automatically replacing the domains and observing the server’s response. In their earlier research , a test framework named AUTOFORGE was proposed, which included API hooking, lightweight reverse engineering on protocol, request message forgery and other black box test techniques. AUTOFORGE tests whether the server contains enough checks to ensure the security of users’ accounts, by forging valid client HTTP request messages and sending them to the server. Ziqiang et al.  proposed an automation platform for mobile applications’ security detection, which used a fuzzing method based on HTTP protocol, to detect server-side security vulnerabilities.

Compared with the above research, we focus on client-side fuzzing targeted on Android applications, fuzz Android applications by mutating response packets returned by servers, to explore the impact and harm of various mutated network communication data on them.

One similar work is IOTFUZZER , which automatically generates protocol-aware fuzzing messages to IoT devices from IoT apps, tries to discover memory corruption in firmware images. Our test objects and methods are different.

1. For IOTFUZZER, it targets the protocols between IoT devices and IoT apps. The communication protocol changes with different IoT devices and IoT apps, therefore, it needs to analyze the app to find the fields before testing. For our method, as the format of the HTTP protocol is publicly known, we do not need to analyze apps. Although it will lead to insufficient targeting of our test cases when considering the possible encryption and confusion in apps, this greatly improves test efficiency and reduces test difficulty.

2. IoT apps have more specific functions, and the protocol is not as complicated as the HTTP protocol, so IOTFUZZER performs data variation by hooking the key APIs and changes their parameters. For HTTP, much code involved in network processing in apps make it difficult to locate key hooking objects, and we found that it was easier to capture network packages by means of a middleman agent.

Another similar work is JazzDroid , an automated Android gray-box fuzzer that injects into applications various environmental interference on the fly to detect issues. It contains a network issues injector interposes on the HTTP requests from apps and manipulates their responses to simulate network delay and connectivity. In contrast, we focus on the impact that incorrect response data can have on applications, not just including network delay and connectivity.

# B. NETWORK DATA ANALYSIS OF ANDROID APPLICATIONS
At present, researches on network data analysis of Android applications mainly focus on the following aspects: device information inference, application information inference, and privacy information leakage detection –, etc.