# Security design is very important. (SA)
Contrary to all others, one team formally considers security in this stage with a good degree of care. P-T5 indicated that his team considers the design stage as their first line of defense. Developers from his team follow software security best practices , e.g., they perform formal threat modelling to generate security requirements, focus on relevant threats, and inform subsequent SDLC stages. P-T5 explains the advantages of considering security from this early stage, “When we go to do a further security analysis, we have a lot more context in terms of what we’re thinking, and people aren’t running around sort of defending threats that aren’t there.”
# 4 Implementation stage
Most participants showed general awareness of security during this stage. However, many stated that they are not responsible for security and they are not required to secure their applications. In fact, some developers reported that their companies do not expect them to have any software security knowledge. Our inductive analysis revealed three themes regarding security prioritization in this stage.

# Security is a priority during implementation. (SA/SI)
All security adopters and two participants from the security inattentive group discussed the importance of security during the implementation stage. They discussed how the general company culture encourages following secure implementation best practices and using reliable tools. Security is considered a developer’s responsibility during implementation, and participants explained they are conscious about vulnerabilities introduced by errors when writing code.

# Developers’ awareness of security is expected when implementing. (SA/SI)
For those prioritizing security, the majority of security adopters and one participant from the security inattentive group are expected to stay up-to-date
on vulnerabilities, especially those reported in libraries or third-party code they use. The manner of information dissemination differs and corroborates previous research findings . Some have a structured approach, such as that described by P-T1, “We have a whole system. Whenever security vulnerability information comes from a third-party, [a special team follows] this process: they create an incident, so that whoever is using the third-party code gets alerted that, ‘okay, your code has security vulnerability’, and immediately you need to address it.” Others rely on general discussions between developers, e.g., when they read about a new vulnerability. Participants did not elaborate on if and how they assess the credibility and reliability of information sources. The source of information could have a considerable effect on security; previous research found that relying on informal programming forums might lead to insecure code . In Xiao et al.’s  study, developers reported taking the information source’s thoroughness and reputation into consideration to ensure trustworthiness.

# Security is not a priority during implementation. (SI)
On the other end of the security prioritization spectrum, developers from the security inattentive group prioritize functionality and coding standards over security. Their primary goal is to satisfy business requirements of building new applications or integrating new features into existing ones. Some developers also follow standards for code readability and efficiency. However, security is not typically considered a developer’s responsibility, to the extent that there are no consequences if a developer introduces a security vulnerability in their code. P-T7 explained, “If I write a bad code that, let’s say, introduced SQL injection, I can just [say] ‘well I didn’t know that this one introduces SQL injection’ or ‘I don’t even know what SQL injection is’. [...] I didn’t have to actually know about this stuff [and] nobody told me that I need to focus on this stuff.” This statement is particularly troubling given that P-T7 has security background, but feels powerless in changing the perceived state of affairs in his team.

Our analysis also revealed that some developers in the security inattentive group have incomplete mental models of security. This led to the following problematic manifestations, which could explain their poor security practices.

# Developers take security for granted. (SI)
We found, aligning with previous research , that developers fully trust existing frameworks with their applications’ security and thus take security for granted. Our study revealed that these teams do not consider security when adopting frameworks, and it is unclear if, and how, these frameworks’ security is ever tested. To partially address this issue, T4 built their own frameworks to handle common security features to relieve developers of the burden of security. This approach may improve security, however verifying frameworks’ security is an important, yet missing, preliminary step.

# Developers misuse frameworks. (SI)
Despite their extreme reliance on frameworks for security, developers in T10 do not always follow their recommended practices. For example, although P-T10 tries to follow them, other developers in his team do not; they occasionally overlook or work-around framework features. P-T10 explains, “I have expressed to [the team] why I am doing things the way I am, because it’s correct, it’s the right way to do it with this framework. They chose to do things a completely different way, it’s completely messed up the framework and their code. They don’t care, they just want something that they feel is right and you know whatever.” Such framework misuse may result in messy code and could lead to potential vulnerabilities . Although frameworks have shown security benefits , it is evident that the manner by which some teams are currently using and relying on them is problematic.

# Developers lack security knowledge. (SI)
Developers from the security inattentive group vary greatly in their security knowledge. Some have haphazard knowledge; they only know what they happen to hear or read about in the news. Others have formed their knowledge entirely from practical experience; they only know what they happen to come across in their work. Developers’ lack of software security knowledge could explain why some teams are reluctant to rely on developers for secure implementation. P-T7 said, “I think they kind of assume that if you’re a developer, you’re not necessarily responsible for the security of the system, and you [do] not necessarily have to have the knowledge to deal with it.” On the other hand, some developers have security background, but do not apply their knowledge in practice, as it is neither considered their responsibility nor a priority. P-T7 said, “I recently took an online course on web application security to refresh my knowledge on what were the common attack on web applications [...] So, I gained that theoretical aspect of it recently and play[ed] around with a bunch of tools, but in practice I didn’t actually use those tools to test my software to see if I can find any vulnerability in my own code because it’s not that much of a priority.”
# Developers perceive their security knowledge inaccurately. (SI)
We identified a mismatch between developers’ perception of their security knowledge and their actual knowledge. Some developers do not recognize their secure practices as such. When asked about secure coding methods, P-T6 said, “[The] one where we stop [cross-site scripting]. That’s the only one I remember I explicitly used. Maybe I used a couple of other things without knowing they were security stuff.” In some instances, our participants said they are not addressing security in any way. However, after probing and asking more specific questions, we identified security practices they perform which they did not relate to security. Furthermore, we found that some developers’ mental model of security revolves mainly around security functions, such as using the proper client-server communication protocol. However, conforming with previous research , it does not include software security. For example, P-T9 assumes that following requirements generated from the design stage guarantees security, saying “if you follow the requirements, the code is secure. They take those into consideration.” However, he mentioned that requirements do not always include security. In this case, and especially by describing requirements as a definite security guarantee, the developer may be referring to security functions (e.g., using passwords for authentication) that he would implement as identified by the requirements. However, the developer did not discuss vulnerabilities due to implementation mistakes that are not necessarily preventable by security requirements.