Android’s permission model allows MDM providers to share their VPN technologies with other apps by defining custom permissions. These are listed in Table 1. The requesting app must declare the associated custom permission on its manifest and the app providing the proprietary technology must be already installed on the device. In the case of Samsung’s KNOX-enabled devices, the app developer wishing to incorporate any KNOX feature in its app must first enroll on Samsung’s KNOX program and then request access to the proprietary SDK . As a result, Android VPN apps without KNOX support may operate incorrectly on many Samsung devices. The security guarantees that ap
# 3. DISCOVERING VPN APPS ON GOOGLE PLAY
This section describes our method for identifying and characterizing Android VPN-enabled apps on Google Play.

# 3 Detection Method
Identifying VPN-enabled apps on Google Play is not a trivial task. The list of permissions available on a given app’s Google Play profile does not necessarily contain the use of the VPN permission by the app. App developers can request the Android VPN permissions in their app AndroidManifest file in two different ways: they can request the VPN permission within the scope of the whole app or restrict its use to a specific activity or service using the &lt;activity&gt; and &lt;service&gt; tags respectively. This subtle difference has an impact on any method aiming to detect VPN-enabled apps: when a developer declares the permission within the &lt;service&gt; tag, the VPN permission does not show up in the list of Android permissions available on Google Play. Consequently, in order to correctly identify VPN-enabled apps at scale — either those using Android’s official permission or any of the custom VPN permissions listed in Table 1 — we must crawl Google Play to download each app’s executable and then decompile it to inspect their AndroidManifest file in detail.

Our method has allowed us to identify 283 free Android apps requesting the VPN permission in their AndroidManifest files. 153 of free VPN apps require the user to perform in-app purchases in order to use their online VPN services. We refer to such apps as “premium VPN apps” and they typically offer weekly, monthly, quarterly and yearly subscriptions. In the case of paid apps, we relied on information available on the app description as signals to identify potential paid VPN apps. This is the result of our inability to pay the fee for downloading the executables of each paid app listed on Google Play. This approach has allowed us to find 10 potential VPN paid apps. However, after paying their fee to download their executables, only one of them actually requested the VPN permission. Therefore, we decided to exclude paid VPN apps from this study.

To increase our app coverage and maximize the number of detected VPN apps, we implemented a Google Play crawler that uses two complementary seeds. First, we obtain the app ID (or package name) from the top 100 apps for four Google Play categories likely to contain VPN and MDM apps: tools, communication, business and productivity. Second, we leverage Google Play’s search feature to find apps containing VPN-related keywords like “vpn”, “virtual private network”, “security”, “censorship”, “anonymity” or “privacy” in their app description. Afterwards, our crawler fetches each app’s metadata and executables. Our crawler follows a breadth-first-search approach for any other app considered as “similar” by Google Play and for other apps.

# 3 The Rise of VPN Apps
This section studies the presence of VPN-enabled apps available for download on Google Play over time. Given that Google Play does not report the actual release date of the apps but their last update, we use the date of their first comment as a proxy for their release date. For 9 apps without any user reviews as of this writing, we determine the approximate release date by their last update.

# 3 VPN App Classification
VPN apps can provide a wide range of services to the user. Unfortunately, Google Play’s categories (e.g., tools and games) are too broad to capture the actual purpose of the app. In order to identify their actual intended functionality, two co-authors inspected and labeled each VPN app manually according to their Google Play app description into 9 categories that we list in Table 3. In case that an app advertises more than one functionality, we choose the most relevant one. We found no disagreements in the labeling process.

67% of Android VPN apps claim to provide traditional VPN services (labeled here as “VPN clients”) including enhanced security and privacy, anti-surveillance or tunnels to access geo-filtered or censored content. Note that we consider Tor clients (e.g., Orbot , Globus VPN  and TorGuard VPN client ) as a separate category. The second most common category is enterprise MDM solutions (10% of apps) followed by traffic optimization tools (e.g., DashNet , 4% of apps) and communication tools (3% of apps) for tethering or for creating mesh networks and VLANs (typically for online gaming ).

Antivirus software apps (Qihoo 360 , Dr.Web Security Space  and TrendMicro’s Mobile Security & Antivirus ) may also leverage the VPN permission to perform traffic analysis (e.g., malware detection), to block malicious traffic and to securely forward user’s traffic through trusted servers when users connect through insecure or questionable WiFi networks. Other uses of the VPN permission are traffic filters and traffic loggers (e.g., NoRoot Firewall ) and even apps for securing online payments (e.g., Fast Secure Payment ).

# 4. STATIC ANALYSIS
In this section, we analyze the source code for each VPN Android app using static analysis. In particular, we report on applications requesting sensitive permission analysis, the presence of tracking libraries in app’s decompiled source code and the presence of malware activity according to the online antivirus aggregator, VirusTotal3.

# 4 Permission Analysis
We investigate how VPN-enabled apps request other Android permissions to access sensitive system resources. We exclude network-related permissions like Internet access which are inherent to any VPN client.

There are Android permissions that are more common on VPN apps than in other app categories. For instance, antivirus and MDM solutions request READ_LOGS permission to inspect other apps’ activities . However, we observe that standard VPN clients like DroidVPN  and tigerVPN  also request permission to read system logs. Android documentation  flags this permission as highly sensitive as any app developer may carelessly misuse Android’s logging capabilities and (unintentionally) expose personal information (including passwords) to any other apps requesting it. Similarly, antivirus apps request READ_EXTERNAL_STORAGE permission to check the stored files for possible virus and malware activity.

Many other permissions listed in Figure 2 may appear unusual requirements for VPN apps. However, VPN apps may provide additional and richer features to their users beyond a typical VPN tunnel. For each case, we manually checked the legitimacy of these requests by inspecting the API calls executed by the apps and checking the description for related functionalities without finding any evidence for deliberate abuse of granted permissions. For instance, we found that antivirus apps as well as spyware VPN apps (which we further investigate in Section 4) request the READ_SMS permission to read text messages and, in the case of antivirus apps, to scan them for possible malware presence. Similarly, apps requesting READ_CONTACTS incorporate functions in
# 4 Tracking Libraries in VPN Apps
With the help of ApkTool, we examine the presence of embedded third-party libraries (in the form of external jar files) for analytics, tracking or advertising purposes in the source code of each VPN-enabled app. In order to identify which libraries are associated with tracking services, we use the manually curated list of 127 tracking and advertising libraries compiled by Seneviratne et al. . Therefore, we consider our results as a lower bound of third-party tracking libraries presence in VPN apps.

# 4 Malware Analysis
Malware components may be designed to circumvent a specific antivirus (AV) tool . As a result, it is imperative to rely upon multiple AV scanners and datasets to effectively identify the presence of malware on mobile VPN apps. We leverage the capabilities offered by VirusTotal’s public API to automatize our malware detection process. VirusTotal is an online solution which aggregates the scanning capabilities provided by more than 100 AV tools, scanning engines and datasets. It has been commonly used in the academic literature to detect malicious apps, executables, software and domains.

After completing the scanning process for a given app, VirusTotal generates a report that indicates which of the participating AV scanning tools detected any malware activity in the app and the corresponding malware signature (if any).