# SO{U}RCERER : Developer-Driven Security Testing Framework for Android Apps
Muhammad Sajidur Rahman, Blas Kojusner, Ryon Kennedy, Prerit Pathak, Lin Qi, and Byron Williams
University of Florida, Florida Institute for Cybersecurity Research, FL, USA.

Email: {rahmanm, bkojusner, ryonkennedy, preritpathak, linqi, byron}@ufl.edu
# Abstract
Frequently advised secure development recommendations often fall short in practice for app developers. Tool-driven (e.g., using static analysis tools) approaches lack context and domain-specific requirements of an app being tested. App developers struggle to find an actionable and prioritized list of vulnerabilities from a laundry list of security warnings reported by static analysis tools. Process-driven (e.g., applying threat modeling methods) approaches require substantial resources (e.g., security testing team, budget) and security expertise, which small to medium-scale app dev teams could barely afford. To help app developers securing their apps, we propose SO{U}RCERER1, a guiding framework for Android app developers for security testing. SO{U}RCERER guides developers to identify domain-specific assets of an app, detect and prioritize vulnerabilities, and mitigate those vulnerabilities based on secure development guidelines. We evaluated SO{U}RCERER with a case study on analyzing and testing 36 Android mobile money apps. We found that by following activities guided by SO{U}RCERER, an app developer could get a concise and actionable list of vulnerabilities (24-61% fewer security warnings produced by SO{U}RCERER than a standalone static analyzer), directly affecting a mobile money app’s critical assets, and devise a mitigation plan. Our findings from this preliminary study indicate a viable approach to Android app security testing without being overwhelmingly complex for app developers.

# I. INTRODUCTION
Mobile apps usage is increasing, and security vulnerabilities are corroding apps. In a 2021 mobile security report, Synopsis reported that out of the 3335 top mobile apps analyzed from 18 of the most popular app categories during the Covid-19 pandemic, 63% of apps contained known security vulnerabilities . While apps ridden with security vulnerabilities are nothing new, one interesting observation is that 94% of these vulnerabilities have publicly-known fixes available, and 73% of the discovered vulnerabilities were first disclosed more than two years ago. As the onus of securing mobile apps is often placed on app developers, one cannot ignore asking: why do app developers fail to adopt security tools and guidelines when security practitioners and researchers share their decades of experience dealing with common vulnerabilities?
The well-known secure development recipes frequently advertised to developers can be broadly categorized as either tool-driven or process-driven. Advocates for tool-driven security recommend that app developers use static analysis tools to detect and fix vulnerabilities extensively. However, developers face challenges in understanding, contextualizing, and prioritizing security warnings from static analysis tools because of high false-positive rates, indecipherable warnings, and context-insensitive reporting , . On the other hand, while process-driven threat modeling techniques (e.g., STRIDE, Attack Trees, Top-k lists of vulnerabilities) have been proposed and practiced in the industry, various factors like time, budget, dedicated security teams/experts, and a steep learning curve make threat modeling challenging and unadoptable for solo app developers or small teams that do not have structured organizational capacity . Moreover, no tailored threat modeling process focusing on secure mobile app development is currently available. While app developers are aware of the mobile security knowledge base (e.g., OWASP Mobile Security Project), there is no straightforward recipe for app developers to jump-start the threat modeling process for security testing. Research has shown that solo and small-scale app developers want support to make the ‘right’ choices regarding thinking and implementing security controls . We argue that ignoring the need for small scale app developers has already resulted in an app-insecurity problem, including client-side insecure TLS certificate validation (e.g., ), code injection through insecure Webview implementations (e.g., ), and privilege escalation attacks using third-party libraries to name a few of the commonly recurring app vulnerabilities.

In an attempt to help app developers contextualize functional requirements of their apps during security testing, we propose SO{U}RCERER, a lightweight, developer-driven guiding framework for Android app security testing. SO{U}RCERER provides an easy-to-follow recipe for app developers to identify critical assets of an app, detect and map prioritized vulnerabilities affecting assets, and mitigate prioritized vulnerabilities based on secure development guidelines. We made the following contributions in this paper:
1. We situate the SO{U}RCERER framework by aligning its threat model and assets under the scope of Android app development (§II). We define three phases of activity for an app developer to conduct principled security testing.

2. We define a taxonomy of asset families for Android app threat modeling, which can be used to identify assets for apps operating in diverse business domains (§II-A2).

# 3.

We provide a walkthrough of the framework by providing a case study and detailing the walkthrough of applying the framework to test 36 Android mobile money apps (§III). We present results (§IV) and discuss (§V) potential application areas of SO{U}RCERER in app security testing and developer security education.

# II. SO{U}RCERER FRAMEWORK
SO{U}RCERER is a guiding framework built on the principle of identifying critical assets to prioritize and mitigate vulnerabilities during app security testing. As app development is iterative in nature with shorter release cycles, developers face challenges in testing apps to address devices and OS version compatibility, accessibility, and UX, with little to no consideration for security testing , . This gap in security testing motivates us to introduce SO{U}RCERER to guide Android app security testing.

In §II-A, we introduce the key concepts of SO{U}RCERER framework and in §II-B, we describe the phases of SO{U}RCERER to conduct Android app threat modeling.

# A. Definition of Key Concepts
# 1) Threat Model for Android App Security:
Recently, Mayrhofer et al.  proposed a multi-layered threat model for Android OS, which we adopt to discuss an adversary’s capabilities under the scope of developing a secure Android app. We assume that the adversary can sniff network data packets sent/received by an app, access the platform-provided API stack through the app, run code for harvesting sensitive data, and transfer sensitive data to adversary-controlled locations without user notice. The adversary does not gain physical access to an end-user device, but they can install an app in an adversary-controlled device to reverse-engineer the app. We assume the end-user trusts their device and the underlying Android OS. For the scope of this paper, we assume the following threats that an adversary can exploit because of the insecure app development process: (i) untrusted code execution on the device, (ii) untrusted content processed and stored by the device, and (iii) untrusted network communication.

# 2) Assets for Android Devices:
In security threat modeling, an asset refers to any piece of information, device, or component of an organization’s systems deemed valuable – often because it holds sensitive data or can be used to access such information , . An asset container refers to the physical or logical location where that information is kept. An adversary seeks to access or impact assets through vulnerabilities.

Considering assets as sensitive information, Android devices hold a multitude of sensitive data (i.e., assets), which include but are not limited to personally identifiable information (PII), business data or corporate intellectual data, authentication data, device identification data (e.g., IMEI, SIM serial no.), application generated data (e.g., cache data, app logs), usage history data (e.g., SMS/call log, browsing history), sensor data generated by tailored hardware (e.g., camera, GPS, gyroscope), user-generated data (e.g., keystrokes, no. of steps taken by user).

After reviewing threat modeling and Android app analysis literature, we propose the following asset families for Android apps. We assume that members of asset families are not exclusive, and there could be overlap in membership among asset families.

- User Assets: refer to any set of information that can be used to uniquely identify a device’s user, in the form of identifiers (e.g., name, address, email, social security number (SSN), phone number, date of birth, device identifiers) or quasi-identifiers (e.g., frequently visited locations, spending habit, call logs). Compromising user assets could result in either profiling or tracking users by an adversary.

- Application Assets: refer to the core building blocks of an app to provide advertised functionalities (e.g., money transfer, fitness tracker) with the assumption of keeping user assets secured. Common examples of application assets include, but are not limited to, cryptographic keys, API keys/tokens to connect web/cloud services, proprietary algorithm/information. Compromised application assets can result in the loss of intellectual property, data breach, and loss of business reputation.

- Platform Assets: refer to those core functionalities served by the host operating system. For example, in Android, platform assets include, but not limited to, system APIs to perform sensitive operations, e.g., accessing local media storage/files (e.g., READ_EXTERNAL_STORAGE, READ_SMS, READ_CALL_LOGS), accessing rich sensors (e.g., CAMERA, ACCESS_FINE_LOCATION) for customized end-user services.