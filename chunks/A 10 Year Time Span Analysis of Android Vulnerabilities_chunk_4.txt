As stated by Thomas et al. (2015), Google’s line of Nexus devices have the reputation of being the most updated and supported. Their reputation is primarily due to
# 14
The vendor’s directly supporting their software on their selected hardware and adopting a long-term supported device list. Vendors such as BlackBerry and LG have chosen their own of band patch cycle, often beating Google at patching monthly vulnerabilities. It is stated by BlackBerry Limited (2016) that BlackBerry maintains a group of security experts to patch and release updates to their Android based handhelds. The limited number of devices that keep current with security updates leaves organizations with the requirement of selecting only homogeneous Android based mobile devices to be used in their network environment, limiting the availability of a bring your own device (BYOD) policy.

Instead of selecting Android based devices that are regularly maintained by the hardware vendor, some organizations elect to deploy a mobile device manager (MDM) solution as part of their BYOD solution. A framework developed by Zahadat (2016) inserts patch management into policy to be adopted by an organization. These MDM platforms allow patch management to be supported by the organization, therefore, enabling a timely patch management strategy. Additionally, recent research has led to the development of custom patch management solutions.

Previously, root level access was required to deploy patches to devices. As seen in the Linux architecture that Android is based on, root allows administrative privileges to the underlying OS. Vendors maintain this level of administrative access to their devices; however, custom solutions may not have the required privileged-level access. Not all devices have the option of obtaining root access, and the devices that do usually result in an un-warrantied status after root is achieved. One solution developed by the research of Mulliner et al. (2013), PatchDroid, allows for patching of Android devices without the
requirement for root access. The technology utilized allows for the injection of code to mitigate known vulnerabilities without the support of the OS or hardware vendor. Direct patching of the underlying OS is not required, as hotfixes are available at the application level.

# 15
The next aspect of security-related issues with the Android OS is with applications. As cited by Zhou, Wang, Zhou, and Jiang (2012), the Google Play Marketplace had surpassed 200,000 apps by 2011. Out of a sampling of apps, the custom solution, DroidRanger, detected approximately 2% of apps contained some form of malware infection. It is also cited that alternative app stores, such as one provided by Amazon, had a much higher rate of infection by malicious software, potentially due to less stringent controls . Furthering the issue, once these malicious packages are reported or detected at the marketplace level, no restrictions are preventing other open marketplaces from distributing the infected applications. Losses from this malicious software epidemic can result in various security issues, from breaches in data privacy to remote control of the device.

Unfortunately, the implementation of encryption at the app level has the capability of detection prevention. As stated by Suarez-Tangil, Tapiador, and Peris-Lopez (2014), utilizing steganography, apps can hide their malicious components under a hardened layer of encryption. Code obfuscated by encryption can prevent custom tools from detecting the malware running on a device resident in memory or prior to being uploaded to an app store. Additionally, it is stated that apps may not carry a payload before they are downloaded from an app store but, in fact, have the ability to contact a remote server and hook into a remote malicious payload that executes upon or after.

# 16
launch (Suarez-Tangil et al., 2014). Other methods can be implemented to detect these types of hooking attacks, such as analyzing the runtime.

Methods to identify and prevent malicious apps have been previously limited to blacklisting, as stated by Sato et al. (2013). Their research led to the development of a new concept of detection that took the form of DroidMat. DroidMat is capable of analyzing API calls through manifest files with a sufficient level of success . New methods of detection need to be continually pursued in an effort to stay ahead of the increasingly advanced malware.

Another conventional detection technique is utilizing anomaly-based detection. Banuri et al. (2012) proposes an open architecture application which uses a framework to augment anomaly detection. Similar to other models, this utility analyzes the application’s runtime to define the potential risk of a running app. Additionally, the utility reviews the access permission requested and utilized by the apps being analyzed to reduce the number of false positives.

It is suggested by Jeon, Micinski, Vaughan, Fogel, Reddy, Foster, and Millstein (2012), that enabling fine-grained permissions within the Android OS may prevent some forms of malicious attack. It is observed that many apps do not elect to maintain the standard procedure of least privilege. The malicious apps can take advantage of the unaware user by requesting access to unneeded resources. The solution developed is known as RefineDroid, which can create the new level of granularity without requiring root access or recompile of code . Enabling fine-grained permissions within the Android OS may be capable of preventing or blocking the aforementioned hooking techniques of malicious apps. Apart from these custom approaches, vendors
# 17
such as Samsung and BlackBerry have taken steps to further secure the Android operating system with their own security-based customizations.

According to BlackBerry Limited (2016) and Samsung Research America (2016), features enabled by the two vendors, Samsung and BlackBerry, take additional steps to secure the underlying OS. Each has marketed their solutions under the brands Knox and DTEK, respectively. The standard approach utilized by both vendors leverages certificate-based authentication and verification. The architecture allows hardcoded certificates that are device unique to be deployed during the manufacturing process. These certificates enable app verification, protected bootloaders, and trusted platforms to be restricted to the devices (BlackBerry Limited, 2016; Samsung Research America, 2016).

The third and last issue to be discussed is connectivity options available to mobile devices. As stated by Wibowo and Ali (2016), the accessibility of Android allows users to access many productivity features including online services, file sharing, and peripheral connectivity. The three most common forms of wireless communication include WiFi, cellular, and Bluetooth connectivity options. The productivity options are obvious, but WiFi and cellular connectivity allow vendors to push and provide downloadable security patches and hotfixes as well as updates to applications. The downfall to achieving this accessibility is potential attack vectors introduced by their inherent interoperability. The Cabir malware is stated to have been one of the earliest worms to propagate between mobile devices and exploit a vulnerability in Bluetooth technology (Wibowo & Ali, 2016). Vulnerabilities in text and multimedia-based messaging is, achievable through cellular communications, is also cited as having known.

Reproduced with permission of copyright owner. Further reproduction prohibited without permission..