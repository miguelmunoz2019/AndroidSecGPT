Ref.  developed a software framework that protects application security by rewriting the byte-code of the application according to the user's requirements. The system applies the static analysis technique and finds the methods that need to be changed according to the data that are supplied by the user. The resulting methods are replaced with the ones that were modified, and these modified methods are called. The study was conducted on 30 random applications that were chosen from 100 popular applications in the Android Market. The system intercepts the basic methods, such as Math.sqrt, url.OpenStream, and StringBuilder.append, and replaces them with customized methods. In addition, the authors added logging capability to the system and instantly tested the methods to see whether they were really called or not. According to their results, there were no issues during the application rewriting process, and the applications ran without any problems. However, the user must present the full list of methods that will be modified, including their return types, their parameters and the packages to which they belong, before the rewriting process. Otherwise, the system fails. Furthermore, the user should specify the behavior that he/she wants from the application and needs to be created by writing Java code. Considering these features, the system is unusable for normal users who do not have any technical knowledge about which methods cause security risks and need to be modified. The expected behavior is added by writing code, which means that this is not a good approach because it expects normal users to write code.

In , researchers developed a tool that is called Aurasium and aims to protect the privacy and security of Android devices. The developed system provides user-centric solutions. The tool has two components. The first component is the mechanism that adds management code and repacks the application. The second component communicates with the operating system, traces the applications and intercepts them. The tracing mechanism warns the user when a method is called that will compromise the user's security and privacy. It also asks the user whether it should prevent these method calls and saves the user's answer for future operations.

Ref.  developed an analysis tool that is called ScanDroid and is based on WALA, an open-source Java code analysis tool. The developed tool traces the data flow in applications and takes security measures. In addition, the tool reveals whether it is safe to run the applications with the permissions that they include. However, the tool only works on the provided byte-code and does not have the ability to unpack the “.apk” files. Furthermore, it has not been tested for Android applications in any official and unofficial Android Market.

# A. Application/Service-Based Solutions
We categorize the application/service-based solutions into two groups. The first group of solutions is installed on smart devices and examines the system as a background process, or this group is installed on desktop computers, and the analysis is performed either manually or through the use of an application. Mobile anti-virus software and data analysis tools are included in this group. The second group of solutions performs a security check and analysis in the cloud and provides Security as a Service (SaaS). Data are collected from devices, sent to the cloud, and analyzed on remote servers, and security reports are produced.

Ref.  developed a software framework to protect Android-based mobile devices from malicious applications. The developed software is installed on the devices, continuously monitors mobile devices, and classifies the applications as being malicious or harmless by employing Machine Learning techniques. Furthermore, the software gathers real-time data that are related to CPU usage, the sent Wi-Fi data amount, processes that are running in the background, and battery status. The gathered data are analyzed; threat assessment is completed; and the software presents a warning dialog to the user. In addition to the warning, options such as removing the application, stopping the application from running in the background, and locking the device are presented. In this study, the developed software must be installed on user devices. It also needs to run as a background process and gather data to perform an analysis. The data analysis process affects the user experience negatively. It exhausts the system and excessively consumes system resources due to the training period that is necessary for its learning process.

Ref.  designed a system called AppInspector that will examine applications that are submitted to popular application stores, will identify applications that have malicious behavior and will produce easy to understand reports that present users with potential privacy risks. This study differs from other studies in terms of producing security risk reports. However, the authors only drew a high level picture of their design, and the system was not developed.

In , researchers gathered 1260 malicious applications from Android Markets for a one-year period and analyzed them in a systematic way. The analysis was performed manually, and no software was developed. They classified the malicious applications into 3 main groups. Malicious fake applications that modify the popular applications, embed malicious code fragments and repack them form the first group. A total of 86% of malicious applications apply these processes. The second group of malicious applications works on the kernel level and embeds malicious code by exploiting the Android Platform's security holes. A total of 36% of malicious applications exploit these security holes. The third group of applications turns the mobile devices into bots and has command and control centers on remote servers. A total of 90% of malicious applications have this feature. Researchers published their results and the success rates of popular anti-virus applications, such as AVG, Trend Micro, and Norton anti-virus software. As a conclusion, the authors showed that these anti-virus applications had
Copyright © 2014 MECS I.J. Computer Network and Information Security, 2014, 12, 9-20
# A Comprehensive Analysis of Android Security and Proposed Solutions
a success rate of 79% in the best-case scenarios and 20% in the worst-case scenario. This study is a comprehensive study that is based on data gathering and analysis. The data that is gathered in this study are a result of one year of hard work and are included in the largest dataset (so far) that is dedicated to researchers. However, it is only an informative study that does not provide any security solutions.

Anti-virus software applications scan, slow, exhaust and overload the operating systems. Moreover, different anti-virus software applications use different techniques to identify malicious applications that produce different scanning results.  proposed the idea of “Anti-virus as a Service” to reduce the overload on the operating systems and to eliminate the differences between anti-virus applications. According to their concept of security service, files or applications that are needed to be scanned are sent to the cloud, and different anti-virus applications on different virtual machines inspect these files/applications in parallel and produce reports for users. The results of anti-virus applications are averaged, and a success rate is produced. Their results showed that the success rate was higher with this system than it was when a single anti-virus application was run, and overload on the operating system was reduced. However, running more than one anti-virus software causes conflicts, licensing problems and financial problems. In addition to these issues, companies generally settle with only one anti-virus company because company policy limits the usage of the proposed system. Although this study was conducted on desktop-based computers, it provides an idea of how to apply this type of solution to mobile platforms.

Ref.  developed a software service that is called Paranoid Droid and moves the security control mechanism to the cloud. The system saves the process fingerprints of mobile devices and encrypts and sends them to virtual machines on a remote computer. Then, they are subjected to parallel multi security checks. The developed prototype system has 2 types of security control mechanisms. In the first type, the system performs a dynamic code analysis that checks for code injection and buffer overflow. The second mechanism includes open-source anti-virus software that scans the files and performs a security check on them. Although the developed system provides a certain level of security, overload that is caused by the process of sending the fingerprints to remote machines is high and reduces the battery by 30%. If 3G connection is chosen when sending the data to the remote server, this will increase the cost, and the user will need to wait for a Wi-Fi connection to be active.

In , the authors developed a reputation-based security mechanism. A reputation score that was calculated in the cloud is presented before the user installs the application. If the reputation score is lower, the user is warned; otherwise, the application is installed. Reputation scores are based on the feedback of users who previously installed the application on their devices. The system that runs on the cloud that calculates the reputation score that is gathered from this feedback.