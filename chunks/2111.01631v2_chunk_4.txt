# VII. LIMITATIONS AND FUTURE WORK
Due to obfuscated source code, participants from the case study had to use their subjective assessment to choose whether a particular vulnerability would be critical or not. For example, one-third of the apps used weak hash algorithms, but participants could not confirm whether the hash algorithms were part of an encryption mechanism or something benign. Also, the smaller sample size of human evaluators limited our ability to generalize our findings. For example, the average time reported by evaluators to complete SO{U}RCERER activities could be biased, as the participants had prior knowledge in reverse engineering, which may not be common to know for a general app developer. In an ideal case, an app developer might take more than an hour to complete the activities. Though we believe it is essential, we did not focus on improving vulnerability verification through taint analysis except for leveraging the existing vulnerability benchmark available in the literature (see Phase-2 from § III). Relying solely on manual inspection could bias the vulnerability verification results found during the case study. During the reconciliation of security reports from multiple static analysis tools, the participants might disregard valid vulnerabilities due to applying a majority-voting heuristic, which could affect the results to be generalized. Besides, the observed results are based on a limited set of static analysis tools, and hence the observations regarding open-source static analysis tools may fall short in generalization.

In response to these limitations, we point out the fact that our work’s primary focus was not to perform yet another app analysis to find vulnerabilities. Instead, we proposed a guiding framework that could help app developers have a reference framework for threat modeling and security testing with a minimal learning curve and less friction to their regular development activity. Additionally, although we present a case study of SO{U}RCERER on fintech apps, this framework can be readily repurposed to analyze Android apps from any business domain and apps from other smartphones OS (e.g., iOS).

The work-in-progress consists of automating the manual steps (e.g., asset identification, vulnerability verification) and implementing a standard and bespoke tool for app developers to conduct the activities intuitively with less manual effort. Future work will consist of conducting a large-scale study by applying this framework to analyze diverse categories of mobile apps and developer study to measure the effectiveness and usability of SO{U}RCERER framework, comparing other off-the-shelf security tools.

# VIII. CONCLUSION
In this paper, we present SO{U}RCERER as a guiding framework for Android app developers to conduct security testing. The framework consists of three phases: identifying assets, creating vulnerability-to-assert mapping, and mitigating identified vulnerabilities. We conducted a case study of evaluating SO{U}RCERER framework on 36 financial apps with three participants. Our initial findings showed that SO{U}RCERER could help app developers identify a concise and actionable list of vulnerabilities that could affect an app’s critical assets and devise a mitigation plan. We also found that study participants could complete the activities within a reasonable time frame. Our findings from this preliminary study indicate SO{U}RCERER being a viable approach to Android app security testing without being overwhelmingly complex for app developers..