# A study of run-time behavioral evolution of benign versus malicious apps in android
Haipeng Cai*, Xiaoqin Fu, Abdelwahab Hamou-Lhadj
a Washington State University, United States
b Concordia University, Canada
# Keywords:
Android apps, Security, Execution, Evolution, Longitudinal study
# Abstract
Context: The constant evolution of the Android platform and its applications have imposed significant challenges both to understanding and securing the Android ecosystem. Yet, despite the growing body of relevant research, it remains unclear how Android apps evolve in terms of their run-time behaviors in ways that impede our gaining consistent empirical knowledge about the workings of the ecosystem and developing effective technical solutions to defending it against security threats. Intuitively, an essential step towards addressing these challenges is to first understand the evolution itself. Among others, one avenue to examining a program’s run-time behavior is to dissect the program’s execution in terms of its syntactic and semantic structure.

Objective: In this paper, we study how benign Android apps execute differently from malware over time, in terms of their execution structures measured by the distribution and interaction among functionality scopes, app components, and callbacks. In doing so, we attempt to reveal how relevant app execution structure is to app security orientation (i.e., benign or malicious).

Method: By tracing the method calls and inter-component communications (ICCs) of 15,451 benign apps and 15,183 malware developed during eight years (2010–2017), we systematically characterized the execution structure of malware versus benign apps and revealed similarities and disparities between them that are not previously known.

Results: Our results show, among other findings, that (1) despite their similarity in execution distribution over functionality scopes, malware accessed framework functionalities mainly through third-party libraries, while benign apps were dominated by calls within the framework; (2) use of Activity component had been rising in malware while benign apps saw continuous drop in such uses; (3) malware invoked significantly more Services but less Content Providers than benign apps during the evolution of both groups; (4) malware carried ICC data significantly less often via standard data fields than benign apps, albeit both groups did not carry any data in most ICCs; and (5) newer malware tended to have more even distribution of callbacks among event-handler categories, while the distribution remained constant in benign apps over time.

Conclusion: We discussed how these findings inform understanding app behaviors, optimizing static and dynamic code analysis of Android apps, and developing sustainable app security defense solutions.

# 1. Introduction
Android as the dominant mobile operating system continues to gain in its momentum both on the traditional smart device market  and beyond . Accompanying this trend is the unceasing surge of mobile malware, a market that is also predominated by Android . Numerous defense solutions have been developed for securing the Android ecosystem , yet many of them quickly became outdated due to the fast evolution of both the Android platform and its user applications (known as apps), according to recent studies of our own [6–8] and others.

A peculiar evidence of Android evolution perplexing security defense is the relatively short-span capability of learning-based classification techniques [10–14]. Typically these techniques work by extracting certain sets of features from samples of benign and malicious apps based on, for instance, how apps use permissions [15–17] and/or APIs [18–23]. A classifier can be then trained on these samples to classify unknown apps. The evolution of Android itself and that of app development paradigms, however, may largely impede or even render almost unusable the classifier in identifying new samples . Note that retraining may not always be a solution there since new samples may not be as soon available as needed (e.g., for recognizing zero-day malware).

https://doi.org/10/j.infsof
Received 11 August 2019; Received in revised form 1 January 2020; Accepted 21 February 2020; Available online 22 February 2020
0950-5849/© 2020 Elsevier B.V. All rights reserved.

# H. Cai, X. Fu and A. Hamou-Lhadj
# Information and Software Technology 122 (2020) 106291
A state-of-the-art learning-based app classifier, which focused on long-span classification, achieved highly competitive performance (over 96% accuracy) only for one year . Its classification accuracy degenerated to merely a random prediction (50%) when working on apps over two years newer than training samples . Since feature engineering is a key to learning-based app classification, knowing how benign and malicious apps evolve would inform design of security solutions for Android that works effectively for a longer span. For instance, the study on the evolution of run-time behavioral differences between benign apps and malware may reveal app characteristics that can consistently separate these two groups over time; metrics of such characteristics can then be used as features for training a machine learning classifier to develop a dynamic malware detector that sustains its classification performance for a longer time than would a classifier built on features that differentiate the two app groups for a short period of time (e.g., only differentiating malware from benign apps developed in a particular year).

The constant evolution of Android also poses significant challenges for app development and testing. The Android platform evolves to harness the full potential of new-generation hardware capabilities of the host device, while apps evolve to accommodate the platform evolution. This justifiable symbiosis has resulted in fragmentation and various other complicated app/device compatibility issues [25–29] which have become immediate barriers for app development, understanding, and testing. Developing well-informed app development and testing strategies would also require an understanding of the evolution dynamics of benign apps and malware (part of the Android ecosystem). For instance, leveraging the behavioral differences between benign apps and malware in terms of code-level execution structures, especially the evolutionary patterns of the differences, would facilitate more precise detection and even repair of run-time incompatibilities in Android apps . For example, since many of these compatibility issues are closely relevant to callbacks, ICCs, and other APIs, patterns in the use of these APIs in incompatible apps may be used for incompatibility detection. Thus, the differences between malware and benign apps in the use of these APIs, as revealed from the evolution dynamics between these two app groups, would help develop detection techniques that are able to pinpoint compatibility issues differently in benign apps from those in malware, hence to achieve higher detection precision.

The need for those evolution-wise understandings has been recognized in prior works, with varying focuses on the particular aspect of the evolution dynamics (e.g., permission  and API ). Researchers also have studied the evolution of Android apps in terms of antipatterns in their code to assess app quality changes over time. These prior studies exclusively target a static characterization by examining the code or assets in app packages (i.e., APKs), not concerning the actual run-time behaviors of these apps. Their results, with respect to all possible app executions, can be overly conservative hence potentially highly imprecise. Results based on static code analysis may further suffer unsoundness due to common code traits in apps that impede the analysis (e.g., obfuscation and dynamic language constructs) . Also, previous evolution studies for Android were conducted either on a few samples only (a few hundreds) while focusing on the evolution of particular apps (i.e., the multiple versions of an app) without differentiating benign and malicious apps [33–35] or on benign apps  or malware only . Most of these studies looked at the high-level external behaviors (e.g., data leaks, permission uses, network traffic, etc.) , instead of looking into the internal code structure from a software engineering perspective, and/or spanned a relatively short period of time (e.g., one year only ).

As it stands, it remains unclear how Android apps evolve in their dynamic behaviors as a population over a long period of time. In particular, understanding how malware evolves differently from benign apps is essential for long-term security defense of the Android ecosystem (e.g., for developing a long-span, sustainable malware detector ). Our recent effort on evaluating the sustainability (i.e., the ability to sustain high accuracy) of state-of-the-art malware detectors [6–8] preliminarily showed that more sustainable approaches tended to have used features that differentiated benign and malicious apps more resiliently against the evolution of both groups. Yet, a principled discovery of such features has yet to be explored.