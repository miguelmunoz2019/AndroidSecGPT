All of our users understood the new Android permission groups. We believe that recent news such as “97% of mobile malware is on Android” from F-Secure, a reputable mobile security specialist , and Snowden revelation in 2013 raised security and privacy awareness. In fact, in both our studies, participants were extremely apprehensive about sharing their contact information; providing access to messages and calls information; or reading their profile and user account information.

On the other hand, we found that users were willing to provide their location for rewards (e.g., Verizon’s phone tracking campaign ) or application functionality and also give applications’ access to the Internet. There is a clear change in privacy concerns in recent years, as it is easier to share data with others, especially on Facebook . However, an open question remains whether users’ willingness to provide their location and Internet access to applications is in itself a privacy concern. We believe that the popularity of location-aware applications and the shift to cloud-based services are key to this change.

Due to Android’s security design, an application cannot access device data unless the user explicitly launches the application. Therefore, it makes sense to postpone any mobile security and privacy screening to immediately after installation, not before; and only notify the user if there is cause for concern. In comparison, iOS users can install an application without notification of any required permissions. Instead, when they launch an application for the first time, they need to grant or deny access to each of the permissions requested on first use. Unfortunately on Android there is no similar permission management. It is all or nothing.

Moreover, there is also an ongoing debate regarding the utility of permissions for security and privacy protection , given that users do not fully understand them . Recently, the extensive list of possible Android permissions (≈130 ) was restructured to a simpler set of permissions groups, together with a brief summary regarding the different kinds of data an application will have access to . However, users must still review the list of permissions every time they install an application or update an application whose permissions have changed. This is not the primary task of the user, and consequently, users have adopted the routine of pressing the “install” button too quickly, dismissing the permissions list before they can read it  so they can continue with the primary task of installing the app.

We argue that the fact that users need to acknowledge a list of permissions immediately before installation of an application is disruptive. It is a barrier to the user objective of installing an application. It has been shown that only half of the time are users able to remember what a permission does . Securacy makes permission management a task that is potentially only performed once, set as a user preference, and only brings permissions to the attention of the user when an application requests access to his personal data. This approach should reduce permission recall effort (remember that our participants could only recall approximately three permissions from memory) and permission nuisance, as reported by Kelley et al. . After all, why does an application need to request permission to vibrate the phone ?
Surprisingly, we observed that 70 out of the 218 participants did not activate any of the permission concerns. Without personal permission concerns, Securacy would not notify the user, but would still display application permission usage, server locations and security, and allow the user to rate the applications. Due to participant anonymity we were unable to discuss this with them further, so we can only speculate that their motivation was interest in those additional features or simply idle curiosity.

# 5 Security Supervision
Similar to Felt et al. and Yan et al. , only a minority of participants in both studies (20% in Study 1 and 15% in Study 2) rated applications. Our participants largely rely on the feedback
and ratings of others. Over the six months, we received 406 ratings from 219 distinct applications, covering a very small fraction of the available applications on the market. Moreover, given a 5% chance that a participant will rate one application, our findings suggest that we would need a larger number of participants (e.g., 20,000) to rate a thousand applications. Securacy needs a much larger install base to cover majority of the applications available on the market.

With WisCom  and by crawling application metadata (e.g., user ratings, written reviews) from the Google App Store, researchers identified three factors on how users rate and review applications: attractiveness, stability and cost. We additionally found that trust in the developer and application permissions also have a significant effect on user ratings. Similarly, we also found that permissions and insecure network usage represent a significant reason to remove an app.

We also note that participant ratings are reasonably consistent. Only a handful of application reviews may be enough to achieve consensus on a specific application’s security and privacy rating. As such, it is also possible that users did not provide a rating because they agreed with the average public rating for that application from Securacy’s main interface (Figure 5 – right). This resonates well with ProtectMyPrivacy , a crowdsourced security recommendation system for iOS, where just 1% of expert users provided recommendations accepted by 67% of the users.

# 5 Covert Network Use
Devices in North America exclusively (93%) communicate with North American servers, while 33% of Europe’s traffic stays within Europe (Table 2). Given Snowden’s revelations, German Chancellor Angela Merkel has encouraged Europe to vote for a network hub , i.e., that international service providers should host their data within Europe to better protect the privacy of European citizens.

Internet access made by applications is often hidden from the user. In particular, if an application is not visible to the user (i.e., a background service on Android), the user has no idea of which application is accessing the Internet and where the data is going at any given time.

Applications communicate transiently with several servers throughout the day (daily average of 115 connections, per device), mostly to those in North America. This should come as no surprise as the most popular mobile applications are often hosted in cloud-based hosting sites such as Amazon’s EC2, as they are designed to scale and handle large numbers of users.

However, we find it troubling that 56% of the connections established by user applications were on insecure ports, a security concern. This is without considering whether applications are actually using secure connections correctly; previous studies have shown that many Android apps use SSL incorrectly . Incorrectly implemented SSL can make the client vulnerable to active attacks, while not using SSL at all allows passive eavesdropping on all data. Clearly more work is needed to help developers to utilize SSL correctly.

In fact, the Android Developer’s website warns against bypassing the devices’ CA (Certificate Authority) checks, where developers implement their own (non-functional) TrustManager. A valid and SSL certificate needs to issued by a trusted CA, often at a cost.

This might be a cost that semi-professional developers cannot afford or are not prepared to pay.

As Edward Snowden commented in 2014 : “What last year's revelations showed us was irrefutable evidence that unencrypted communications on the Internet are no longer safe. Any communications should be encrypted by default.” We could not agree more and a goal of our work is to raise awareness for future mobile app development.

# 5 Limitations
Although our list of permission concerns provides an overview of the types of data an application may access, it is neither exhaustive nor precise. It could be expanded in the future to capture concerns we might have missed or to improve precision. In addition, our “in-the-wild” participant sample might not be representative of the general population, as it is likely that our participants had a particular interest in the network usage, privacy and security of their applications.

# 6. CONCLUSION
Securacy is an Android application that reduces the burden users face when dealing with application permissions at install time. It achieves this goal by only notifying them if an application is perceived as insecure or because it requests access to permissions the user has previously recorded as concerning. Securacy builds on the fact that users do check ratings and feedback from others to assess an application. Improving the end-user management of privacy and security concerns on mobile phones is still an open challenge. To enable future work, we are making Securacy open-source and release it under the Apache 2 license and we encourage other researchers to extend it.

# 8. REFERENCES
1. Agarwal, Y. and Hall, M. ProtectMyPrivacy: Detecting and Mitigating Privacy Leaks on iOS Devices Using Crowdsourcing. In Proceeding of the 11 th Annual International Conference on Mobile Systems, Applications, and Services. ACM, 2013, 97-110.