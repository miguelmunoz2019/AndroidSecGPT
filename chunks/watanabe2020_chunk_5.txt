Libraries play a vital role in improving the efficiency of developing applications and monetization (especially with ad libraries). As of 2012, 95% of popular free Android apps contained at least one known ad library . Unfortunately, several studies have revealed the risk of an ad library automatically harvesting privacy-sensitive data without sufficient explanation to users , . Andow et al. analyzed popular ad libraries and identified 15 libraries as madware, which exhibits aggressive advertising behaviors . Chen et al. addressed the problem of a potentially harmful library (PhaLib), which is potentially harmful code implemented as a library, and their developed tool for finding specific code over different mobile platforms (Android and iOS) discovered 117 Android PhaLibs and 46 iOS libraries . To estimate the risk of information leakage, Demetriou et al. developed a tool to discover apps that expose a targeted user’s privacy data to an integrated ad library.

Although many studies of software libraries aimed to discover malicious code, the motivation of our work is discovering vulnerabilities in libraries. To the best of our knowledge, our library analysis is the first work to classify libraries into three intrinsic categories, i.e., official, private, and third-party. This fine-grained library analysis helps app/library developers clarify the boundaries of responsibility for countering vulnerabilities and appropriate triage countermeasures. Backes et al. developed a library detection method called LibScout . LibScout is resilient against common code obfuscations and capable of pinpointing exact library versions. As we demonstrated in Sect. 3, the accuracy of Droid-L is high, however, we can also use these techniques as a complementary to the outputs of Droid-L.

Finally, some recent researches focus on the maintenance and updatability of mobile libraries. Yasumatsu et al.  revealed that 50% of library updates were performed for more than 3 months after its release, and 50% of outdated libraries used in mobile apps were left for more than 10 months. However, according to Derr et al. , 85% of the outdated libraries can be upgraded without modifying the app code. These findings are useful for developers to fix vulnerabilities in free and paid apps across various categories we identified and improving mobile apps market security.

# 8. Related Work
# 8 Library Analysis
A significant amount of recent research has shed light on
# 8 Vulnerability Analysis
There have been numerous studies related to vulnerability and malware/adware detection. Many of these studies applied their methods to actual apps for evaluation. Based
# IEICE TRANS. INF. & SYST., VOL.E103–D, NO FEBRUARY 2020
on studies that consider vulnerabilities and threats to mobile apps and devices, we classify such vulnerabilities into four categories, i.e., information disclosure, SSL/TLS and cryptography, inter-component communication, and WebView. The first two are broad underlying issues that are not solely related to mobile apps and devices. The last two are mobile app/device-specific issues.

# Information disclosure
Apps should be able to carefully process sensitive information, such as credentials; otherwise, there is a risk of information disclosure when broadcasting, logging, storing sensitive information, and setting improper file permissions. Viennot et al. conducted a survey on secret tokens for authentication embedded in app code . Our Secret Token Finder (Sect. 4) also finds secret tokens.

# SSL/TLS and cryptography
Misuse of SSL/TLS and immature implementation of original cryptography can easily cause serious risks due to insecure communication. Fahl et al. developed Mallodroid to find apps that misuse SSL/TLS APIs, which can result in man-in-the-middle attacks . We also used MalloDroid to find apps that misuse SSL/TLS (Sect. 4). In addition to issues with secure communication, we have addressed weak keys used for APK certificates. Weak keys can potentially be cracked to obtain a private key, which enables the forging of a signature on a modified APK . Our Weak Certificate Checker discovers cryptographically weak certificates used to sign an APK file (Sect. 4).

# Inter-Component Communication (ICC)
ICC allows individual app components to be independent and enables communication between app components. Felt et al. addressed the permission re-delegation problem, which occurs when an app with permissions performs a privileged task for an app without permissions.

# WebView
WebView† is an Android class that provides the functionalities of a custom WebKit browser to render web pages. Jin et al. revealed a new form of code injection attack using addJavascriptInterface, which is provided by WebView and allows an app to add a bridge between JavaScript and native Java code . Mutchler et al. analyzed a large number of mobile web apps embedded with WebView in terms of unsafe and leaky use of browser functionality. They found that 28% of the apps contained at least one security vulnerability.

Our investigation of vulnerabilities (Sect. 4) for leveraging both original tools (Weak Certificate Checker and Secret Token Finder) and free tools (AndroBugs, MalloDroid, and QARK) broadly covered the above four categories. While AndroBugs finds various types of vulnerabilities across the four categories, other tools find different vulnerabilities that are beyond the scope of AndroBugs.

†iOS also provides similar classes such as UIWebView and WKWebView.

# 8 Paid App Survey at Market Scale
A recent survey effort conducted by Martin et al.  reported that the first research into the mobile marketplaces began in 2010, and, as of the end of 2015, 155 papers have been published.

In 2012, Chakradeo et al. collected 36,710 apps from Google Play and third-party marketplaces, and they proposed lightweight triage techniques for market scale analysis in 2013 . In 2014, Viennot et al. presented a detailed crawler architecture to acquire apps from Google Play in a scalable manner and compiled metadata corresponding to over 1M apps, where they downloaded free apps and the metadata of free and paid apps.

Although the scale of the analyzed data dramatically increases year-by-year with the exponential growth of marketplaces, the analysis of mobile apps was primarily performed in the above representative market-scale studies, except for paid apps. The total number of apps available on Google Play was approximately 2 million, and approximately 10% of these apps were paid apps as of February 2016 . Although the current market share of paid apps should be considerable and paid apps serve an important role in monetization in marketplaces, in most studies conducted at the market scale, only free apps were examined. Thus, the insights obtained from such studies were implicitly confined to free apps. Therefore, the actual security aspects of paid apps have not been considered adequately.

We investigated prior studies focusing on paid apps in terms of the number of paid apps, the origin of apps (market), analyzed object, and analytical purpose (Table 14). While most studies of paid apps covered a broad range of security topics, the analyzed properties were only extracted from market-level metadata, e.g., reviews, ratings, and the number of installs. This means that such studies did not require the actual code of the apps. There have been conventional studies that analyze the code of paid apps; however, only several hundreds of paid apps at most were analyzed. Our work achieves a double-digit increase in dataset size compared to such studies. In addition, our work was accomplished using both the code information of paid apps and market information. To the best of our knowledge, this study is the first to successfully bridge the software analysis of paid apps and market analysis at a large scale and successfully make the security of paid apps understandable at a high level.

# 9. Conclusion
To establish the assessment and remediation of mobile app vulnerabilities, understanding their origins is an imperative approach. This study has focused on mobile app libraries, which constitute most of the code in mobile apps. We have attempted to understand the provenance of mobile app libraries that cause vulnerabilities, which we have classified into four major classes, i.e., information disclosure, SSL/cryptography, ICC, and WebView. By linking the outputs of Droid-L and Droid-V, we can accurately specify the vulnerable libraries contained in apps.

A unique and noteworthy approach of this study is that we used both free and paid apps for our analysis. Since paid apps have different software development and maintenance methods, compared to free apps, they exhibit a different use of libraries or software update frequencies, and these differences affect the characteristics of vulnerabilities in the apps. Our analyses using Droid-L and Droid-V revealed that most vulnerabilities in mobile apps are caused by third-party libraries. We also found that even top paid apps do have vulnerabilities in their libraries, and many have not been updated. It was somewhat surprising that more expensive/popular paid apps tend to have more vulnerabilities. Based on the findings derived through our extensive analysis, we have proposed guidelines for mobile app developers, mobile OS developers, mobile app market operators, mobile app library providers, and vulnerability test developers.