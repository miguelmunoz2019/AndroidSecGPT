The motivation for this paper is to solve above-mentioned problems. We present a comprehensive state of the
# Arabian Journal for Science and Engineering (2020) 45:3289–3315
art on all techniques and tools used for the detection of Android code smells from different Android applications till 2019. The standard specifications, detection rules and source code metrics related to 25 Android code smells are presented. We present a flexible approach by integrating the concept of source code analysis and source code metrics for the recovery of 25 Android code bad smells from Android software applications. Our prototype tool is flexible enough to accommodate variable code bad smell definitions and is easily extendable for other code smells and programming languages. The tool is publically available on the Web. We publish results of our approach on the web for the review and comparisons of researchers. We also compare the results of our approach with a representative state-of-the-art approach on smell by smell basis.

# Notable Contributions
- The comprehensive and recent state of the art on code bad smell detection techniques and tools for Android apps.

- The Specification of 25 code bad smells for mobile applications.

- An approach supplemented with tool support for the recovery of 25 Android code bad smells.

- The evaluation and comparison of results of the proposed approach with a state-of-the-art approach.

- A publically available benchmark on results of Android code bad smells.

The rest of this paper is organized as follows: The state of the art related to Android bad code smells is discussed and summarized in Sect. 2. We describe specifications and source code metrics for Android bad smells in Sect. 3. The architecture and working of approach through an example are demonstrated in Sect. 4. We also discuss prototyping tool and limitations of the proposed approach in Sect. 4. We present the evaluation of our approach, comparison of results, discussion on results and accuracy in Sect. 5. The threats to the validity of approach and its results are discussed in Sect. 6. Section 7 concludes the whole approach and recommends future work.

# 2 Related Work
A number of approaches are presented for automatic detection of code smells from different types of software applications. Most approaches focused on the recovery of code smells from object-oriented software applications as highlighted in the Introduction Section. Here, it will be unnecessary to discuss these approaches as a number of reviews, surveys and empirical studies are presented on these approaches. A limited number of approaches are presented for the detection of Android-specific code smells. We focus on Android-specific code smells in this paper. We partially followed guidelines of systematic literature review presented by kitchenham for the literature review in this section. We follow four steps for our review: (i) Define a search string, (ii) select the primary studies, (iii) snowballing, (iv) assess the quality of selected primary studies. In the first step, we define the following search string for the selection of studies:
((‘Android Code Smells’ OR ‘Android Code Bad Smells’ OR ‘Android Bad Smell’ OR ‘Android Antipatterns’ OR ‘Android Design Smells’ OR ‘Android Design Flaws’) AND (‘Detection’ OR ‘Recovery’ OR ‘Recognition’ OR ‘Identification’) AND (‘Approaches’ OR ‘Methods’ OR ‘Techniques’ OR ‘Tools’) AND (In ‘Title’ OR ‘Abstract’ OR ‘Keywords’))
Initially, we found 344 publications with the above search string. The search string was executed on IEEE Explore, ACM, Springer and Google scholar. Secondly, we applied inclusion/exclusion criteria and selected 19 publications. These papers are listed in Table 1. The time scale for the selection of papers is from 2014 to June 2019. The reason for this time frame is that research on android code smells detection started in the year 2014. We selected only studies in this section that have specific focus on the detection of Android bad smells from Android/object-oriented software applications. We selected three studies published as Master thesis in the year 2018 on Android code smells. We also selected three studies that focus on the detection of object-oriented code smells from Android applications. The papers that only analyze the impact of Android/object-oriented code smells are not included. The studies focusing on single duplicate code smell from Android/object-oriented software applications are also excluded as there are already reviews on that particular bad smell. Thirdly, we also applied the snowball method for the selection of studies from references of 19 selected papers and found 3 relevant studies. The total 25 papers are selected and we assessed the quality of selected studies from their publication venues.

The key facts that we want to explore from state-of-art approaches are technique and tool applied, language of Android applications, datasets, detected smells and accuracy. A classification for categorization of code smell detection technique is presented by Kessentini et al.

5 https://github.com/AzharAli92/DAAP.

# Arabian Journal for Science and Engineering (2020) 45:3289–3315
# Arabian Journal for Science and Engineering (2020) 45:3289–3315
# 3293
OO object oriented, NM not mentioned, Prec precision, Rec recall, F1 combined effect of precision and recall
This classification for the categorization of Android bad smells detection techniques. Most state-of-the-art Android smells detection techniques apply tools for the implementation of the proposed technique. We analyze tools based on their type and availability. The features of these tools are used for the development of our prototyping tool discussed in Sect. 4. Similarly, datasets, number of detected smells and accuracy are other key features analyzed critically. These attributes are applied for the empirical evaluation of studies. Table 1 presents the summarized information about these selected approaches. We briefly discuss the key features of selected primary studies.

Banerjee et al.  presented an approach to detect energy bugs from Android mobile applications by integrating concepts of graph-based search algorithm and guidance heuristics. The approach is based on automation test generation framework that systematically generates test inputs. These test inputs are used for the detection of bugs. They detected 4 energy bugs that degrade the performance of mobile applications. Authors performed experiments on 30 Android applications and claimed that approach has only a few false positives. However, they did not calculate the accuracy of the approach.

Hecht et al.  presented code smell detection approaches supplemented with a tool named as PAPRIKA to identify object-oriented and Android-specific code smells. The PAPRIKA approach follows a two-step process: (i) generating java source code from Android package file and (ii) Detecting OO and Android-specific code smells. Authors focused only on 8 code smells in both publications. Hecht et al.  presented an empirical-based approach that examines the evolution of mobile apps and assesses their quality by considering code smells. They performed experiments to extract the same set of code smells presented in their previous publications . Hecht et al.  also presented an approach to evaluate the impact of Android code smells on the performance of software applications. They performed experiments on different projects to evaluate the impact of three Android performance code smells. They concluded that correction of these code smells can improve the user interface and memory performance.

Lin et al.  presented an approach to detect and refactor inappropriate Asynchronous constructs from Android applications that cause memory leaks, lost results, and wastage of energy. They implemented an approach with a tool named ASYNCDROID. They evaluated the approach using a large number of open source Android applications. They also evaluated their results and research questions through a survey by involving 10 experts (Android developers).

Palomba et al.  presented an approach supplemented with ADOCTOR tool for the detection of code smells specific to Android mobile applications. The proposed approach is able to detect 15 code smells from a catalog of Android-specific code smells presented by Reimann et al. . The approach is a mixture of metric and simple text comparison claiming an average precision and recall of 98%. A number of code smells are detected by rules based on source code metrics and by a simple text comparison. There is a lack of accuracy while conducting text comparisons as the intended metrics may exist in the comments section of source code files. The ADOCTOR is available publically for experimentation. Moreover, the authors did not compare their results with state-of-the-art techniques and tools.

Morales et al.  reported an approach to detect and correct antipatterns/code smells related to energy consumptions from mobile software applications. Authors applied a tool named as EARMO based on three multi-objective search-based algorithms. The experiments are performed on 20 Android mobile applications available at F-Droid to refactor 5 object-oriented code bad smells and 3 Android mobile bad smells. Authors claim that the battery life of the mobile phone is extended up to 29 min after refactoring operation.