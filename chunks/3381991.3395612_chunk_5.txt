# 5 Sensitive Information Leakage
Our study detected that 33 (80% out of 41) FL apps were vulnerable to leaking sensitive information in network traffic and/or local storage. Figure 4 shows the types of sensitive information that can be leaked from those 33 FL apps. Among them, location data was the most commonly leaked data, and it can be leaked by 72% of the 33 FL apps. An attacker can intercept or obtain user location data for a variety of malicious activities, such as determining when the whole family is away from home, or for other criminal purposes.

Out of the 33 vulnerable apps, 39% leaked phone numbers of users or group members. Some FL apps use the phone number to invite members to a circle over text messages. One of the apps used a free SMS API to send SMS messages that contained a join code for inviting group members. In such a scenario, an attacker can use the same API to invite people to a group while pretending to be a family member. The invited members would then receive an SMS message containing a join code from the same free API service. This can fool a family member into believing that the inviter is the same as a legitimate family member. Thus, a group member might unwittingly join an attacker’s circle and share location and other data with the attacker.

On the other hand, around 12% of the 33 vulnerable apps leaked user credential information (e.g., username and password). With these apps, an attacker can intercept and steal the credential information to hack the users’ accounts. After that, the attacker has full control of users’ accounts for a wide range of malicious activities, such as obtaining credit card information, personal information, and family member information. There is another risk associated with the loss of usernames and passwords. This can be harmful, especially to people who reuse the same passwords. This kind of problem is very common.

Additionally, 27% of the 33 vulnerable apps leaked join codes in plaintext, either over HTTP connection (15%) or in local storage (12%). Any person who has the join code can join a family circle. This means if an FL app does not protect the join code, an attacker can intercept it to join a circle where a lot of sensitive information about users (e.g., location, chats, etc.) is readily available. Also, the attacker can interact with group members in order to harm them, such as setting up a meeting while pretending to be a family member for assault or robbery. Therefore, leaking join codes in insecure forms can be hazardous to all group members (families, friends, and others).

We also determined that 42% of the 33 vulnerable apps leaked messages of group members in plaintext. This is a serious vulnerability since messages between group members might have sensitive information, such as credit card numbers, location data, security PINs for doors or lockers, and the like. Transferring or storing such conversations in an insecure channel can be harmful.

It was also noted that 39% of the 33 vulnerable apps leaked group member information, such as email addresses, phone numbers, full names, and locations. Other sensitive information, such as contacts and device ID (9% and 24%, respectively), was found unencrypted. These kinds of sensitive information can help attackers impersonate users or carry out phishing attacks.

# 5 Channels of Sensitive Information Leakage
We mainly inspected two points of data leakages: in transit or at rest. Figure 5 depicts the percentage of vulnerable apps and the corresponding leakage channels. Network traffic, internal storage, and external storage are the main channels. Internal storage is the major leakage channel, with 69% of the 33 vulnerable apps storing sensitive information insecurely. Intruders with physical access or root permission to the device can easily obtain such information if.

# Session 3: Privacy and Data Sharing
# SACMAT ’20, June 10–12, 2020, Barcelona, Spain
# Percentage among the 41 FL apps
data is not encrypted. Also, we found that 9% of apps stored sensitive information on the external storage, which is a shared storage space for all apps. One app stored group member information and another stored voice conversations between two group members. The risk of storing sensitive information on external storage is that any app that has the read external storage permission can read all the data stored there.

Furthermore, we found that 36% the 33 vulnerable apps leaked a great deal of sensitive information (e.g., login, join code, location, email, and phone number) at transit. A network attacker can intercept this information for malicious activities. This kind of interference can be relatively easier as the attacker does not have to create a malicious app or have physical access to the phone. The attacker can simply monitor the traffic using available sniffing tools, and perform harmful actions remotely. It is worth mentioning that some apps leak sensitive information on both local storage and over the network.

Overall, we found that most FL apps failed to protect users’ data despite collecting a lot of sensitive data. This makes users vulnerable to physical and digital crimes, both of which endanger families. Most of the apps that we analyzed are used by millions of users who have a reasonable expectation of confidentiality and protection. It is relatively simple for developers of FL apps to incorporate security protection. However, our analysis shows that developers seem to prioritize app functionalities over security.

# 5 Leakage Analysis on Back-end Servers
FL apps need to communicate with back-end servers for information storage and retrieval. We found that 16 of the 41 FL apps communicated with back-end servers over HTTP which was insecure. Among these 16 apps, five had authentication or authorization vulnerabilities. For example, we were able to retrieve information about users and families from back-end servers by resending captured packets. For some of these 16 apps, we could retrieve PII using easily guessable information, as described in detail in Section 6.

Some of the FL apps that we analyzed depended on an access token to retrieve user data from the server. The access token is a sequence of numbers generated by the server when users log in with their credentials. Apps use this access token to authenticate the user to the server with every request instead of requiring usernames and passwords. The access token always has a designated lifetime. When the lifetime expires, the access token becomes invalid. Then, the server asks the user to log in again to generate a new valid access token. A short-lived access token is more secure than long-lived ones. However, we found that one server sets a lifetime for the access tokens that are overlong, such as seven days.

For FL apps that use SSL channels to communicate with back-end servers, we used the Qualys SSL scanner to detect server misconfigurations of SSL. Figure 6 shows the Qualys ratings for all HTTPS URLs found in the 41 FL apps. Most of the FL apps had back-end servers with a grade of “A” which is very good. Upon further analysis, we found that most of these apps used third party cloud services as back-ends servers, such as Amazon AWS, Microsoft Azure, and Google G-Suites. We found one app whose back-end grade was “F” which indicated that it was very vulnerable to Heartbleed and POODLE attacks. Overall, the common reliance of FL apps on popular third party cloud services makes it relatively easier to avoid misconfigurations. The question about whether there might be privacy violations by those cloud services is out of the scope of this paper.

# 6 CASE STUDY
FL apps face risks from two types of attacks, network and local storage attacks. In this section, we selected two of the nine apps that were found to leak join codes. As shown in the following case studies, one app leaked join codes over network traffic, and the other leaked join codes in local storage. These two apps have over 50,000+ installs from Google Play. For each app, we installed the app on two Android devices (Version 8 which is known as Oreo). Then, we created different user accounts on the two devices. Afterward, we initiated a circle on one device, and then we generated the join code to invite the other user. Later, we shared the join code with the second device via email. The join code was fixed for the circle, thus any person with the join code could join the circle. From the second device, we used the join code to join the circle. Finally, we started sharing location data and chats between the two devices.