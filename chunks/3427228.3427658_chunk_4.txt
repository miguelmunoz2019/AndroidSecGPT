# 3 Usages Analyzer
As we want to provide developers with information regarding a dependency’s compatibility and the use of libraries with potentially insecure usages of cryptographic APIs, we need to analyze the developers’ code. We built a code dependency analyzer that traverses through all Java and Kotlin files. When developers open a project in Android Studio, and the indexing process of Android Studio has completed, Up2Dep starts to analyze the project’s dependencies. We decided to wait for the indexing process to be done before analyzing code dependencies, because it significantly speeds up the analysis process as code files (including resources) have been transformed into a preferable representation, namely PsiTree, that allows faster processing. Each file corresponds to a PsiTree, and PsiTrees can depend on each other and can contain sub-PsiTrees. For every file (PsiTree), Up2Dep extracts its dependent PsiTree, and resolves the PsiTree to find out if it is associated with an external (foreign) code file. In case of a foreign PsiTree, Up2Dep checks with the Project-FileIndex class (provided by IntelliJ/Android Studio) to examine if the corresponding code file is in library classes or library source. As the ProjectFileIndex class contains information about all included libraries, Up2Dep can resolve a library class or a library source to find its library information (e.g., library name and version). Once the resolving process is completed, Up2Dep records any usages of the library, e.g., method call (including constructor), and saves them for later references. At the end of the process, Up2Dep has a complete dependency tree of source code files (Java and Kotlin) and their corresponding used libraries with details on which library methods the app is using. More specifically, the result of Usages Analyzer is a mapping of multiple pairs: code file (Java or Kotlin) and corresponding used library including API usages.

# 3 Dependency Resolver
The results from Remote Dependency Inspector and Usages Analyzer are fed to Dependency Resolver. For each included library, Dependency Resolver checks the library’s usages in the app code as reported by Usages Analyzer. At this point, Dependency Resolver has information on which APIs of the currently included libraries are used in the developer’s code. If Dependency Resolver finds that any of the used APIs of an outdated library is no longer available in the library’ latest version, it picks the library version that is newer than the current version but contains all the used APIs (newer compatible version). Using the information of publicly disclosed vulnerabilities of third-party libraries, Dependency Resolver checks
# ACSAC 2020, December 7–11, 2020, Austin, USA
# Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
If the currently included library version has a known security vulnerability. Additionally, Dependency Resolver looks up each used library API to detect if the API leads to cryptographic API misuse in the library, and the details of the misuse.

From all those information, Dependency Resolver gives developers the following warnings and potential fixes in their build.gradle files.

- The dependency is outdated and can be updated to the latest version.

- The dependency is outdated and cannot be updated to the latest version.

- The dependency is outdated and has a known security vulnerability.

- The dependency potentially uses a cryptographic API insecurely.

We notify developers about the security and outdatedness of their project dependencies in the build.gradle file as this is the location where developers would manage their project dependencies. Besides, we also leverage the IDE functionality to allow developers to use Up2Dep in batch mode to analyze the whole project and see the analysis results in a separate window. In the following, we describe how Up2Dep notifies developers about the above declared problems.

# Outdated version can be updated to the latest version
In this case, all the used APIs of the outdated library are also available in its latest version. Dependency Resolver suggests developers to update to the latest version as it will be compatible to the developer’s code (see Figure 11 in Appendix). Developers can apply the suggested fix by using the default short-cut of Android Studio or clicking on the default bulb icon to apply the recommended fix. When this quick-fix is applied, the outdated version string of the library declared in the build.gradle will be replaced by the latest version.

# Outdated version cannot be updated to the latest version
When not all used APIs of an outdated library are available in the latest version (e.g., because the library developer removed or changed methods), Dependency Resolver suggests developers to update to a newer but compatible version. This means the newer version would not require changes to the app code to adapt to the library’s API changes. Similar to the previous fix, developers can apply it by using the default short-cut or clicking on the default bulb icon. When no compatible version is available and developers still want to update the outdated library to the latest but incompatible version, they are provided the option Show Dependencies (see Figure 12 in Appendix). The purpose of the Show Dependencies fix is to give developers feedback on how and where they can migrate their project’s dependencies to the latest versions (see Figure 10 in Appendix).

# Outdated library version with known security vulnerability
When the included library contains a known security vulnerability, Dependency Resolver alerts developers with an error (in red color) with details on the vulnerability. Developers can further check the vulnerability in the attached link to our Up2Dep project website (see Figure 8 in Appendix). Since a known security vulnerability can be a serious problem for the host app or end-user, we use a red warning instead of a normal warning (in yellow color) to notify developers. In this case, developers can upgrade to the latest version that contains the security patches. When the latest library version is also vulnerable, developers are recommended to consider not using this library.

# Use of insecure cryptographic APIs
Similar to known security vulnerabilities, if any used library method happens to insecurely use a cryptographic API, Dependency Resolver warns developers in form of errors against using this API (see Figure 9 in Appendix). In this case, Up2Dep suggests to developers to update to the latest version if the used APIs in the latest version do not contain cryptographic API misuse. If the latest version still has that problem, developers can use the Show dependencies option to examine the location and necessity of the used library method and decide whether or not they can remove the used method call, or switch to another library.

# EVALUATION METHODOLOGY
Our goal is to find out if it is technically feasible for Up2Dep to support developers in keeping their project dependencies up-to-date and in avoiding library versions with security problems, e.g., how many outdated (including insecure) libraries Up2Dep has helped developers migrate to the latest versions and which security vulnerabilities it has fixed for developers. We further examine developers’ Up2Dep experience in an online survey. Different aspects of Up2Dep in interacting with developers — studying developers behavior upon learning about the security of an included library, how security warning messages can be customized, how can we keep the balance between developers being annoyed and being informed, how developer’s mental model evolves — are not in the scope of this paper, and left for future work. In the following, we first describe how we enable developers to evaluate Up2Dep in-the-wild. We then report how we advertised Up2Dep and delivered it to Android developers for evaluation.

# Help Us Improve Up2Dep
- Useful: This check is correct, and you find it useful
- False positive: This check is incorrect
- Don't get it: The message does not convey enough information
- Other
To enable developers to evaluate Up2Dep, we leveraged the remote study platform of FixDroid  to setup and conduct our evaluation. We included telemetric features that record whether a suggested quick-fix was applied. We provided developers the Feedback in context (see Figure 3) option where they could send us feedback on whether the suggested fix worked as expected, if they needed more information on any warning, or on other issues they encountered. In our instruction, we strongly encouraged developers to provide us feedback so that we could make Up2Dep better, this was where they can help us to help them, i.e., making a free-to-use tool better for them. Developers were also provided the option to opt-out of our telemetric data collection in Up2Dep’s settings. Before developers downloaded Up2Dep we clearly inform developers on which information we gathered about their usage (on our project’s website and in Android Studio plugin repository description). Our goal in this step was to make sure they are well informed before they decide to install our plugin.

This feature is adopted from Lint tool.