# E. No Usable Security Awareness, few or no User-centered Measures
In 10 of 23 contexts (C14–C23), we found that companies were unaware of the interplay between usability and security and spent little or no resources on the usability of their product. In five of those contexts (C14, C18–C20, C23), security was an important part of their business. In contrast, usability was taken much less seriously:
“I think the effort that goes into security-related topics and implementing them perfectly is many times greater than the ambition in the usability area, which is based more on the fact that the team has a claim to deliver. With security, it’s about delivering [laughs].” (C14)
Four companies (of which two were focused on security products) had actively involved experts for UX and design within their SDP. For all other contexts, even when products contained multiple security features, they did not see a need for usability experts. For example, one software team developed software for document signing (C18). This assessment was independent of the fact that usable security was well-understood:
“I don’t think there was a designer involved. [laughs] That’s how it developed over time – like a plant grows, that’s how I always imagined it.” (C18).

Some participants did not comprehend the concept of usable security, even when explicitly asked about the relationship between security and usability:
“Oh is that [usable security] a phrase? I’ve never heard the phrase combined, no.” (C17).

Here, security is attributed extraordinary importance, with security measures in place, but usability is regarded as entirely independent from and less important compared to security. Accordingly, the process is not very user-centered:
“Other companies focus on usability. For us, security is important.” (C14).

Their customers pay for technical security, but the system possibly being compromised due to users struggling with unusable security mechanisms was not a concern. However, we also found one case where an explicit request for usability from the customer compromised security. A participant described that a customer requested an “uncomplicated authentication process” for a managed mobile device and insisted on using employees’ telephone numbers as the “secret” for unlocking the devices. The need for usable security was clearly evident to those involved but despite knowing better, the security company gave in to the request:
“And if you don’t, you insist. They tell you ‘go away’, and they hire another company. Here, there are many companies waiting in the queue just to have a piece of the cake.” (C23).

While usable security was at least considered in the example, in other contexts, it was not attended to during implementation:
“I’ll be honest. I don’t think they would even mention the usability of the security. [. . .]” (C17).

We generally heard that development teams are under pressure to deliver and that their resources are extremely limited. Good development practices such as clean requirements gathering, unit testing, and mature technical designs often fall by the wayside:
“We need a solution in half a year. So there will be nothing like making a concept first, how everything should look, and making it well usable.” (C16)
We discuss issues around resources and budgets in Section IV-G1.

# F. Usable Security Decisions
As reported by participants, corporate structures and corporate cultures varied, as did the decision-making processes that affect usable security. For example, early in the development process, customer requirements and suggestions from marketing or other stakeholders often set the direction for the development team. The level of detail provided to the development team varied, which implicitly means developers make decisions relevant for usable security. For example, P11 mentioned:
“That is not defined. It’s up to us. It’s [. . .] sort of an unspoken rule that if you have login, the developers will implement ‘forget password’ for you and everything. It’s never really defined in the requirements [. . .].” (P11)
In development teams without dedicated designers, software developers often perform design activities. While designers, when involved, contributed wireframes and mockups for general design decisions, even with designer involvement, not every exception was included (e. g., the password recovery routine) and important usable security details (e. g., number of allowed login attempts) were missing. Even though designers take some responsibility, the development teams still stay in charge of making usable security decisions. The user interface design of a product often emerges from an interaction between developers and designers who try to interpret user requirements. Designers were actively involved in eleven software development contexts (C1–C6, C8, C11, C15, C19, C22). Three other development teams (C17, C18, C23), reported the ability to consult designers but never or only very rarely made use of this option. In the remaining contexts, no designers were available, leaving developers to make their own decisions. Since not specifying requirements explicitly might impact the distribution of resources within the development team, we asked whether customers requested usable security features. According to our participants, some customers do not care about usable security. Five participants (P8, P13, P17, P18, P22) stated that their customers did not consider usable security important in the past as they assigned little or no budget. For example, P8 said:
“Usually, you have like three [login] attempts or something. Sometimes the client doesn’t even want that, so you can just keep entering the password until you get it because it’s simpler to develop, you know. They don’t have to spend too much money on development, I guess.” (P8)
# G. Structures that Hinder Usable Security
Below we present obstacles and challenges to usable security based on insights from interviews dealing with concrete development contexts (cf. Section IV-A).

# 1) Limited Resources
All development organizations have to use their resources carefully. The two key resources overall, budget and time to delivery, are often limited, which has an adverse impact on usable security. The focus lies on delivering functionality on time and budget; security and usability are not specified in detail. Hence, they are assigned a lower priority and fewer resources. It affects usability and security, but usable security – which requires more than one skill set – is not owned by anyone and considered last – if there is any budget and time left.

# Budget
Eight participants (P4, P11, P14, P17, P18, P19, P23, P25) said that very limited budgets impacted steps related to usable security in the SDP. For example, usable security cannot be achieved when even basic security cannot be realized within existing budgets, as P18 illustrated:
“But in many cases, if the customer doesn’t have enough budget for development, you can’t set up that kind of security. [. . .] They have budget for main functionality but not for security or usability.” (P18)
While limited budgets were a common theme throughout the interviews, justifications varied. P17 stated that features must primarily pay for themselves and that usable security is not a way to make money: “And then you also sometimes discuss whether a usability feature is in proportion to its cost. [ . . .] because in the end, the majority of features have to pay for themselves.” (P17). P23 agrees: “[ . . .] there are limited resources, right? What’s gonna happen is they are testing other features that have broader use, have broader impact [ . . .]” (P23). Another participant illustrated the prioritization of security awareness over usability: “Yes, yes. Enormous amount of spending on security. [ . . .] [But on] the usability of it. No, no. That would be. . . that would be very, very low, considering the usability.” (P4). This is in line with P11 and might cause a security paradigm that cannot achieve usable security as it is skewed towards technical security, neglecting the human factors.

# Time
Strongly related to budget, time is another limiting resource. Ten participants (P3, P5, P10, P11, P14, P16–P19, P24) explicitly mentioned general time pressure during their work as well as deadlines. This lack of time inevitably leads to higher-priority tasks being attended to first. Usable security rarely has priority. P18 explicitly described this “On fast and easy projects [. . .], you never find that time of detail of security level or usability level.” (P18) as well as P24 who said: “When you do have to get that thing done in that time, quality suffers, and so some of the things that can suffer is security [. . .] and then also usability” (P24). Besides P24, also P3, P5, and P11 each reported that due to time pressure, testing is neglected.

All this highlights the time budget’s impact on which measures and steps in the SDP will get attention.