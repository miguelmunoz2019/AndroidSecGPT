As illustrated in Figure 1, two basic axes of analysis were pursued. First, each app was examined statically. This type of analysis comprises several steps, including (a) sensitive permissions, and third-party trackers, which target mainly the privacy of the end-user, and (b) misconfigurations, weaknesses and vulnerabilities, which refer to the security level of the app. In a second phase, the most interesting apps in terms of potential vulnerabilities and popularity, were scrutinized dynamically, i.e., by running them, and when possible, pairing the app with a real IoT device. This phase concentrates on network traffic and file analysis, that is, the files generated by the app may contain sensitive information. For examining any possible functionality, each app was exercised by hand, that is, not through the use of a UI/app exerciser. For both the analysis phases, when searching for weaknesses and vulnerabilities, we followed the methodology set out in the OWASP mobile security testing guide . Actually, more or less the same methodology have been followed by  regarding static analysis,  regarding dynamic analysis, and  for both types of analysis.

# Static analysis
# Dynamic analysis
# Sensors 2022, 22, 513
# 3. High-Level Static Analysis
Android permissions are split into three types, namely, install-time (it includes the normal and signature subtypes), runtime, and special. The focus of this section is on the penultimate type, which was introduced in Android 6 and evolved further in Android 10. A runtime permission is used to provide access to sensitive data the app may request, say, the user’s current location is safeguarded by a runtime permission. Given that a runtime permission has a potential to misuse, it requires a dialog prompt. That is, the user has to explicitly agree to grant such a permission or not; Android 10 provides increased transparency enabling the user to always allow, allow while in use, or deny a “dangerous” permission (The Android API marks such permissions as “Protection level: dangerous”).

Moreover, starting from Android 10, a runtime permission can be either hard-restricted or soft-restricted. Such a restriction is annotated in the AndroidManifest.xml as hardRestricted or softRestricted. The app installer, say, the Google Play Store may choose to not whitelist the restricted permissions for an app which does not conform to the platform’s policy. If whitelisted, the permissions behave normally. If not, the behavior depends on whether the permission is hard- or soft-restricted. A hard restriction means that the app cannot be granted a permission which is not whitelisted. On the other hand, a non-whitelisted soft restricted permission will behave as defined in the SoftRestrictedPermissionPolicy, that is, the public documentation for the requested permission. Note that a user cannot manually whitelist a permission.

# 3. Permissions
The identification and study of the runtime permissions used by an app is the initial step towards understanding its behavior from a privacy viewpoint. To this end, this subsection summarizes our findings regarding the runtime permissions identified in the AndroidManifest.xml file of each app included in Table 1. For easing the understanding of the detected permissions, we group them into six custom categories, namely Utility, Authentication, Location, Storage, Phone, and Communication. Specifically, the grouping of the various permissions in the different categories has been done with three goals in mind: (a) easing the reading of the current section, (b) improving the presentation of the results included in Table 2, and more importantly, (c) yielding useful discussions or conclusions based on the permission category rather than on each individual permission. It is implied that every dangerous permission identified in the examined apps has been included in the best matching category.

# 3. Utility
This category includes every dangerous permission an app requested and is related to a sensor or a hardware component of the mobile device.

- U1: CAMERA requests direct access to the camera.

- U2: RECORD_AUDIO allows an app to record audio.

- U3: BODY_SENSORS requests access to different sensors that are responsible for measuring the user’s heart rate, steps, etc.

- U4: ACTIVITY_RECOGNITION allows an app to recognize when a user performs an activity, including heart health statistics, calories burned, training status, and others.

# 3. Authentication
It is related to every dangerous permission that pertains to authentication methods and user accounts in general.

- A1: USE_CREDENTIALS allows an app to gain access to authentication tokens. It has been deprecated since API level 23 (v6).

- A2: AUTHENTICATE_ACCOUNTS allows an app to handle the account authenticator, i.e., a part of the AccountManager. The app can also create accounts and get/set their passwords. It has been deprecated since API level 23 (v6).

- A3: GET_ACCOUNTS allows an app to gain access to the accounts that are in the Account Service.

- A4: MANAGE_ACCOUNTS allows an app to manage accounts, including, creating and deleting accounts. It has been deprecated since API level 22 (v5).

# 3. Location
The location category relates to location-based dangerous permissions.

- L1: ACCESS_FINE_LOCATION allows an app to learn the precise location of the user.

- L2: ACCESS_COARSE_LOCATION allows an app to access the approximate location of the user.

- L3: The hard-restricted ACCESS_BACKGROUND_LOCATION allows an app to access the location of the user, when the app is running in the background. Based on the Android documentation, the app must also request either one of L1 or L2 permissions to eventually gain access to the user’s location.

- L4: ACCESS_MEDIA_LOCATION introduced in API level 29 (v10), allows an app to obtain access to any shared geographic location existing in the user’s shared collection.

# 3. Storage
This category comprises dangerous permissions which allow an app to access the OS filesystem.

- S1: READ_EXTERNAL_STORAGE grants read access to the external storage of the device, such as an SD card.

- S2: WRITE_EXTERNAL_STORAGE allows an app to gain write access to the external storage of the device.

- S3: REQUEST_INSTALL_PACKAGES allows an app to request and possibly install packages. According to the Android API, this is a signature type permission. Nevertheless, it is often flagged as a dangerous one, because it permits the app to install packages outside the Google Play Store.

- S4: MOUNT_UNMOUNT_FILESYSTEMS permits an app to mount or unmount files for removable storage. This permission requires platform level privilege, and therefore cannot be used by third-party apps. Previous work  demonstrates that this permission can be utilized for malicious purposes.

# 3. Phone
This category includes dangerous permissions that have to do with phone management, such as reading or writing contacts and reading phone logs.

- P1: READ_PHONE_STATE was added with API level 26 (v8). It allows an app to gain read only access to the phone state, including the cellular network, any active calls the user may have, and to the list of any PhoneAccounts object registered on the device.

- P2: SYSTEM_ALERT_WINDOW permits an app to create windows on top of other already running apps. The Android API states that “very few apps should use this permission; these windows are intended for system-level interaction with the user” and “If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen.” Previous works  have shown that this permission is exploited by major malware families.

Sensors 2022, 22, 513 9 of 41
- P3: READ_CONTACTS allows an app to gain read only access to the user’s contacts.

- P4: WRITE_CONTACTS permits an app to gain write access to the user’s contacts.

- P5: READ_PHONE_NUMBERS is a subset of the P2 permission, and it was introduced with API level 26 (v8). This permission authorizes an app to obtain read access to the device’s phone numbers.

- P6: WRITE_SETTINGS is flagged as dangerous starting from API level 23 (v6). By granting this permission, the app gains read/write access to the system settings of the device.

- P7: GET_TASKS has been deprecated since API level 21 (v5). For the sake of backwards compatibility, this permission will still return some data, such as the app own data. As a result, an app can be allowed to retrieve information about currently and recently relevant running tasks. As with S4 and P3 permissions, according to , the current permission has been used by three different malware families.

- P8: READ_LOGS allows an app to gain read access to low-level system log files. As with S4, the current permission is not for use by third-party apps. Interestingly, the related work  have shown that this permission is frequently abused different malware families.

- P9: READ_CALENDAR allows an app to gain read access to the user’s calendar data.

- P10: WRITE_CALENDAR grants an app write access to the user’s calendar data.

# 3. Communication
This last category contains dangerous permissions that are needed by an app to communicate externally. This includes among others SMS and call-based permissions.

- C1: RECEIVE_SMS is a hard-restricted permission. It allows an app to receive SMS.

- C2: READ_SMS permits an app to read SMS. It is hard-restricted.