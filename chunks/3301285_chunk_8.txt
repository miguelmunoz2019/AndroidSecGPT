On October 2, 2017, the Android Security Bulletin released  listed highly severe privilege escalation vulnerabilities in the Android framework (CVE-2017-0806) and its media framework (CVE-2017-0812). A security patch was released soon after these vulnerabilities were exposed, which addressed these issues. Although no exploitation was reported based on these vulnerabilities till date, reportedly, the vulnerability found in Android framework could have allowed the application, with malicious content to acquire added permissions, which were otherwise not assigned to them. For this, they do not require any consent from the user. Another vulnerability found in the Android media framework could have allowed system access to any attacker, having remote access to the system. The attacker will use a specially designed file to run malicious content on the targeted system. For this, the attacker requires access to a process, with all the necessary privileges assigned, so that it can provide a favorable environment required for running the malicious code. Broadly, there are two types of privilege escalation attacks: confused deputy attack  and collusion attack . The former type, exploit the vulnerability of the target system, and the latter can implement the malicious application, attacking the system. In Reference , the authors discussed methods that can be useful for ensuring access control at the user level.

# 2 Privilege Escalation Attacks Using Third-party and Advertising Libraries
Third-party libraries are the easiest approach that attackers are using for exploiting privilege escalation vulnerability at different levels in the Android system. Taylor et al.  analyzed third-party libraries in more than 30,000 smartphones. They found that per day from a single smartphone, 2 times private information is leaked by ad libraries, using permissions assigned to third-party libraries and that the average user has their data sent to 1 different ad servers per day. From the security perspective, it has become essential to detect and prevent system and users from privilege escalation attacks. For this purpose, it is necessary to provide the applications and libraries with limited privileges, and they should not be allowed to use each other’s permissions or any other permission not assigned to them. Analysis of few of these attacks is summarized in Table 5. The next section will discuss about various factors and loopholes that contribute to the increase of malicious activities.

# 3 FACTORS CONTRIBUTING TO THE INCREASE OF MALWARE
One of the main reason behind the massive growth of Android malware is the underlying architecture of the Android system and its growing application market . The Android operating system provides an open source platform where any developer can develop applications. This open source nature of Android makes it more vulnerable to attacks and exploitations from malware developers.

# 3 Permission System Exploitation
As the Android system continues to evolve, so does its permission system, which is becoming exposed to malware attacks. Malware developers are taking advantage of weaknesses of not only permission system but also exploiting Android infrastructure susceptibility to attacks. the Android
ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

The system comes with its in-built security mechanism based on a Linux kernel . The permission system forms the critical component of the Android security mechanism. It restricts the applications from accessing user’s personal information like user’s identification number, bank account number, and contact numbers. For an application, to utilize any of the system’s resources and interface, it requires separate permissions . Presently, 146 permissions  have been included in the permission system to provide a flexible environment to the applications to run on the latest versions of the Android system. The Android Manifest Permission file, used for static analysis of applications, includes the permissions required by the application. The present permission system includes risky permissions that are complex and makes it difficult, not only for the user’s to understand , but also becomes a challenging task for system’s security mechanism to restrict the requesting application access from accessing user’s confidential information. During installation, applications request for permission to access different components of the system as and in case the user does not grant all the permissions, the application does not run. So, users accept such permissions, to be able to use the application; giving knowingly or unknowingly consent to the attackers to get into the system. Attackers can use benign as well as malicious applications for this purpose. Research suggests that malicious applications generally request for more number of permissions than benign applications . All these permissions are coarse-grained, so users are left with no.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
# 3 Lack of Awareness Regarding Security Protocols and Poor Developer Practices
Android developers, while developing the application, do not give much emphasis on secure communication of data. Android SDK provides packages for the Internet connection that can support Internet connection via both HTTPS and HTTP. Developers’ lack of coding skills and partial understanding of SSL can lead to a compromise, with the security of the application. Using SSL certificates, which are signed by the Android trusted Certificate Authority, and Android’s application interface that is in-built, helps in securing the data from intruders. Because of the high cost involved in debugging, Android applications using SSL certificates, developers prefer using development servers consisting of unauthorized certificates for debugging. Not validating or verifying the certificates and host Names is also a part of poor developing practices . HTTPS and the TLS/SSL are a set of standardized protocol that the applications must use for the exchange of data. Using HTTP instead of HTTPS for URL connection and WiFi, and Bluetooth for Internet connection, further adds to the problem of information leakage. It encourages Man-In-The-Middle attack, where the attacker tries to sniff the data between the two parties, by pretending to be one of the trusted host. The developers should use TLS Public Key Infrastructure for authenticating the two parties in communication; however, its complex architecture demotivates them from using it . Rather than sending data over HTTPS and in plaintext format, proper use of SSL helps in sending the data in a ciphertext format, protecting it from the attackers. Bouncy Castle Crypto APIs  and OpenSSL  are open source platform that supports cryptographic libraries and provides the toolkit for SSL/TLS protocol. Users are generally unaware of the consequences of using HTTP and of the importance of proper usage of security protocols in the application.

Android developers are continuously working in the direction of making the Android system more secure. Recently, to make Android Oreo more secure, TLS version fallback is eliminated from HttpsURLConnection. This feature was used in previous versions to support HTTPS stack for connecting to the servers in which TLS protocol version implementation was not proper. In case, TLS handshake failed to connect, then HttpsURLConnection used to disable the newer version of TLS protocol, from retrying the handshake. Disabling the TLS protocol results in downgrading of protection. It makes the system vulnerable to attacks that is why in Android Oreo, TLS version fallback is removed to avoid such reattempts to establish connection.

Lack of documentation by developers can be misleading for the users and for other developers who are not directly involved in coding but with different modules of application development. Developers’ lack of knowledge regarding security protocols can prove fatal for the Android system. Error in the application coding does not mean it is malicious, but it can serve as a gateway for malware developers. If the developer does not write SSL/TLS code correctly or does not follow proper steps for establishing the secured connection, then it can lead to cryptographic attacks.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.