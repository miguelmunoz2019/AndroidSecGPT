# 6 Threats to external validity
The experimental apps selected for this study are obtained from GitHub, and the validity of the experimental findings for other communities is debatable. Android apps depend on third-party libraries and are developed on a small scale with rapid iterations, and there is no public database for faults. When obtaining fault data, irregular commits by developers lead to the less reliable classification of commits with matching fault keywords as faults. Besides, some projects on GitHub are immature, and most do not follow the complete software lifecycle steps. The project development is not standardized with inadequate testing and maintenance, resulting in the scare fault information and smell data. And the limited dataset under test resulted in a single-digit number of identified code smells. However, given that our apps are from different domains and sizes, we believe the findings still provide valuable information for code smell and app quality studies.

# 7 RELATED WORKS
# 7 Code smell research and detection
Code smell detection is a technique for analyzing and understanding the defined poor design in apps by extracting code metrics from the source code to explore fault-prone design issues. Thus, detection methods, as well as tools, have been continuously adopted to detect code smells in apps. Traditional Java static code metric detection is unable to precisely focus on poor design and implementation in Android apps for Android features. With the maturity of Android technology, researchers started to put more effort into detecting Android code smells. Huang et al. proposed four mapping metrics.

Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [11/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

ZHONG et al.

and implemented a static detection tool, HBSniff, to detect 14 code smells in object-oriented programming. Mario et al implemented DECOR to detect several object-oriented code smells in apps. Hecht et al. developed PAPRIKA to identify four Android-specific code smells based on manually defined detection rules Palomba et al implemented aDoctor to detect 15 Android-specific code smells with the abstract syntax of the source code. Fatima et al. extended custom rules based on the AL to detect and correct 12 Android code smells, which ultimately outperformed PAPRIKA Ghafari et al. investigated 28 Android code smells indicating security and discussed relevant elimination methods
# 7 Effects of smell on faults and security
To quantify the influence of Android code smell on app quality, fault counts are often used as an indicator. The fault prediction models have been researched to locate faulty code, thereby improving software quality and using resources better. Hall et al analyzed 36 fault-related works systematically and found that source code-based spam filtering techniques performed well in prediction Additionally, there are empirical studies involving bug triggering, based on TensorFlow analysis of bug types, distribution, etc While static code metrics have also contributed to fault prediction, their individual predictive performance is relatively poor. Zhou et al. applied various complexity metrics to logistic regression models and found that NCLOC outperformed other metrics Furthermore, fault prediction models using only the NCLOC perform better than other source code metrics, and LOC positively correlates with fault counts. Ostrand et al and Hongyu et al both reported that NCLOC is a generic, simple and effective fault prediction metric. Although some researches indicate that the predictive performance of NCLOC is inferior to other metrics, overall, NCLOC has significant advantages in fault prediction models Tang et al studied the security threats posed by link hijacking attacks based on the weaknesses of the existing app link mechanism in apps, and provided corresponding detection and defense methods. Sazzadur et al also focused on vulnerabilities in Java projects, researching the misuse of encryption APIs and vulnerable certificate verification. Security-oriented code smell is a code feature that can be captured at the code structure level and may lead to security issues. They serve as a predictive measure for security risks. Currently, more research focuses on faults and safety issues, so we concentrate our studies on how to avoid security problems caused by nonstandard implementations from a code structure perspective.

# 8 CONCLUSIONS
Software faces multiple security and quality threats within the continuous development of attack and counter-attack techniques. The security of Android apps with a high market share is even more critical, given the vast amount of sensitive data involved. To reduce the vulnerable code practice, we promote security design practices. In this paper, we customize 15 novel Android code smells and provide targeted suggestions for eliminating or mitigating them. Then we developed a lightweight tool to complete automatic detection and assess their prevalence. We investigated the distribution between code smells and faults by constructing fault counting models, then generated repair priority levels based on the experimental findings. The majority of the app datasets collected contained at least four security smells, and we believe that the identified code smells are a valuable indicator of security and quality issues. The experimental results show that code smells do have an impact on the faults in apps, and the code smell repair priority generated can serve as a practical baseline for researchers and inexperienced developers.

In the future research works, we are committed to a more comprehensive study involving DACS performance repair, a more extensive Android apps faults repository, and the validation of repair suggestions, realizing more mature research on the topic.

# AUTHOR CONTRIBUTIONS
Yi Zhong facilitated the acquisition of financial support for the project leading to this publication, and participated in reviewing and editing the manuscript, polishing the paper, as well as responding to review comments. Mengyu Shi was responsible for designing the methodology, crafting the original drafts (including substantial translation work), and polishing the paper. This encompassed conceptualizing experimental ideas, visualizing experimental results, designing experiments, and engaging in the manuscriptâ€™s writing, reviewing, and editing process. Jiawei He conducted research and
1097024x, 2023, 11, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [11/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# ZHONG et al.

2319
investigations, with specific focus or experiment execution and data/evidence collection. Additionally, he also carried out data analysis and the validation of experiments.

# DATA AVAILABILITY STATEMENT
The data that support the findings of this study are available from the corresponding author upon reasonable request.

# ORCID
Mengyu Shi https://orcid.org/0000-0002-3720-6075
Chunrong Fang https://orcid.org/0000-0002-9930-7111
Zhenyu Chen https://orcid.org/0000-0002-9592-7022
# Security-based code smell definition, detection, and impact quantification in Android
How to cite this article: Zhong Y, Shi M, He J, Fang C, Chen Z. Security-based code smell definition, detection, and impact quantification in Android. Softw Pract Exper. 2023;53(11):2296-2321. doi: 10/spe.