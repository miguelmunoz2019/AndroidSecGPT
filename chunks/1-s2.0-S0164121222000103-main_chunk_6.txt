It targets a specific category of vulnerabilities, i.e., the privacy of the communications. The developed framework detects a specific type of violation, i.e., ignoring the illegal certificate error and proceeding with the sending of sensitive information over an insecure communication channel. Bagheri et al. (2015) analyzed inter-app and inter-component security vulnerabilities in 500 apps. Specifically, a formal model expressing security properties of apps/components is extracted and a model checker verifies the safety of simultaneously running two apps that may interact while holding certain permissions. This research focuses on identifying a specific category of vulnerability, i.e., privilege escalation — an application with less permissions can be not restricted to access components of a more privileged application. Two types of detection strategies are adopted: (i) entities that can be inferred from a method; (ii) vulnerable paths of communication between entities. Also Ahmad et al. (2016) analyzed inter-app communication (IAC) in 52k apps, where the focus is on different types of actors involved in IAC (Library, Caller, and Callee), which are recognized as types of entities potentially vulnerable. Overall, these works  focus on a specific category of security vulnerabilities that, also due to the nature of our investigation (intentionally meant to be more general), we did not identify in our study.

Android devices and the operating system have been also investigated. Meng et al. (2018) presented a taxonomy of 63 device exploits (i.e., vulnerabilities leading to privilege escalation) grouped in 3 main categories that are related to perspectives: societal, practical, and technical. It is shown that the diffusion of exploits is decreasing due to Android systems and Linux kernels strengthening their security mechanisms. Our study does not limit its focus to exploits, but looks at security weaknesses from a more general perspective.

Jimenez et al. (2016) presented a taxonomy of 43 issues related to Android OS vulnerabilities by leveraging the CVE-NVD (Common Vulnerability Exposures - National Vulnerability Database) database whose size is left unspecified. The authors found that Android vulnerabilities related to the code mainly belong to 9 categories (e.g., resource management, handling data, etc.). They are mainly located in components dealing with browsing, cryptography, access control or networking. Also the fixing of vulnerabilities is investigated looking at the distribution of code changes, and most of them related to the additions of condition(s), authorization, functions, etc. Mazuera-Rozo et al. (2019) also performed empirical studies on the Android OS to categorize the types of the vulnerabilities (e.g., denial of service, improper authorization), their evolution overtime and their survivability. Security weaknesses are grouped in 14 categories where 154 types (e.g., credentials management, improper authorization, transmission of sensitive information, etc.) have been identified. Besides, vulnerability patches (e.g., check for exceptional conditions, proper handling of certificates, appropriate initialization values for variables) are analyzed to investigate the most used fixes. Our work, while related, focuses on security weaknesses affecting Android apps rather than the Android OS.

# A. Mazuera-Rozo, C. Escobar-Velásquez, J. Espitia-Acero et al.

# The Journal of Systems & Software 187 (2022) 111233
Weir et al. (2020) conducted a survey on the effect of requirements and developer practices on apps’ security. For app development, security is perceived relevant by the participants, even if assurance techniques are poorly used. The survey refers to a set of 454 apps, and 335 developers were using tools suitable to check the following 3 types of weaknesses: SSL security, cryptographic API misuse, and privacy leaks. As result, a portion of participants have been classified as security specialists and they advocated the usage of cryptography to enforce security.

Gao et al. (2021) investigated the temporal evolution of vulnerabilities in Android apps. Vulnerable code is detected in terms of which locations (e.g., library code) are more common than others, the types of code change (e.g., the addition of new files) that may entail security-related issues, and also if there is a correlation with malwares. The list of considered vulnerabilities is constituted of 4 categories (i.e., security features, permissions, injection flaws and data/communication handling) and 10 types, each associated to a detection tool providing evidence of the corresponding vulnerability.

To the best of our knowledge, our work represents the first and most comprehensive taxonomy of security weaknesses in Android apps, including both Java and Kotlin app-related code. Besides, our taxonomy is the result of a two-phase study, involving the inspection of software-related artifacts (i.e., security weakness-fixing commits) and a survey with software developers. The derived taxonomy is more comprehensive and extensive, covering 18 of the 20 issues analyzed in previous papers by Enck et al. (2011), Egele et al. (2013), Zuo et al. (2015), Bagheri et al. (2015), Jimenez et al. (2016), Weir et al. (2020), and Gao et al. (2021). Finally, we focus on both Java and Kotlin code recently suggested in Coppola et al. (2019), while only Java-related security weaknesses are analyzed in previously mentioned works.

# 6. Conclusions
We presented the first available taxonomy of security weaknesses in Android apps that covers both Java- and Kotlin-related code. Our taxonomy features 80 types of software security weaknesses, and it is the result of both a mining-based study in which we manually inspected 681 commits fixing security weaknesses (that contributed 74 types of security weaknesses), and a survey performed with 43 developers (contributing six additional types). Our results discussion resulted in the identification of several lessons learned for both practitioners (see the icon in Section 3) and researchers (icon).

Our future work will be mostly driven by the findings discussed in Section 3. In particular, we plan to focus on the definition of techniques able to detect (and possibly automatically fix) security weaknesses that are (i) not currently supported by existing detection tools, (ii) frequently spread in real Android apps, and (iii) relevant for software developers. Besides, we are interested to investigate the portability of methodologies and tools detecting Java-based weaknesses in Kotlin-based code, to understand which changes are needed to enable interoperability between the two languages. Our study provides the foundations for such a research agenda.

# CRediT authorship contribution statement
Alejandro Mazuera-Rozo: Methodology, Conceptualization, Software, Validation, Formal analysis, Investigation, Data curation, Writing – original draft, Writing – review & editing, Visualization, Project administration. Camilo Escobar-Velásquez: Methodology, Conceptualization, Investigation, Data curation, Writing – original draft, Writing – review & editing. Juan Espitia-Acero: Investigation, Data curation. David Vega-Guzmán: Investigation, Data curation. Catia Trubiani: Methodology, Conceptualization, Investigation, Data curation, Writing – original draft, Writing – review & editing. Mario Linares-Vásquez: Methodology, Conceptualization, Investigation, Data curation, Writing – original draft, Writing – review & editing, Supervision, Funding acquisition. Gabriele Bavota: Methodology, Conceptualization, Investigation, Data curation, Writing – original draft, Writing – review & editing, Supervision, Funding acquisition.

# Declaration of competing interest
The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

# Data availability
The data used in our study are publicly available at Mazuera-Rozo et al. (2021).

# A. Mazuera-Rozo, C. Escobar-Velásquez, J. Espitia-Acero et al.

# The Journal of Systems & Software 187 (2022) 111233
# A. Mazuera-Rozo, C. Escobar-Velásquez, J. Espitia-Acero et al.

# The Journal of Systems & Software 187 (2022) 111233
# Authors
Alejandro Mazuera-Rozo is a Ph.D. student in the Faculty of Informatics at the Università della Svizzera italiana (USI), Switzerland; and a Ph.D. student in the Faculty of Engineering at Universidad de los Andes, Colombia. He received his M.S. in Information Security from Universidad de los Andes in 2018, and his B.S. in Telematics Engineering from Universidad Icesi in 2015. His research interests include information security, software quality and mobile development.

Camilo Escobar-Velásquez is a Ph.D. student at Universidad de los Andes in Colombia. He received his M.S. in Software Engineering from Universidad de los Andes in 2019. He received his B.S. in Systems and Computing Engineering - Minor: Mathematics from Universidad de los Andes in 2017. He is part of The Software Design Lab, where he has been part of research projects on evolution, maintenance and analysis of closed-source android apps, automation of software engineering tasks and software testing. He received a Google Latin American Research Award in 2018–2021. He received a Swiss Government Excellence Scholarships for Foreign Scholars in 2020. He served as a student volunteer for ICSME’2018, ICSE’2019, ASE’2019, ICSE’2020, ICSME’2020, and ICST’2020. He served as organizing committee in LANGETI’2020, program committee in ESEC/FSE’2021 and shadow program committee in MSR’2021. More information is available here: https://caev03.github.io.

Juan Espitia-Acero is a M.S student in the Faculty of Systems Engineering and Computing at the Universidad de los Andes, Colombia. He also received his B.S in Systems Engineering and Computing from Universidad de los Andes in 2020. He is involved in the tutoring of some courses regarding the M. S. program of Software Engineering from Universidad de los Andes. His research interests include general software architecture, automated testing, software quality, cybersecurity, and mobile development.