# Computers & Security 80 (2019) 257–272
# 4. The distribution of optimization
By using the checking method defined in Section 2, we find that out of a collection of 7,723,699 APPs, 5,353,359 APPs contain the invocation defined by “Android Support Repository” and 442,605 APPs (8%) are optimized. Synthesized with data in the previous section, we find that approximately 36% APPs are processed by optimization enabled within ProGuard. The optimization of different categories is shown in Fig. 6(c). As we can see from Fig. 6(c), tool developers are more inclined to optimize their code.

Another measurement is performed on newly coming APPs for our Janus platform. 49,538 APPs out of 304,845 (16%) are optimized. It is very likely to be a trend for developers to optimize their code.

# 4. Detecting vulnerable TPL
This work is performed on our cloud service to help developer to exclude vulnerable TPL. In order to verify the capability of PanGuard, we apply our tool to a real-world TPL “AliPay SDK for Android”. The “AliPay SDK for Android” released by Alipay, which is one of the biggest third-party mobile and online payment platforms in the world. Android developers integrate this TPL to provide online payment for customers. To evaluate its efficiency, our task is performed on a collection of 1,004,498 samples, most of which were collected before January 2016 by our Janus platform.

In the TPL corpus building stage, we collect 1031 signatures for this TPL. After the cycle search and feature set matching, we build a corpus with 199 versions of this TPL. In the cycle search process, two signatures of the collection are in a cycle of related TPLs. The instances integrated these polluted TPLs are SHA − 1: 9e1dab145cc524d0ad5ea934510b1247f81be1dc and b9ce54e8e4e3a21dbe85c8dc8814000db419b84f. After inspecting the code, we find that the APP injects code to redirect the payment to their own code, which leads to an integrity breakdown of this TPL. In the feature set matching, the version is enclosed in an instance SHA − 1: 01dd3693451b4c3447013297bdda7005a2e6b32c and say, its subset instance 102-hash SHA − 1: 0f64ca13e6851aaa776ffd351747c5a0b32772b1. We believe that all these versions are generated by ProGuard. Although we have no evidence on the exact official version of this TPL corpus, we find this version is a buggy one.

# c o m p u t e r s & s e c u r i t y 8 0 ( 2 0 1 9 ) 2 5 7 – 2 7 2
The sketch of the most-recent version of this TPL provides an interface for merchants to sign order information in their own servers, in such a way keeping private keys safely at the merchants’ sides. However, after investigating this version of the TPL, we find that if a developer uses this version of “AliPay SDK for Android”, he must embed his private key in the APP to ensure the integrity of the order message, which leads to private key leakage by reverse engineering. We performed a check on the randomly-selected samples of this version but with different signatures. As a result, we find that most of the APPs use this version of TPLs with their private keys embedded in their APPs.

With this version of the TPL corpus in hand, we go further to identify the shrunk or optimized TPLs. In this stage, we implement it by feature set matching. For example, the instances of SHA − 1: 4d5cede3d5ca53d1a6000fe5f5c4a5b396a78df2 and SHA − 1: 75591cd7ffc0c142b8880be73a2a5d389e9366ab are drastically optimized by ProGuard, but we can still detect the buggy version in this APP.

Finally, we find that 13,578 APPs integrate this buggy version of the TPL and most of these APPs are likely to leak private keys in their code. Among the vulnerable APPs, over 20% of them are shrunk or optimized by ProGuard.

# 4. Detecting virus who breaks the integrity of a TPL
Since the TPL corpus has been built, it can be used to detect polluted TPLs in the detection stage. The TPL corpus is collected by cloud and distributed to the edge node, in the edge node, we compare the feature of a module with the candidate TPL corpus. If the feature of a given module is not one of all the versions in the TPL corpus, the module is considered to be polluted. Take the virus GhostClicker Micro (2017) (SHA − 1:0a6583a741debc90498fb693eb56509f603fc404) as example, after comparing with the closest TPL corpus, we find that the virus inserts 289 Android SDK APIs in “com.google.android.gms” and 461 Android SDK APIs in “com.facebook” package, which completely breaks the integrity of the TPL.

Additionally, as Fig. 7 shows, about 22% of the successfully decoupled TPLs are in a cycle. This is unreasonable for these 4 TPLs because the TPLs contained by this cycle is likely polluted. A quick checkout finds that frameworks, such as “Titanium” or “ActionBarSherlock”, which inject their code into these TPLs, contribute about 50% of the cycles, and other code injection takes up the rest, which are suspicious. To continue with the example of GhostClicker, we show in Fig. 9, there are 3 cycles in the dependency graph. The module “com.google” and “com.facebook.ads” are mutually dependent. More specifically, the following method enclosed in “Android Mobile Service” contains a particular invoke instruction as follows, calling the method defined in the module “com.facebook.ads”.

Lcom/google/android/gms/logs/fb;-><init>(Landroid/content/Context;)V
Lcom/facebook/ads/InterstitialAd;-><init>(Landroid/content/Context;Ljava/lang/String;)V
This is abnormal because the module “com.google.gms” actually does not depend on the module “com.facebook.ads”. This illogical dependency constructs a cycle for the two modules, and the cycle can serve as a criterion to detect code injection to TPLs and purify the TPL corpus.

# 5. Discussion
As a leading mobile security company in China, our team is responsible for daily processing TPLs to real-time update the platform for mobile security. We cooperate with Alipay in identifying the integration of old versions of Alipay SDK in a customer service APP, which is a customized service for Alipay. To check the version of this TPL, the cooperator provides the interface for version query in Alipay SDK. The detection usually fails when a customer service APP is shrunk or optimized. Moreover, the buggy version of this TPL mentioned above does not provide interface for version query.

When providing security audit for our customers, we find that many customers leak credentials when using “Alibaba Cloud Object Storage Service (OSS)”. Then we pay a close attention to the “Alibaba Cloud OSS” credential leakage problem. After browsing developer documentation of “Alibaba Cloud OSS”, we notice that “Alibaba Cloud OSS” TPL provides a test interface that misleads developers to leak their credentials. An anecdotal survey on this interface invoking shows that about 25% developers leak credentials that use “Alibaba Cloud OSS” TPL (CNVD-2017-06366, 09774, 10187, 11666, 11811, etc.). To date, “Alibaba Cloud OSS” has stealthily removed description for this interface, but that simple mitigation is not satisfying. To our knowledge, although the new version of “Alibaba Cloud OSS” TPL provides developers with recommendations when using ProGuard to ensure less mutation on this version of TPL, the old version, “MBAAS_OSS_Android_1_” for example, of “Alibaba Cloud OSS” TPL does not have any instructions for processing their TPL. This makes previous work fails to detect credential leakage (the TPL and interface) when a developer integrates the old version of “Alibaba Cloud OSS” TPL and then uses ProGuard to process. Another situation is when helping virus analyzer to extract domain in a virus, TPL extraction can help analyzer focus on domain resided in developer scope, rendering the analyzer to perform a fast response for this virus. For a security audit, our customers also care about the vulnerabilities introduced by developers or TPL providers. Additionally, by using TPL identification work, we also provide security un-related service to help our customers to compose a loosely coupled APP. In summary, TPL identification is an important work for both TPL providers and customers in mobile security analysis.

# 5. Limitations
The nature of TPL identification is complex, for which there is no all-in-one solution. In practice, our PanGuard is limited in the following aspects:
- The threshold U is very hard to set. In the experiment, a concrete value of U can successfully decouple one TPL, but over-decoupled another TPL within a same APP and vice versa. The successful decoupling rate depends on the TPL developers.

# Computers & Security 80 (2019) 257–272
A TPL is distributed in completely distinct folders. For example, the most-recent version of “AliPay SDK for Android” needs two or more signatures for this TPL, which raises the complexity for representation and detection.

A trivial modification on TPLs, usually taken security into consideration, does not affect the use of Android SDK APIs of TPLs, but does affect detection in establishing versions.

In the practice of TPL detection, we find some APPs contain code in their root folders (e.g., Twitter, PayPal), which will distort our TPL corpus establishment and decoupling process.