shows the relationship between the number of security smells and star ratings. Despite the number of stars, apps often suffer from three kinds of security smells. In particular, the star rating correlates negatively with the presence of security smells. We assume that the studied security smells are barely noticeable by end-users, hence they are not reflected in the ratings.

# Release date
We further studied whether the prevalence of security smells changes over time. In fact, with advances in developers support (e.g., tools, learning resources) we expected that security smells in more recent apps should be rarer than in older apps. Nonetheless, the result showed that neither the number of smells nor the likelihood of a particular smell relates to the release date of an app. Moreover, we noted that in general the security of apps with short update cycles is similar to those with longer update cycles. That is, either security issues in one release still remain in future releases, or they get fixed but new releases also introduce new smells.

# App Size
We were interested to know whether existence of security smells is ever related to the size of an app. Our investigation showed that an app may suffer from various kinds of security smells, despite its size. In fact, increase in app size may only increase the frequency of a security smell. It is also worth mentioning that some apps are larger not because of having more code but other resources such as image, video and audio content.

# B. Manual Analysis
To assess how reliable these findings are to detect security vulnerabilities, we manually analyzed 160 apps. For each smell, we inspected 20 apps manually and compared our findings to the result of the lightweight analysis tool. As is shown in Figure 8, the results were encouraging. The manual analysis completely agreed with the tool in the security risk associated with six security smells. In case of exposed clipboard the tool achieved a very good performance i.e., above 90% agreement with the manual analysis. The level of agreement in insecure network protocol and improper certificate validation was 80%. We realized some apps use http connections to exclusively load local contents which is legitimate in development frameworks like Apache Cordova or Adobe PhoneGap. And some apps implemented their own custom TrustManager which in fact was secure. Finally, our tool was unable to correctly detect the security risk associated with header attachment in 40% of cases, which is mainly due to the fact that discerning data sensitivity is non-trivial.

# Category
# C. Threats to Validity
We note several limitations and threats to validity of the results pertinent to our research. One important threat is the completeness of this study i.e., whether we could identify and study all related papers in the literature. We could not review all the publications, but we strived to explore top-tier software engineering and security journals and conferences as well as highly cited work in the field. For each relevant paper we also recursively looked at both citations and cited papers.

# 10
# HHHHX 1
Moreover, to ensure that we did not miss any important paper, for each identified issue we further constructed more specific queries and looked for any new paper on GoogleScholar.

We analyzed the existence of security smells in the source code of an app, whereas third-party libraries could also introduce smells.

We were only interested in studying benign apps as in malicious ones developers may not spend any effort to accommodate security. Thus, we merely collected apps which were available on official Google market. However, our dataset may still have malicious apps that evaded the security checks of the market.

Finally, the fact that the results of our lightweight analysis tool are validated against manual analysis performed by the authors is a threat to construct validity through potential bias in experimenter expectancy.

# Figures
# V. CONCLUSION
In contrast to all advances in software security, software systems are suffering from increasing security and privacy issues. Security in Android, the dominant mobile platform, is even more crucial as these devices often contain manifold sensitive data, and a security issue in a small home-brewed app can threaten the security of billions of users.

To fundamentally reduce the attack surface in Android, we promote the adoption of secure programming practices. We reviewed state of the art papers in security and identified 28 smells whose presence may indicate a security issue in an app. We developed a static analysis tool to study the prevalence of ten of such smells in 46,000 apps. We realized that despite the diversity of apps in popularity, size, and release date, the majority suffer from at least three different security smells. Moreover, the manual inspection of 160 apps showed that the identified security smells are actually a good indicator of security vulnerabilities.

# IV. RELATED WORK
Reaves et al. discussed Android specific challenges to program analysis and assessed android application analysis tools, and found that they mainly suffer from lack of maintenance, and are often unable to produce functional output for applications with known vulnerabilities . Li et al. studied the state-of-the-art work that statically analyses Android apps . They found that much of this work supports detection of private data leaks and vulnerabilities, a moderate amount of research is dedicated to permission checking, and only three studies deal with cryptography issues. Unfortunately, much state-of-the-art work does not publicly share their artefacts. Linares-Vasquez et al. mine 660 Android vulnerabilities available in the official Android bulletins and the CVE-details and present a taxonomy of their types; they report the presence of those vulnerabilities affecting the Android OS and acknowledge that most of them can be avoided by relying on secure coding practices . Finally, Sadeghi et al. review 300 research papers related to Android security, and provide a taxonomy to classify and characterize the state-of-the-art research in this area . They find that 26% of existing research is dedicated to vulnerability detection, but each study is usually concerned with specific types of security vulnerabilities. Our work expands on such studies to provide practitioners with an overview of the security issues that are inherent in insecure programming choices.

Some research is devoted to educating developers for secure programming. Xie et al. interviewed 15 professional developers about their software security knowledge, and realized that many of them have reasonable knowledge but do not adopt it as they believe it is othersâ€™ responsibility . Weir et al. performed open-ended interviews with a dozen app security experts, and identified that app developers should learn analysis, communication, dialectic, feedback and upgrading in the context of security . Witschey et al. surveyed developers about their reasons for adopting and not adopting security tools . Interestingly, they found the perceived prestige of security tool users and the frequency of interaction with security experts more important to promote security tool adoption..