Development Methodology. Focusing on the three development methodologies with the highest percentages of participants in our data: Waterfall (22%), Iterative (21%), and Agile development (47%), our analysis using Kruskal-Wallis tests with Bonferroni-correction showed that, contrary to previous literature , the development methodology did not significantly influence teams’ handling of software security. We did not find evidence that the development methodology influenced teams’ overall effort towards software security, nor did it influence their effort per development stage. In addition, it had no influence on software security strategies or deterrents to security. Our results indicated that the development methodology may influence knowledge or the unavailability of necessary tools, and (2) competing priorities & no plan, where security has a lower priority than other aspects of the software and the team lacks specific security plans or procedures.

# CHI 2019 Paper
# CHI 2019, May 4–9, 2019, Glasgow, Scotland, UK
Some security motivations, identifying with security importance (H (2) = 7, p < ), rewards (H (2) = 6, p < ), and perceived negative consequences (H (2) = 6, p < ). However, follow-up pairwise comparisons with Bonferroni-correction were not significant.

# Company Size
Following the classification used in North America , we classified participants’ companies into either Small and Medium Enterprises (SMEs) if the company had fewer than 500 employees, and Large Enterprises (LEs) otherwise. Our dataset contained 49 (40%) participants in SMEs and 74 (60%) in LEs.

Using Mann-Whitney tests, we found no evidence that the company size influenced the percentage of effort on software security, overall or per development stage. In addition, it did not influence participants’ software security strategies.

However, our results show a significant difference in security motivations between SME and LE participants. Being in a workplace environment that nurtures security was more motivating for participants in LEs, compared to those in SMEs (U = 861, n = 76, p < 0, r = −0).

Our results also show that deterrents to software security vary significantly with company size. Specifically, having competing priorities & no plan is significantly more common deterrent to security for participants in SMEs compared to those in LEs (U = 1345, p < 0, r = −0). Likewise, being unequipped for security is a significantly more common deterrent to security for SME participants compared to their counterpart (U = 1413, p < 0, r = −0).

We also performed post-hoc analysis to explore further effects of company size, e.g., whether it had an effect on participants’ behaviours and attitudes towards software security, or whether the company experienced security issues. All the tests were not significant, e.g., we found no difference between SME and LE participants in considering that their applications are interesting targets for attackers (U = 1552, n = 123, p = 0).

# Test-Driven Development (TDD)
Out of the characteristics explored, TDD most influences software security.

Our results show that efforts directed towards software security are influenced by whether the team performs TDD. Participants who perform TDD spend significantly more overall effort on security than those who do not perform TDD (U = 905, n = 114, p < 0, r = −0). Focusing on each SDLC stage, TDD participants spend significantly higher efforts towards security during code analysis than their counterparts (U = 554, n = 114, p < 0, r = −0).

We also found that adopting TDD influences software security strategies. TDD participants rely significantly more on company-wide engagement (U = 397, n = 80, p < 0, r = −0) and on their own personal strategies (U = 506, n = 80, p < 0, r = −0) to handle software security than participants who do not perform TDD.

Finally, our results show that TDD participants are not significantly different than those who do not perform TDD when it comes to security deterrents and the majority of security motivators. However, we found that rewards is a more significant security motivator to TDD participants compared to their counterparts (U = 453, n = 68, p < 0, r = −0).

# 7 DISCUSSION
Many participants indicated their companies faced security issues, including security breaches. This could be because functionality and on-time shipping were prioritized and security was postponed. In fact, seven participants who reported vulnerabilities in shipped code indicated that when deadlines approach, they ship their code with a backdoor to address the security issues later. This behaviour is clearly troubling.

However, in general, our results are promising for software security. Whereas previous research  found that developers generally exhibit a “security is not my responsibility” attitude, the vast majority of our participants acknowledge the importance of software security and have specific procedures in place to address it. The few participants who indicated security is not important for their teams indicated that their software is not an interesting target to attackers. We do not imply that completely ignoring security is acceptable, but rather consider the possibility that these teams may be making an educated economic decision, having assessed the risk and found that it was negligible.

In addition, our participants appear to have a general understanding of what software security means, and they acknowledged that their applications may have security issues despite their efforts. It is interesting that some participants (n = 33) indicated that security is important for their teams and that they are satisfied with how they are handling software security, but also indicated that their software is likely vulnerable. We did not expect this combination. One explanation could be that participants were being pragmatic; there will always be security issues and you can never prove security . Another explanation could be that participants are satisfied that they are doing their best to ensure security given their circumstances, even if it may not be ideal or enough. Previous research  discussed that a lack of resources may discourage teams from addressing security or following security best practices. In our work, we found evidence that the lack of resources may be why participants believe that their applications are vulnerable, despite being satisfied with their practices. For example, 45% (15 of 33) of participants displaying this interesting combination indicated they lack at least one of: knowledge, awareness, budget, tools, time, and people-power to handle software security. In addition, the lack of security plans and resources were also reasons for deferring security at SMEs. These are reasonable reasons that may prevent teams or developers from focusing.

# CHI 2019 Paper
# CHI 2019, May 4–9, 2019, Glasgow, Scotland, UK
on software security. By identifying these deterrents, we can better focus our efforts on overcoming them, e.g., through providing better support for teams to devise security plans that fit their resources and work styles.

In general, our participants were self-motivated towards their work, as well as software security. Being a hard and cognitively demanding task , software security would likely benefit from developers’ self-motivation. Research showed that this type of motivation leads to better performance, engagement, and cognitive abilities . Thus, rather than relying mainly on external motivations (e.g., rewards), companies could focus their efforts on promoting internal motivations towards software security (e.g., by portraying security as their collective professional responsibility, and raising developers’ awareness of the implications of their code on their users and their company’s reputation). However, we should not expect developers to take on the challenge without adequate support. In addition to security tools and methodologies, developers should receive support within their workplace. For example, companies can work towards establishing security plans to guide developers’ security efforts. Companies and teams can also facilitate collaboration between developers and security experts. This collaboration can bridge the gap between the two groups , and would enable developers gain practical security experience which can improve their code.

# 8 LIMITATIONS
Conducting the survey online may have influenced data quality, but we took measures to filter out poor quality responses. The different methods of recruitment and compensation helped reach a broad range of participants, though, this difference may have influenced developers’ willingness to answer the survey. Our results are based on participants’ self-reported responses, which may be subject to bias and may not exactly represent real-life. However, we followed recommendations to reduce social-desirability bias by ensuring participants’ anonymity . The lists of software security strategies, motivations, and deterrents included in our survey are non-comprehensive. However, our lists reflect at least a subset of existing developers’ strategies, motivations and deterrents to software security.