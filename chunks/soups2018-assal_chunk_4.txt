Our study also revealed the following incident which illustrates how Vulnerability discovery can motivate secu-
USENIX Association Fourteenth Symposium on Usable Privacy and Security 285
# 4 Developer testing stage
Across the vast majority of our participants, whether adopters or inattentive, security is lacking in the developer testing stage. Functionality is developers’ main objective; they are blamed if they do not properly fulfil functional requirements, but their companies do not hold them accountable if a security vulnerability is discovered. P-T7 said, “I can get away with [introducing security bugs] but with other things like just your day-to-day developer tasks where you develop a feature and you introduce a bug, that kind of falls under your responsibility. Security doesn’t.” Thus, any security-related efforts by developers are viewed as doing something extraordinary. For example, P-T2 explained, “If I want to be the hero of the day [and] I know there’s a slight possible chance that these can be security vulnerabilities, [then] I write a test and submit it to the test team.” We grouped participants’ approaches to security during this stage into four categories.

Developers do not test for security. (SA/SI) The priority at this stage is almost exclusively functionality; it increases in scope until the developer is satisfied that their code is fulfilling functional requirements and does not break any existing code. And even then, these tests vary in quality. Some developers perform adhoc testing or simply test as a sanity check where they only verify positive test cases with valid input. Others erroneously, and at times deliberately, test only ideal-case scenarios and fail to recognize worst-case scenarios. The majority of developers do not view security as their responsibility in this stage; instead they are relying on the later SDLC stages. P-T2 said, “I usually don’t as a developer go to the extreme of testing vulnerability in my feature, that’s someone else’s to do. Honestly, I have to say, I don’t do security testing. I do functional testing.” The participant acknowledged the importance of security testing, however, this task was considered the testing team’s responsibility as they have more knowledge in this area.

Security is a priority during developer testing. (SA) As an exception, our analysis of P-T14’s interview indicates that his company culture emphasizes the importance of addressing security in this stage. His team uses both automated and manual tests to ensure that their application is secure and is behaving as expected. P-T14’s explained that the reason why they prefer to incorporate security in this stage was that it is more cost efficient to address security issues early in the SDLC. He explained, “We have a small company, so it’s very hard to catch all the bugs after release.”
Developers test for security fortuitously. (SA) In other cases, security is not completely dismissed, yet it is not an explicit priority. Some security adopters run existing test suites that may include security at varying degrees. These test suites include test cases that any application is expected to pass, however, there is not necessarily a differentiation between security and non-security tests. Some developers run these tests because they are required to, without actual knowledge of their purpose. For example, P-T3 presumes that since his company did not have security breaches, security must be incorporated in existing test suites. He explained, “[Security] has to be there because basically, if it wasn’t, then our company would have lots of problems.”
Developers’ security testing is feature-driven. (SI) In another example where security is not dismissed, yet not prioritized, one participant from the security inattentive group (out of the only two who perform security testing), considers that security is not a concern as his application is not outward facing, i.e., it does not involve direct user interaction. P-T9 explained, “Security testing [pause] I would say less than 5%. Because we’re doing embedded systems, so security [is] pretty low in this kind of work.” While this may have been true in the past, the IoT is increasingly connecting embedded systems to the Internet and attacks against these systems are increasing . Moreover, classifying embedded systems as relatively low-risk is particularly interesting as it echoes what Schneier  described as a road towards “a security disaster”. On the other hand, P-T4 explained that only features that are classified as sensitive in the design stage are tested, due to the shortage in security expertise. As the company’s only developer with security background, these features are assigned to P-T4. Other developers in T4 do not have security experience, thus they do not security-test their code and they are not expected to.

# 4 Code analysis stage
Eight developers reported that their teams have a mandatory code analysis stage. Participants from the security adopters group mentioned that the main objectives in this stage is to verify the code’s conformity to standards and in-house rules, as well as detect security issues. On the other hand, participants from the security inattentive group generally do not perform this stage, and rarely for security.

Security is a priority during code analysis. (SA) All security adopters who perform this stage reported that security is a main component of code analysis in their team. T5 mandates analysis using multiple commercial tools and in-house tools before the code is passed to the next stage. T3 has an in-house tool that automates the process of analysis to help developers with the burden of security. P-T3 explained, “[Our tool] automatically does a lot of that for us, which is nice, it does static analysis, things like that and won’t even let the code compile if there are certain requirements that are not met.” One of the advantages of automating security analysis is that security is off-loaded to the tools; P-T3 explains that security “sort of comes for free.”
Security is a secondary objective during code analysis. (SI) P-T2 explained that in his team, developers’ main objective when using a SAT is to verify conformity to industry standards. Although they might check security warnings, other security testing methods are considered more powerful. P-T2 explained, “[SAT name] doesn’t really look at the whole picture. [...] In terms of: is it similar to a security
vulnerability testing? No. Pen testers? No. It’s very weak.” In addition to the lack of trust in SATs’ ability to identify security issues, and similar to previous research (e.g., ), our participants complained about the overwhelming number false positives and irrelevant warnings.

Developers rarely perform code analysis, never for security. (SI) Code analysis is not commonly part of the development process for the security inattentive group. According to their developers, T2, T6, and T15 use SATs, but not for security. Code analysis is performed as a preliminary step to optimize code and ensure readability before the code review stage, with no consideration to security.

Reasons for underusing SATs were explored in other contexts . The two main reasons in our interviews were that their use was not mandated or that developers were unaware of their existence. We found that Developers vary in awareness of analysis tools. (SI) In addition to those unaware, some developers use SATs without fully understanding their functionality. P-T10 does not use such tools since it is not mandated and his teammates are unlikely to do so. He said, “I know that there’s tools out there that can scan your code to see if there’s any vulnerability risks [...] We are not running anything like that and I don’t see these guys doing that. I don’t really trust them to run any kind of source code scanners or anything like that. I know I’m certainly not going to.” Despite his awareness of the potential benefits, he is basically saying no one else is doing it, so why should I? Since it is not mandatory or common practice, running and analyzing SATs reports would add to the developer’s workload without recognition for his efforts.

# 4 Code review stage
Most security adopters say that security is a primary component in this stage. Reviewers examine the code to verify functionality and to look for potential security vulnerabilities. P-T14 explained, “We usually look for common mistakes or bad practices that may induce attack vectors for hackers such as, not clearing buffers after they’ve been used. On top of that, it’s also [about the] efficiency of the code.” Contrarily, the security inattentive discount security in this stage—security is either not considered, or is considered in an informal and adhoc way and by unqualified reviewers.