Client-drawn and server-drawn buffer design. There are two types of compositing window manager design, as shown in Fig. 1. In this figure, client and server refer to an application and the window compositor respectively. In the client-drawn buffer design, the applications draw window content to off-screen buffers, and use IPC to communicate these buffers with the server, where the final image is composited and written to the frame buffer. This design is very popular and is used in Mac OS X, iOS, Windows, Android, and Wayland for the future Linux . In the server-drawn buffer design, the main difference is that the off-screen buffers are allocated and drawn by the window compositor instead of by the applications. Applications send commands to the window compositor to direct the drawing process. Only the X window system on the traditional Linux and Mir for the future Linux  use this design.

Both designs have their advantages. The client-drawn buffer design provides better isolation between applications, more flexible window drawing and more balanced overhead between the client and the server. For the server-drawn buffer design, the server has control over all applications’ window buffers, which is better for centralized resource management. Interestingly, some prior work choose the former to enhance GUI security , but we find that it actually enables our attacks (shown in §3).

# 2 Background: Android Activity and Activity Transition
In Android, the UI state our attack infers is called Activity. An Activity provides a user interface (UI) for user in-
1 For traditional Linux the server is an X server, and the window compositor is a separate process talking to the X server. In Fig. 1 we refer to the combination of them as the window compositor.

# Draw Off-screen
# Off-screen
# Off-screen
# 1 SendMoney
# 2 Choose
# 3
# App1
buffer 1 IPC Final App1 IPC buffer 1 buffer 2 Final Activity Recipient AddRecipient
image Draw Drawimage Activity 4 Activity
# App2Draw
Off-screen IPC Window Frame App2IPC Frame
7
Window compositor SendMoney 6 5
buffer 2 compositor buffer buffer
Draw Verification Activity ChooseRecipient NotificationActivity
# App3Draw
Off-screen IPC IPC
App3 Off-screen
buffer 3 (a) (b)
Client refers to the application, and server refers to the window compositor.

Interactions, and is typically a full-screen window serving as a functionality unit in Android. We denote Activities as a, b, ..., and the set of Activities for an app as A. Due to security concerns, by default apps cannot know which Activity is currently shown in the foreground unless they are the owners or the central Activity manager.

An Activity may display different content depending on the app state. For instance, a dictionary app may have a single “definition” Activity showing different texts for each word lookup. We call these distinct displays View-States, and denote the set of them for Activity a as a.V S.

# Activity transition
In Android, multiple Activities typically work together and transition from one to another to support the functionality of an app as a whole. An example is shown in Fig. 2. During a typical transition, the current foreground Activity pauses and a new one is created. A Back Stack storing the current and past Activities is maintained by Android. To prevent excessive memory usage, at any point in time, only the top Activity has its window buffer allocated. Whenever an Activity transition occurs, the off-screen buffer allocation for the new Activity window and the deallocation for the existing Activity window take place.

Activity transitions can occur in two ways: a new Activity is created (create transition), or an existing one resumes when the BACK key is pressed (resume transition), corresponding to push and pop actions in the Back Stack. Fig. 3 shows the major function calls involved in these two transition types. Both transition types start by pausing the current foreground Activity, and then launching the new one. During launch, the create transition calls both onCreate() and onResume(), while the resume transition only calls onResume(). Both onCreate() and onResume() are implemented by the app. After that, performTraversal() is called, in which measure() and layout() calculate the sizes and locations of UI components, and draw() puts them into a data structure as the new Activity UI. Finally, the create transition pushes the new Activity into the Back Stack and stops the current one, while the resume transition pops the current one and destroys it.

# Activity transition graph
Immediately after a transition, the user lands on one of the ViewStates of the new Activity, which we call a LandingState. We denote the set of LandingStates for Activity a as a.LS, and a.LS ⊆ a.V S. Individual LandingStates are denoted as a.ls1, a.ls2, .... Activity transition is a relationship a.V S → b.LS, a, b ∈ A. As the ViewState before the transition is not of interest in this study, we simplify it to a → b.LS, which forms the graph in Fig. 4. Note that our definition is slightly different from that in previous work as the edge tails in our graph are more fine-grained: they are LandingStates instead of Activities.

# 2 Attack Overview
Our proposed UI state inference is a general side-channel attack against GUI systems, aimed at exposing the running UI state of an application at the window level, i.e., the currently displayed window (without knowing the exact pixels). To achieve that, the attack exploits a newly-discovered shared-memory side channel, which may exist in nearly all popular GUI systems used today (shown in §3). In this paper, we focus on the attack on the Android platform: Activity inference attack. We expect the technique to be generalizable to all GUI systems with the same window manager design as that in Android, such as the GUI systems in Mac OS X, iOS, Windows, etc.

# Threat model
We require an attack app running in the background on the victim device, which is a common requirement for Android-based attacks. To ensure stealthiness, the app should be low-overhead, not draining the battery too quickly. Also, as the purpose of permissions is to alert users to privacy- or security-invasive apps, the attack should not require any additional permissions besides a few very common ones, for example the INTERNET permission.

USENIX Association 23rd USENIX Security Symposium 1039
Solid and dotted edges denote create and resume transitions respectively.

# General steps.

As shown in Fig. 5, Activity inference is performed in two steps:
1. Activity transition detection: we first detect an Activity transition event, which reports a single bit of information on whether an Activity transition just occurred. This is enabled by the newly-discovered shared-memory side channel. As shown later in §3, the change observed through this channel is a highly-distinct “signal”.

2. Activity inference: upon detecting an Activity transition, we need to differentiate which Activity is entering the foreground. To do so, we design techniques to train the “signature” for the landing Activity, which roughly characterizes its starting behavior through publicly observable channels, including the new shared-memory side channel, CPU utilization time, and network activity (described in §4).

Finally, using our knowledge of the foreground Activity in real time, we develop novel attacks that can effectively steal sensitive user input as well as other information as detailed in §6, §7 and §8.

# 3 Shared-Memory Side Channel and Activity Transition Detection
In this section, we first report the newly-discovered side channel along with the fundamental reason for its existence, and then detail the transition detection technique.

# 3 Shared-Memory Side Channels
As with any modern OS design, the memory space of an Android app process consists of the private space and the shared space. Table 1 lists memory counters in /proc/pid/statm and their names used in the Linux command top and the Linux source code. Inherited from Linux, these counters can be freely accessed without any privileges. With these counters, we can calculate both the private and shared sizes for virtual memory and physical memory. In this paper, we leverage mm->shared_vm and file_rss as our shared-memory side channels, the former for virtual memory and the latter for physical memory. For convenience, we refer to them as shared vm and shared pm. In this section, we focus on using shared vm to detect Activity transition events. In §4, we use both shared vm and shared pm to infer Android Content Provider usages in the Activity inference, which is another use case we discovered.

# 3 Android Window Events and Shared-Memory Side Channel
We find that shared vm changes are correlated with Android window events. In this section, we detail its root cause and prevalence in popular GUI systems.