We further used the results of the analysis to attribute SPU to app developer and library code. To this end, we checked for each permission mentioned in the review whether the permission-protected API usage in the subsequent version is exclusively located in app code, library code, or used in both app and library. We found that in only 17% (72) of cases the permission-protected APIs were exclusively used by app code, while in 48% (206) of cases the APIs were exclusively used.

5 2
Authorized licensed use limited to: IEEE Xplore. Downloaded on August 08, 2024 at 04:00:52 UTC from IEEE Xplore. Restrictions apply.

by library code. In the remaining 144 cases the permissions were used by both the application and the included libraries.

# C. SPR to SPU Mapping
In this section, we report the results of mapping SPR to SPU and discuss factors that may influence the results.

# a) Mapped SPR to SPU:
We are able to unambiguously map 4,898/5,527 SPR to the affected app versions. Only 629 SPR (11%) could not be mapped back to the affected versions, because the review was posted before 2012 for which we could not recover app upload dates. For 3,359/4,898 SPR (68%) we could map the SPR to SPU identified in one of the subsequent app versions. For the remaining 1,539 SPR, we could not detect security and privacy relevant changes in app updates. Figure 12 shows the distribution of the app version distance from SPR to detected SPU for the set of 3,359 SPR. In 76% of the cases we can observe SPU in the app version immediately following the SPR. If we consider the interval from one to five versions, this value increases to 94%. The likelihood that SPU in an app version x were triggered by the SPR gradually decreases with the number of new app versions released between SPR and version x and other external factors may have triggered the SPU instead.

# b) SPU without SPR:
To evaluate to which extent our classifier misses SPR, we generate a backward mapping from SPU to reviews. For the 5,994 SPU our static code analysis found, 2,666 changes were observed without the presence of any review and 1,488 changes could be mapped to SPR. This leaves 1,840 SPU without SPR. Other reasons include external factors, such as updated libraries, internal code reviews, and developer notifications via different channels such as email.

# c) SPR without SPU:
To further validate our approach, we also seek to find answers for the cases in which we identify SPR but no SPU in the subsequent app versions. When excluding the SPR that could successfully be mapped to SPU (3,359) and the SPR that were posted prior to 2012 (629), this leaves 1,539 SPR for which we could not detect SPU. Reasons for this include: 1) Replies to reviews in which the developers explains the necessity of permissions or acknowledges the report without modifying the application. In these cases, no SPU are to be expected. 2) Limitations of our static analysis, e.g., LibScout can detect about 205 popular libraries, but there might exist more libraries that could have an effect on the security and privacy of an application. In addition, our analyzer checks for permission-protected APIs only. This misses permission-protected content providers such as Contacts for which an additional API argument analysis would be necessary. 3) The app is no longer maintained. To investigate why developers did not respond—neither with SPU nor replies—we check whether developers still update their apps after an SPR was posted. To this end we consider an app no longer maintained if its last version is older than one year starting from the day our crawler checked the latest version of the app). This threshold is reasonable since prior work ,  has shown that most apps—in particular top apps—release updates biweekly or monthly. We found 728/1,539 (47%) SPR belonging to 244 unmaintained apps. Since these apps are still available on Play, they receive new reviews but new updates should not be expected.

# D. Summary of Findings
We briefly summarize our findings from the empirical analysis. We first crawled 4M reviews for 1,269 distinct apps and identified 5,527 SP related reviews (SPR), out of which 2,898 SPR could be mapped to permissions. With our static code analysis we could identify 5,994 SPU in app versions following an SPR. In 60% of cases, we could successfully map SPR to SPU. If we consider corresponding SPU (changes to 3,359 SPR) and replies (273) as responses from developers and exclude SPR of unmaintained apps (728), we can calculate the developer response rate (RR) to SPR as follows:
#SPR with SPU + #SPR with replies
RR =    #SPR − #SPR of unmaintained apps        = 75%
Despite a small overall number of SPR compared to the total number of reviews and the limited number of allowed text (350 characters), we can observe that these short texts are an effective means to trigger fast responses from developers. In almost 76% of cases, the app developer responded to a SPR.

# V. M ODELING S ECURITY AND P RIVACY U PDATES
To examine the impact of different factors on Android application updates (SPU and non-SPU), we conducted multiple
5
Authorized licensed use limited to: IEEE Xplore. Downloaded on August 08,2024 at 04:00:52 UTC from IEEE Xplore. Restrictions apply.

regression models that predict whether an app update will be security-/privacy-related or not. Our models include the effects of user reviews, user rating, app’s permission mechanism (install-time or runtime), developer reply ratio, and app category. To account for possible effects of multiple updates of the same application, we use mixed models in which the updates are attributed to their application (i.e., nested data) and include random effects by allowing the intercepts to vary at application level but aggregating them over all applications. We compared a model with random effects against a model without random effects, and our results show that the model with random effects is significantly superior in its predictions.

Data set: From the collected app history, static analysis results, and the identified SPR we built a data set of app updates (including both SPU and non-SPU). In this data set, we consider every change between two app version codes for which at least one review is available as a data point for our regression model, which yields 15,835 data points in total (12,540 non-SPU and 3,295 SPU) when excluding the ”Comics” and ”Libraries and Demo” categories since they only have one and three apps, respectively. We consider the following variables for every data point (i.e., app update) as predictors in our regression models:
- SPR ratio: ratio of SPR over the total number of reviews
- Average score: average rating score that the corresponding app version received since the last app update
- Permission mechanism: permission mechanism (runtime or install-time) used by the app version
- App category: as defined in Google Play
- Reply ratio: the ratio of developer replies over the total number of reviews since the previous app version
We consider SPR ratio and average score to be user variables, while permission mechanism, app category, and reply ratio are app variables. To account for SPR and average score that can potentially have an impact on later versions of the app but not the immediate version (see Section IV-C), we included the impact of SPR and average score of the previous versions within the version distance into the final SPR ratio and final average score, respectively. The version distance between a version (version) that has the SPR ratio and average score, and the version that is being considered (version<j>) is calculated by the number of versions between version and version<j> for the analysis. Version is here a preceding version of version<j>. The final SPR ratio and final average score of the currently being considered version are the cumulation of all of the previous SPR ratios divided by their corresponding version distance, and the cumulation of all previous average scores divided by their corresponding version distance, respectively.

# A. Correlation Analysis
Since the coefficient estimates of mixed models can be unstable and difficult to interpret if the model has multicollinear variables, we first performed a correlation analysis of the independent variables, such as ratio of SPR over total reviews, reply ratio, and average score. The analysis showed that there is no significant multicollinearity between any variables of SPR ratio, reply ratio, average score in our data set. We did not include a variable that accounts for the SPU location, i.e, whether security and privacy issues mentioned in an SPR were located in application code or library code, since this variable is derived from SPRs, which would violate the requirement for regression analysis that predicting variables must be measured independently. In our data set, the location of those issues are completely dependent on SPRs, which is already represented by the SPR ratio variable. We therefore excluded such a location variable from our model.