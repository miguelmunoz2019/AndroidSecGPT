# Storing Access Token on Client Device
OA UTH L INT identified 21 applications that stores plain (i.e., unencrypted) access token in Android SharedPreferences. Access tokens are portable, which means an access token obtained from a relying party application can also be used from any client, server or otherwise. Hence, if malicious attackers retrieve the access token from a client device, they can use it from a different machine to launch an impersonation attack. Storing sensitive access token in insecure SharedPreferences gives partial security, as data stored in SharedPreferences can be easily accessed by any applications or user from a rooted device or emulator. Android provides a KeyStore system to enhance the security for storing such sensitive information such as access token.

# Sending Raw Access Token to Server
Right after obtaining the access token at the authorization endpoint, relying party application should send the access token to their backend server in order to exchange it for user’s resources (i.e., user id). However, to this end, relying party server should not trust data received from the application. A malicious attacker could modify the application to tamper the access token and hence, initiate an impersonation attack to the relying party server. OA UTH L INT identified 17 applications that send the plain access token to the relying party server.

Finally, we note that the analysis in OA UTH L INT is precise. As shown in Table II, the average false positive rate is 10%. We manually inspected the false alarms and confirmed that most of them are caused by the imprecision of the pointer analysis and call-graph construction.

TABLE II: OAuth vulnerabilities in top android applications
TABLE III: Statistic of top OAuth APIs in our evaluation
# C. Case Studies
# CBS Sports
To estimate the impact of vulnerable implementations of OAuth, we manually inspected the applications that were reported as vulnerable by OA UTH L INT. CBS Sports  is one of the most popular applications in U.S. for top sports news, scores, and videos. According to Google Play, this application was installed more than 10 millions times. This application got flagged by OA UTH L INT for three reasons. First, it bundles the twitter consumer key and consumer secret within the application code, which makes it vulnerable for impersonation attack with the authorization transactions of OAuth. Secondly, it uses an embedded WebView for OAuth transactions between relying party application and service provider. Currently, there exists no secure way for the web-based service provider to deliver the sensitive OAuth data to the honest relying party application. Hence, using WebView for OAuth transactions makes it very difficult for the service provider to determine the identity of the CBS Sports application. Thirdly, the application uses client-side API calls to authenticate new users. Client device must not be trusted during the OAuth transactions for authentication since corresponding API calls could be tampered by malicious users.

# Topface
We also performed a thorough inspection with Topface , one of the most popular social application in Google Play. This application allows users to meet new people online and was installed more than 10 million times. However, Topface provides authentication using OAuth for various service providers including Google, Facebook, Instagram, and Vkontakte. The application was flagged by OA UTH L INT for several reasons. Even though it provides secure intent-based OAuth transactions for Google and Facebook, it uses WebView for both authorization and authentication transactions for Instagram and Vkontakte. More importantly, it performs all API call for OAuth transactions from client-to-server instead of server-to-server call, which allows a malicious user to tamper sensitive information such as access token and user id. The application also stores plain access token, user id and email address in the SharedPreferences without doing any encryption. Storing these sensitive information in SharedPreferences gives partial security since any data stored in SharedPreferences can be easily accessed from any rooted devices and emulators.

# VII. RELATED WORK
Since OAuth is a critical protocol for authentication and authorization, many researchers have studied the implementation of OAuth and discovered many prominent attacks for web applications –. In recent years, mobile developers also use OAuth to build authentication or authorization schemes, and they have many misunderstandings of the security implications of OAuth. Researchers also did field studies to identify the vulnerabilities due to the implementation errors of OAuth in mobile apps. Chen et al.  present a comprehensive study on implementation errors and misunderstandings regarding OAuth protocols in mobile applications. Their study also shows that over 60% of mobile OAuth implementations have at least one vulnerability. Also, Shehab et al.  analyze source codes of Android applications and demonstrate possible attacks in OAuth implementation. However, these studies depend on dedicated manual analysis by security experts such as inspecting the network traffic and inferring the protocol flows and cannot be scaled to large-scale studies. Furthermore, researchers also studied user’s privacy risks during OAuth transactions . Comparing to these works, our system is designed to automatically identify the vulnerabilities of mobile OAuth implementations efficiently and effectively.

Realizing that OAuth is a critical problem, researchers also propose solutions to improve the security of OAuth. For example, Yang et al.’s work  is the most relevant one, they build an automatic testing tool using symbolic execution to check the correctness of 10 popular OAuth SDKs and identified 7 vulnerabilities. In comparison, our study focuses on the implementation errors of the relying party because the developers of the relying parties are more easily to misunderstand OAuth and make mistakes comparing to the developers of popular SDKs. Researchers also propose to run automatic traffic analysis to identify OAuth implementation errors , however, this kind of approach will fail to point out the details of the implementation errors. Compared to their work, OAUTH LINT can identify the details of the implementation errors, which is very helpful for the developers to fix the security issues. Wang et al. propose a tool that combines static analysis and network analysis to identify OAuth bugs, however, their tool is semi-automatic and requires manual work to identify the vulnerabilities . Applying formal analysis to the OAuth protocols is also another way to improve the security of the protocols –. However, though these papers elegantly model the OAuth protocol, the level of abstraction in these papers make it difficult to detect implementation errors.

# VIII. BEST SECURITY PRACTICE FOR OAUTH RELYING PARTY
According to our analysis, 101 of the OAuth relying party implementation suffers from at least one vulnerability. We hope this study can help to provide more guidelines for the mobile OAuth developers, especially for the relying party developers.

For securing the OAuth protocol, there are two general major points: (1) be aware that the security of OAuth partially lies in its access token delivery methodology; (2) never trust the mobile client because it might belong to a malicious user who can access the secret data and temper the verification results or data. For example, if developers are developing OAuth 2 in Android, instead of using the default Intent scheme to deliver the access token, they should use the developer key hash in order to check the identity of the party that receives the token. If developers are developing OAuth 1, they also need to make sure they can verify the token receiver’s identity correctly. The relying party should never bundle the developer’s consumer secret and consumer key into its mobile app because a malicious user can just extract the secret and key from the app and pretend to be the relying party to access user data.

For using OAuth to do authentication, the relying party needs to be more careful about dealing with the users. First, the relying party must not bundle any security related protocol logic (e.g., security checks) or any sensitive information (e.g., the token) into its own mobile application. Second, the relying party must assume that the attacker could tamper with any data sent from the users device. Because of this, the relying party must check that the relying party receiving the users ID in the last step of the protocol is the same relying party that the user intends to authenticate to. For example, instead of using the default implicit flow of OAuth 2 for authentication, the relying party should do an additional verification step such as described in the appsecret proof flow of Facebook OAuth guidelines.