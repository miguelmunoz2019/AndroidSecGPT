To send the data using a stream, one of the communication sides issues the WRITE command with the suitable stream identifier and the content which should be written to that stream. The recipient of such a message passes the data to the suitable dispatcher and then replies with the READY message. In order to close the data stream one of the communication sides has to issue the CLOSE message. An example of the typical message flow during the shell access has been illustrated in Fig. 8. Thanks to such data streams abstraction, the ADB protocol is very flexible and allows to implement even quite complex mechanisms like application debugging or sensors emulation.

This type of attacks aims at taking over the control of the USB host machine. We can distinguish three subgroups of such attacks.

The first group utilizes vulnerabilities in the high level system infrastructure related to support of the USB mass storage devices. The archetypal example of such a threat is Conficker , which was targeting mostly Windows machines. To infect the victim, Conficker used autorun files which had been automatically executed by Windows whenever new removable medium was mounted. Another and probably the most recognizable representative of this group is Stuxnet (Nicolas Falliere and Chien, 2011). Its targeted victims were PLC controllers manufactured by Siemens, however, as most of them were typically isolated from the global network, Stuxnet needed a way to get into private networks. Thus it infected Windows machines using custom-crafted content of the USB flash drive. The exact infection method was similar as in Conficker but included also new vulnerabilities like CPLINK (cpl, 2010). A lot of vulnerabilities of this type have been collected and described by Larimer (2011).

Both Stuxnet and Conficker used USB flash drives only as just a kind of transport medium for the exploit itself. They did not interfere with the USB traffic directly but only placed malformed files on the removable media. That is why, now they are likely to be detected by most of the anti-virus software as they are not that much different than other malware which spreads over the Internet.

The second group of the USB host-focused attacks uses vulnerabilities in the USB stack implementation. A good example of such attacks has been presented by Barral and Dewey (2005) during BlackHat Conference in 2005. They found a buffer overflow vulnerability in Windows 2000 and Windows XP USB stack that allowed to take control over a locked machine. As this is a kernel-level vulnerability it can be used to install malicious code bypassing SELinux and all other types of kernel-side protection mechanisms. Currently USB stacks are
# Computers & Security 82 (2019) 80–98
More resistant to such attacks. There are even fuzzers (uma, 2013; fac, 2017) available which help to find vulnerabilities in the inspected USB implementation.

Finally, the third group of attacks abuses Plug & Play philosophy which is one of the USB principles. This group of attacks became known thanks to the presentation by Karsten Nohl and Lell (2014) during BlackHat Conference in 2014. These attacks are based on a fact that much of the USB devices’ logic is implemented in the firmware which can be replaced. It turned out that many USB devices are being shipped to the market with unlocked and unverified firmware upgrades. This, in turn, allows malware to replace firmware in, e.g., a pendrive (Karsten Nohl and Lell, 2014) or a mouse  and makes them behave like some other, malicious device, e.g., a keyboard or a network card. Unfortunately, users do not realize that there is no relationship between physical appearance of the device and provided functionality and they often plug in devices even if found on a street . Most of attacks in this group utilize only USB HID protocol to execute commands as currently logged in user. But as Kamkar (2016) proved by publishing PoisonTap tool it is also possible to exfiltrate hashes containing user password from the Windows-based machine and crack them to bypass the lockscreen. As Wang and Stavrou (2010) showed, mobile devices can be also used to prepare this kind of attack. There is also a Kali Linux NetHunter toolset (kal, 2017) which is prepared for the Nexus and OnePlus devices which also enables them to be used for the BadUSB-like attacks. It is also worth mentioning that not only smartphones or off-the-shelf USB devices can be used for such attacks. As Mengs proved by publishing P4wnP1 toolset  also a very cheap single-board computer dedicated for IoT (Raspberry Pi Zero in this case) can be extremely handy for the attacker purposes. Such a modified pendrive or a mobile device stays undetected by the anti-virus software and may covertly insert keyboard keystrokes to execute custom commands on a victim machine. To the authors’ best knowledge, currently there is no perfect method of protection against such attacks. The most popular approach implemented, for example, in usbguard  is to ask user for the explicit confirmation to use each new USB device.

It is worth emphasizing that USB can be used not only to take over the control over the host machine but also to exfiltrate data. Many machines which store valuable data (for example BitCoins) are disconnected from the Internet but still they provide USB host capabilities. Obviously in this case the attacker can just use a simple pendrive to store the data but this may be monitored or event restricted by OS policy. That is why there is a need to create a secret communication channel which allows stealthier data exfiltration.

# 4. USB traffic analysis, modification and injection attacks
This type of attacks aims at discovering user password or at modification of the USB traffic to abuse functionality expected by the user.

The first subgroup of these attacks includes passive keyboard keystrokes listeners. Such attacks typically consist of a relatively simple and small hardware which is only capable of passively recording Human Interface protocol which is sent over the USB. These hardware keyloggers are intentionally placed in the public places like it was done in a library in Manchester (man, 2011) or at school in California . This type of device is usually utilized to obtain users’ credentials which are being entered from the USB keyboard.

The second subgroup of such attacks is able to perform an active Man-in-the-Middle (MitM) attacks. Thus they are not only listening to the USB communication but are also able to modify it before reaching the host. To the authors’ best knowledge there is no evidence that currently malware is spreading using this attack vector but due to the lack of any security mechanism it may be utilized by military and/or government agencies (usb, 2008). This kind of attack may include a simple modification of the data being sent between the host and the device. A good example of such an attack would be to replace the last digit in One Time Password (OTP). This means that from a user perspective an authentication fails but at the same time the attacker can reuse the original OTP to authenticate his own session. In result, an injection of some USB messages is possible. An attacker is not only able to modify messages but he is also capable to inject ones, too. An example of this attack would be to inject some custom keystrokes after detecting that the user has logged in as a root. Finally, such attacks can involve additional USB device emulation. Thus the attacker may not only be influencing the USB-related traffic but he is also able to inject some additional USB devices to the system. A good example of this scenario would be to hide some USB device and a radio transceiver within the USB hub to exfiltrate the confidential data in a wireless manner.

Currently there are also a couple of tools available which can be used to prepare such attacks. TURNIPSCHOOL (tur, 2015; Dominic Spill and Boone, 2015) project aims to recreate NSA device which description was published by WikiLeaks. It is a very small board which easily fits into the standard USB connector. It is equipped with a USB hub and a chip which allows to emulate some custom USB device while the user device is still visible to the system. Moreover, it has also built-in radio transceiver to enable wireless communication.

Another example is BadUSB 2 introduced by Kierznowski (2016). It uses Facedancer MitM design proposed in van Tonder and Engelbrecht (2014). It allows to modify HID traffic and use it to exfiltrate the data from the USB host. This enables to not only input some custom commands like in the BadUSB attack but also to receive their results. Unfortunately, BadUSB 2 supports only full speed devices which limits its practical usage only to HIDs as they transfer relatively small amounts of data.