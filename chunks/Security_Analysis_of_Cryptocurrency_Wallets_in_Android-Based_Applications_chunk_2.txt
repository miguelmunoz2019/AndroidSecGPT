The adversary does not have the private knowledge unique to the owner of a target wallet, such as the private key of the user’s account or the set of wallet transaction passwords. However, the adversary has the ability to install and run any application on the same device that the wallet runs. The installed application has been given all necessary permissions it requests. The adversary has the ability to modify any setting on the device on which the wallet runs. The adversary also has the ability to run any software on the other devices of the user who uses the wallet. The adversary can listen to and modify the communication of the wallet, although they do not know the corresponding key for the encrypted traffic. The adversary can attack the servers to which the wallet is connected, but cannot control the blockchain network.

The above adversary model is practical, because the user may be induced to install a new application and further grant the application all its required permissions. The application can disguise itself as a normal application. In addition, techniques such as USB debugging, accessibility service and other mobile phone features, can offer more opportunities exploited by adversaries. Indeed, we will describe these attack techniques in the next section.

# Verify the key-related information on the screen.

An attacker may monitor the information on screen to obtain the key, posing a threat to confidentiality. Last but not least, when the key encryption password is set or verified, an attacker may capture the key encryption password by listening to user input, again a threat to confidentiality.

# Transaction Management
When a user needs to transfer funds out of the account, the wallet generates the corresponding transaction and signs it with the user’s private key. It then broadcasts the signed transaction to the blockchain network, and waits for confirmation to complete the transfer function. When a user needs to make a collection operation, it needs to provide its account address, which optionally includes the currency and amount, to the payer for payment. The wallet app generally also provides transaction records and balance query functions for users to query the corresponding account transfer records and account balances. The process is shown in Fig. 2.

# Cryptocurrency wallets generally carry the basic functions of private key management and transaction management.

Key management includes generating, storing, importing and exporting a private key, and transaction management includes transferring and collecting tokens, and querying transactions and balances. However, improper implementation of these functions may introduce attack points into the attack surface. Besides, as the wallet is hosted in an operating system (OS), the features provided by the OS may also be exploited by the attacker, thus posing a threat to the security of the digital wallet. In the following, we analyze the attack surface from the aspects of the cryptocurrency wallet itself and its underlying OS.

# Attack Surface of Cryptocurrency Wallets
# Key Management
If the user does not have an account for an encrypted digital currency, a pair of public and private keys for a new account will be randomly generated locally on the device through the wallet. If the user already has an account, the private key corresponding to the account can be imported into the wallet so that the user can manage the account using this wallet. The wallet encrypts the generated or imported private key with an encryption password chosen by the user. If a user loses the private key, they permanently lose control of the corresponding account, resulting in asset loss. Therefore, the private key is usually exported for backup.

In the process of generating a private key, if the random seed used in the generation can be predicted or obtained, the generated private key is also at risk of being compromised. In the process of storing the private key, if the stored key can be accessed in plaintext or can be decrypted, it may be stolen and compromised, thus posing a threat to confidentiality. If the stored key can be modified or deleted by a third party, it may cause the user to lose control of the account, which poses a threat to the integrity and availability of the account. When importing a private key, a user may need to manually enter the key using the keyboard, or by copying and pasting, an attacker may obtain the key by monitoring the user input, posing a threat to confidentiality. When importing and exporting keys, the wallet may also display.

# Attack Vectors of an Android System
Android offers a number of features for developers and users, but some of these features can be exploited by attackers to compromise the security of the cryptocurrency system running on Android. We analyze their potential attack vectors after introducing these features.

# Root Privilege
The Android mobile operating system uses the Linux operating system kernel. The root user is the most privileged administrator user built into Linux, as is Android. If an app gets the root privilege, it will run as the root user with full control over the device. Root privilege is usually limited to some core processes of.

# Attack vector and attack surface
The system, but some device manufacturers allow users to turn on the device’s root permissions and authorize user-specified apps, thereby enhancing the user’s control over the device. It is also possible for a user or a malicious program to obtain root privilege through a vulnerability.

USB Debugging: USB debugging is a debugging function that Android OS provides to developers to connect Android devices to computers through USB cables. When an Android device turns on the USB debugging option and connects to a computer, the computer can issue ADB (Android Debug Bridge) commands to debug the device. ADB is a command-line tool that allows users to perform many privileged operations over Android devices by running the commands on their computers, such as installing and unloading backup apps, reading and writing files, modifying system settings, taking screenshots, simulating user actions, executing shell commands, and so on.

Because USB debugging is powerful, improper use may easily cause security risks. USB debugging is turned off by default and requires the user to turn it on manually in the developer option. If the Android version is 4 and above, the developer option is hidden by default, requiring the user to click “version number” 7 times in a row in “About the phone” to reveal the debugging option. If the Android version of the device is above version 4, when the device is connected to USB debugging, the device screen will prompt a dialog about whether to allow the computer to debug. Users can permanently disable the prompts.

Accessibility Service: Android’s accessibility service provides user interface enhancements to people with disabilities or who are temporarily unable to fully operate their devices. This function can be used to acquire content on the screen, listen to the user’s actions, interact with interface elements, and so on. While Android’s official documentation requires apps to only use accessibility features to help people with disabilities interact with the app, accessibility is used by many apps to perform automated operations such as automatic check-in and giving “like”. BIND_ACCESSIBILITY_SERVICE permissions are required to use accessibility. However, this permission is to ensure that only the system can bind to it. It is unlike the permissions declared in <uses-permission>. Therefore, the permission would not be notified to users that the application uses accessibility service when installing the application. To enable an accessibility feature, it typically requires the user to manually turn on the option in the system settings. Using a USB debug, the ADB command can also turn on the option without user awareness.

Third-Party Input Method: Android allows users to use input methods provided by a third-party application. However, a malicious third-party input method may record sensitive information entered by the user, such as private keys, mnemonics, and passwords. Vulnerabilities in third-party input methods can also widen the attack surface and threaten the confidentiality of user input.

# Combine Attack Surface with Attack Vector
Based on our analysis, Table 1 summarizes the security consequences, that is, the violation of security properties, due to the wallet attack surface and the Android attack vectors, where C represents confidentiality, I for integrity, and A for availability, respectively.

# Experiment
This section presents attack experiments on two real-world cryptocurrency wallets, “Huobi Wallet” and “imToken.” Although there are earlier works evaluating the security risks of mobile applications from the perspectives of the Android operating system and permission mechanism, they are different from our work on Android-based cryptocurrency wallets, which have different security goals. Hence, benchmarking with earlier works is not suitable.

# Attack #1: From Screen Display Capture Sensitive Information
The main idea of this attack is to extract sensitive information displayed on the current screen by creating accessibility services. The detailed steps of the attack are as follows.