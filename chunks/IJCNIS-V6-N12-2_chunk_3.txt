SELinux (Security-Enhanced Linux) is a core security module that is developed by adding extra features to Linux. In  authors aimed to create a more secure system by adapting the SELinux core module to the Android operating system. To achieve their goal, they recompiled the Android source code with the SELinux, which requires intervening the operating system. Their system is useful only if the mobile device owners remove the current operating system from their devices and install this modified version.

In , researchers developed SAINT, a software framework that protects the security of Android devices. The developed framework is built by modifying the middle layer (middleware) of the Android operating system. The architecture is comprised of 5 modules. The first module is Saint Installer Software. This module is a modified version of the Android application installer. It becomes active when installing an application; it inspects the permissions that the application uses and compares them to ones that are predefined in the second module, which is called the Application Policy Manager (AppPolicy). If there is no match or there is a conflict, the application is not installed. The third module is Saint Mediator. This module becomes active at runtime and audits the processes based on whether they operate according to predefined rules. The forth module is the Framework Policy Manager. It serves as an application and provides the option to change the predefined rules. Rules can only be changed via this application. The fifth module provides a way for application developers to add their own predefined rules to SAINT. Once again, the users can only take advantage of this solution by installing a modified version of operating system that includes SAINT software framework.

# A. Permission-Based Solutions
Each API call in the Android operating system corresponds to a permission in the manifest file (AndroidManifest.xml) that contains the list of permissions. When a user installs an application, the list of permissions is presented to the user. When the permission is granted, API calls become active. However, users can only allow or reject all of the permissions and do not have the power to select certain permissions. Allowing many unnecessary permissions causes security and privacy problems. Once the permissions are granted at the installation time, there is no way of changing these permissions. Furthermore, the model does not support dynamic permission assignment. After an application is granted permissions, the users have no idea about how the application will use the data on their devices and what effects it will have on privacy and security. Permission-based security solutions provide experimental analysis and practical solutions. Experimental analysis studies generally investigate how the permission mechanism is used or misused and whether the applications use excessive or incomplete permissions, and then the studies produce related reports. However, practical solutions aim to provide permission-based filtering and remove permissions that are considered to be harmful.

Ref.  experimentally analyzes the permission model in the Android operating system. The main purpose of the study is to investigate the weak and strong parts of the system and to reveal how the permission mechanism is used in practice, which refers to whether the design considerations meet the expectations of real world features. Authors analyzed 1100 Android-based applications and tried to reveal how application developers use the permission model. 2D visualization of the data analysis was performed by employing Self Organizing Maps. According to their analysis results, a very small portion of android permissions were actually used out of the 100 permissions that were given. They also found that the INTERNET permission was used frequently and suggested that a mechanism that controls the usage of this permission needs to be developed. According to their results, 60% of the applications only use the INTERNET permission. Even if an application does not require the Internet permission, developers are forced to add this permission because the advertisements are published through the Internet. In addition to the Internet permission, many applications also enable SMS reading and SMS writing permissions. These permissions can be used without the knowledge of users and can cause higher bills. As a result, excessive permission
Copyright © 2014 MECS I.J. Computer Network and Information Security, 2014, 12, 9-20
# A Comprehensive Analysis of Android Security and Proposed Solutions
usage affects the users negatively. The study suggests that the Android permission mechanism should be improved; note that well-defined permissions will provide users with more control. Furthermore, their results show that users unconditionally allow permissions that are presented on their screen without knowing why the application requires them. However, the study does not provide a risk analysis or the security measures to be taken; it only reveals how the permission model is used, whether the applications in the same category use the same permissions and how many permissions are used by applications.

In , researchers downloaded mobile applications by crawling the Android Market; they used a statistical analysis on the byte-code level and matched the method calls in the Android API to the permissions in the manifest file. Although the study does not provide a user-focused security solution, it reveals which applications use too many or incomplete permissions.

Similar to the other studies,  researched the permission list. With the help of a developed software tool that is called Stowaway, authors inspected the permission file and source code of applications and exposed the applications that made API calls on the code level and did not define the necessary permissions in the manifest file. Furthermore, they identified the maximum number of permissions that an application may require and compared this to the permissions that already existed in the manifest file. According to their results, 35% of the applications used unnecessary permissions. They analyzed the reasons behind why the applications behave this way and investigated suspicious behaviors, method calls, and unnecessary permission usage. Finally, the authors created a permission map by matching the API calls to the permissions, with the success rate of 85%. The study makes an important contribution to mobile security research in terms of permission mapping.

In , researchers downloaded 10,000 applications from the Android Market, analyzed them by using data mining techniques, investigated which permissions were popular and were used more often, and researched how many of them were actually used and how they affected the users. To do this, the authors made use of information in the “mention” section of the Stackoverflow, an online information-sharing site for software developers. According to their analysis results, 40% of applications used unnecessary permissions. They found that there was an association between the popularity (which was found according to the number of mentions) of permissions and the misuse of them. More popular permissions were misused more. Although researchers do a detailed analysis of Android application, they do not provide a solution for the problem they mentioned.

In , authors investigated 204,040 applications that were downloaded from the top 5 popular applications in the Android Market. They developed a system that was called DroidRanger and identified malicious applications by employing their novel technique that creates permission based on behavioral footprints and filters the permissions that are unnecessary or cause harm. The developed system identified 211 applications as being malicious and contagious. These malicious applications infected 260,000 users within the 48 hours before Google removed them from the market. Researchers inspected the known malicious applications and the permissions that they used for the behavioral foot-printing process. After creating the footprints of malicious applications, they matched these to the scanned applications. The heuristic filtering technique was chosen for the applications that did not have a footprint. Heuristic filtering is the inferring process that identifies the unknown application's behaviors by employing the known suspicious behaviors of malicious applications. According to their results, the developed system delivered successful results that even popular anti-virus software could not match. Although their system produces successful results, their heuristic approach only works for certain behaviors that they defined and does not identify new malicious behaviors. Furthermore, the study does not incorporate mobile device users into the study.