In 2017, Papp & al. tried to work directly at the source code level to detect trigger-based behavior in legitimate applications . Their goal is not to work on a malicious application. They want to emphasize triggered behavior or backdoor behavior in legitimate open-source applications. For this purpose, they use KLEE  to perform mixed concrete and symbolic execution (also called concolic execution). However, first, they have to instrument the considered
# IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 19, NO. 6, NOVEMBER/DECEMBER 2022
application to add specific library calls to use these existing tools. Then they execute the concolic execution and based on the result, and they generate different test cases. Out of these test cases, some can be highlighted by their program to be verified by an analyst to check whether it is a trigger-based behavior or not. Though it is promising for a semi-automatic detection tool, their approach can take a large amount of time to generate test cases and lead to a large number of false-negatives.

We now present a more advanced and promising method developed by Bello and Pistoia . Their approach aims at exposing evading techniques that sophisticated malware use. Nevertheless, they do not stop at the detection, as we will see. Their work is divided into three parts, the first one being the detection of evasion point candidate by using information flow analysis. They use the notion of source and sink, that is to say, detecting information going from a source and going to a sink. Once detected, they step into stage two, it is simply the instrumentation of the Java byte-code to force the untaken branch during the following analysis. The last stage is precisely the execution of the instrumented application in a controlled environment to monitor the malicious code’s behavior. According to the authors, their approach is unsound but a stepping stone toward detecting new malware behavior. The first stage of their work is related to our work, except that they follow the flow of fingerprinting methods to branches.

Logic bombs can be used for venerable purposes, indeed in a recent study, Zeng & al.  presented an approach to detect repackaging using triggers. Indeed, their approach consists of instrumenting a legitimate app that could be repackaged by an attacker and adding an instruction to make the app ”repackage-proof”. They introduce cryptographically obfuscated trigger conditions that, when triggered, can detect if the program has undergone a repackaging process. The term ”logic bomb” specifically means triggering malicious code under specific circumstances. However, the code triggered is not malicious but preventive. Therefore, although they use the same mechanism as malware developers, the authors should talk about Hidden Preventive Code. Nonetheless, their approach is resilient since we assume the condition has been detected, which is already a challenging problem. One cannot resolve the condition due to its cryptographic properties (using hash functions). Therefore the guarded code cannot be decrypted and executed. Inserting checks in legitimate apps is promising for protecting Android apps from malware developers and has well been studied in the literature.

# 7 CONCLUSION
In this paper, we have implemented TSO PEN, the first open-source version of the state-of-the-art approach for detecting logic bombs in Android applications. We first conducted a large-scale analysis over a set of more than 500000 Android applications and observed that the approach scales.

However, the approach is not appropriate for automatically detecting logic bombs because the false-positives rate of 17% is too high. We conducted multiple experiments on the approach’s parameters to understand the impact on the false positive rate and identify that a low false-positive rate could be reached but at the expense, for instance, of missing a large number of sensitive methods. That is to say, the approach with a low false-positive rate misses a large number of logic bombs. We experimentally show that TSO PEN’s approach might not be usable in a realistic setting to detect logic bombs with the original paper’s information.

Moreover, we have seen that TSO PEN’s approach is not sufficient to detect logic bomb because benign and malicious apps can use the same code for benign and/or malicious behavior. This is a direct consequence of the lack of a formal definition of what a malware is. We empirically show that using TSO PEN’s approach, trigger analysis is not sufficient to detect logic bombs. Indeed, dissociating the trigger condition and the guarded behavior produces false-positives. Thus, an analyst is necessary to verify the behavior. Nevertheless, when manually inspecting malicious applications containing logic bombs, provided by TSO PEN, we were quickly able to verify if the triggered code is malicious. We did not have to search through all the code, which saved us a lot of time. Hence, TSO PEN’s approach seems promising to locate the malicious code using logic bombs in applications being reverse engineered.

We created TRIG DB, a database of 68 applications containing localized trigger behavior. We manually analyzed and classified each logic bomb. We make it publicly available for future research as a ground-truth promised to evolve.

In a nutshell, our work shows that, even though TSO PEN’s approach is interesting, it is not suitable for automatically detecting logic bombs. Indeed, the control dependency step is not sufficiently representative of malicious behavior. Our results contradict state-of-the-art by two orders of magnitude regarding the rate of false-positives. We have identified several parameters, such as the list of sensitive methods, which could have a two-order magnitude impact on the false positive rate. These parameters should be detailed in every paper tackling the challenging task of detecting logic bombs in Android applications. Our hope is that future publications do not omit this information to makes their experiments reproducible.

# 8 FUTURE WORK
We have seen that if an application uses trigger-based behavior combined with malicious code, they are inseparable, sophisticated techniques should be used to qualify the behavior as malicious to flag it as a logic bomb. TRIGGERSCOPE checks if a sensitive method is called, but an in-depth analysis of the guarded behavior is to be preferred to understand the triggered behavior. Because a sophisticated analysis of the guarded behavior reduces to detecting malicious code, the difficulty remains due to the lack of a formal definition of what malware is. We aim at going further by linking the guarded code with its condition. The trigger would somehow be the entry point for the code. Hence we would be able to locate the malicious code, or at least be able to track it. We also want to verify if the guarded code is enough to execute a behavioral study and qualify the application’s maliciousness.

We do not just want to focus on the internal context of the application. Indeed, the external context, i.e., the application description or the application reviews, can be processed by
# SAMHI AND BARTEL: ON THE (IN)EFFECTIVENESS OF STATIC LOGIC BOMB DETECTION FOR ANDROID APPS
applying NLP algorithms (, ). Existing techniques such as  and  already use the application descriptions to compare it with the permissions or the application’s behavior.

Finally, we aim to build a classification of types of triggers to understand their use in malicious applications. This would help build a detector that could take into account those classes and study their use in the wild.

# IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 19, NO. 6, NOVEMBER/DECEMBER 2022
# Author Biographies
Jordan Samhi received the master’s degree in computer and information systems security from the University of Lorraine, France, in 2019. He is currently a doctoral researcher with the University of Luxembourg, in 2021. His research interests include the security aspects of software engineering, with a particular focus on malware and vulnerability detection.

Alexandre Bartel is currently a full professor with the Computing Science Department, Umea University. His research interests include and combine software testing, Android security and vulnerability analysis.

For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/csdl..