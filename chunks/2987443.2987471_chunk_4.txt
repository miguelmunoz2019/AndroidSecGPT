Since VPN apps can have end-points in multiple countries the percentages do not add up to 100%. For reference, the cost per month of the hosting providers can range from 5 USD/month (Digital Ocean) to almost 200 USD/month (Astute Hosting).

# 5 VPN Protocols and Traffic Leaks
Ideally, the traffic forwarded through the VPN tunnel must be opaque to an in-path observer (e.g., Internet service provider, commercial WiFi APs and surveillance agencies). However, there is a wide range of tunneling protocols, each with different security guarantees, that can be used by app developers to forward traffic out of the device: from secure IPSec tunnels to basic TCP tunnels without any encryption.

In addition to insecure tunneling protocols, developer-induced misconfigurations and errors may also undermine user’s privacy and security. VPN app developers must explicitly forward IPv6 traffic and provide the DNS settings at the time of creating the virtual interface programmatically. If not done carefully, DNS and IPv6 traffic may not be forwarded through the virtual interface. In particular, DNS leakage can reveal user’s networking activity and interests. The VPN API also allows app developers to overwrite user’s DNS resolver with one of their choice.

All these artifacts can become a serious harm for users trying to circumvent surveillance or seeking online anonymity by using VPN apps. To investigate those crucial aspects of VPN apps, we run a script that performs crafted HTTP requests (both over IPv4 and IPv6) as well as DNS lookups to our dual-stack server under our control. In this section, we analyze the pcaps captured by our in-path WiFi AP to investigate the presence of tunnels without encryption in the wild (i.e., we consider a tunnel implementation as unencrypted if the payload of our custom HTTP requests is seen in the clear by our WiFi AP) and to identify potential IPv6 and DNS leaks. We leverage the complementary features provided by a pcap parser and Bro’s comprehensive protocol analyzers (which provide support to identify some tunneling technologies) to inspect in detail the traffic collected for each app.

# VPN Tunnel Implementations
As mentioned earlier, we rely on Bro’s suite of protocol parsers to identify the actual protocol used by each VPN app. Unfortunately, Bro only provides full support for OpenVPN, L2TP/IPSec and SOCKS tunnels. For the remaining cases, we could not identify their application-layer protocol. Instead, we report the transport-layer protocol and the destination port in use. Identifying the actual protocol would have required us to decrypt the channel to inspect the payload.

# 5 Traffic Manipulation
In-path proxies allow VPN services to gain control over users traffic and to manipulate traffic on the fly. Moreover, many proxy features can provide an economic benefit for ISPs and network providers as in the case of HTTP header injection or traffic redirection for advertising purposes.

We leverage the comprehensive network troubleshooting tool Netalyzr for Android to identify in-path flow-terminating proxies at the TCP level and, in the case of HTTP proxies, how they interfere with user’s traffic. In a nutshell, Netalyzr controls both client and server side and crafts packets and HTTP requests in a way that would allow identifying non-transparent proxies along the path. We refer the reader to Netalyzr-related bibliography for further implementation details.

We extend the insights provided by the Netalyzr tool with custom-built tests that will allow us to identify VPN apps implementing techniques such as ad-blocking, JavaScript-injection for advertising and analytics purposes, and traffic-redirection (i.e., redirecting users traffic to third party advertising partners). In particular, we use two techniques to identify such proxy manipulations: First, we investigate domain mismatches between the DNS request and the service ultimately delivering the content using reverse DNS. Second, we investigate content modifications for a website completely under our control, seven e-commerce websites (alibaba.com, ebay.com, target.com, bestbuy.com, overstock.com, newegg.com, and macys.com) and for the top-30 websites in the US, China, and Europe according to Alexa’s rank.

As we demonstrate in one of our previous research efforts, the JavaScript code for two or more simultaneously accessed DOM trees’ elements (e.g., ads) belonging to the same website remain identical despite noticeable differences in the DOM tree elements. This feature present in today’s websites allows us to identify possible JavaScript injection by comparing the DOM trees for all selected websites before and after testing each VPN app. We use Selendroid to fetch the rendered HTML source and extract the JavaScript as well as the DOM trees for each site.

# In-path Proxies
The Netalyzr tests failed systematically for 34% of the analyzed VPN apps. Unfortunately, we do not have enough information to explain if such failures are caused by VPN app behavior, app bugs or if they are the result of traffic policies implemented by the VPN provider as Netalyzr generates traffic resembling BitTorrent which may be blocked by the VPN provider. We acknowledge it as a limitation of our tests to determine proxies in 34% of the analyzed VPN apps.

For the remaining 66% of VPN apps, Netalyzr results revealed the presence of flow-terminating proxies for multiple TCP ports as shown in Figure 7. According to the figure, for every port we study, in-path proxies are more common on premium VPN apps than in their free counterpart. We inspect app descriptions on Google Play store and observe that only 18% of the analyzed 66% apps provide such proxying as part of their stated purpose. The rest of the apps implement proxying as additional functionality. Nevertheless, we detected the presence of general-purpose proxies (i.e., proxies listening in all the ports tested) in 8% and 15% of free and premium VPN apps respectively. Given that free VPN apps may implement peer forwarding to redirect user’s traffic and the lower number of free VPN apps with premium services that we actively analyzed, in-path middleboxes and proxies may be less common in such scenarios.

In-path proxies may have additional negative effects on user’s traffic which are beyond the scope of this study. Many of them may have their own particular or incomplete interpretation of transport-layer protocols. In the case of HTTP proxies, Netalyzr test revealed that 47% and 55% of free and premium VPN apps actively modify HTTP traffic by default. Some proxy artifacts may have a negative impact on data fidelity and user’s browsing experience as in the case of techniques like non-HTTP traffic filters over port TCP:80 (15% of VPN apps), HTTP body or header manipulations.

(14% of VPN apps), and image transcoding (4% of VPN apps).

Ad-Blocking and Tracker-Blocking. Two of the analyzed VPN apps actively block ads and analytics traffic by default on our tested websites: Secure Wireless and F-Secure Freedome VPN. The apps did not explicitly mention ad-blocking feature in the Google Play store listings. An analysis of the decompiled source code, using ApkTool, revealed that F-Secure Freedome VPN app blocks any traffic coming from a pre-defined list of domains associated with web and mobile tracking including Google Ads, DoubleClick, and other popular tagging/analytics services such as Google Tag and comScore. However, blacklist-based ad blocking may affect the functionality of the Webpages and impairs user experience.

Specifically, F-Secure Freedome VPN blocks JavaScript code associated with nytimes.com’s event “TaggingServices” which, as a result, prevents user access and interaction with embedded relevant video content.

JavaScript Injection. We identified two free VPN apps (VPN Services HotspotShield by AnchorFree and WiFi Protector VPN) actively injecting JavaScript codes using iframes for advertising and tracking purposes. Both apps claim to safeguard user privacy and to provide security and anonymization. However, in the case of AnchorFree, they also provide advertising services. Our static analysis of both apps’ source code revealed that they actively use more than 5 different third-party tracking libraries. The developer team behind WiFi Protector VPN corroborated our observations and stated that the free version of its app injects JavaScript code for tracking and displaying their own ads to the users.

Traffic Redirection. AnchorFree’s VPN app HotspotShield performs redirection of e-commerce traffic to partnering domains. When a client connects through the VPN to access specific web domains, the app leverages a proxy that intercepts and redirects the HTTP requests to partner websites.

We validated each server certificate against the ICSI Certificate Notary to identify possible cases of TLS interception: 3% of the TLS sessions provided certificates for which the ICSI notary could not establish a valid chain to a root certificate from the Mozilla root store. By inspecting manually each certificate, we identify 4 free VPN apps (developed by 3 different app developers) that actively intercept TLS traffic by issuing self-signed certificates.

Contrary to Google Play listings, F-Secure Freedome VPN mentioned its ad-blocking feature on its website, https://www.f-secure.com/. During our experiments redirection happened exclusively for websites categorized as e-commerce sites such as alibaba.com.