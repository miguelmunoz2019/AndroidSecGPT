# IV. RESULTS
This section presents the preliminary evaluation results of SO{U}RCERER framework, based on the case study.

[Note: For anonymization, we have reported only the aggregated results and avoided publishing the name of any specific mobile banking service. We have reported all our findings, detailed security risk reports, and a detailed guideline of performing security testing based on SO{U}RCERER to the related financial organizations, with the expectation that they would enhance the security of their apps.]
# A. RQ1: Runtime for SO{U}RCERER Framework
On average, it took participants 61 minutes to complete the SO{U}RCERER activities, from identifying assets of an app to finding vulnerability mitigations, with a minimum runtime of 51 minutes and a maximum of 75 minutes. Participants spent an average of 15 minutes for asset identification, 30 minutes during vulnerability detection and prioritization, and 20 minutes to find mitigations.

# B. RQ2: Comparison of SO{U}RCERER and Static Analysis Tools
On average, MobSF, QARK, and AndroBugs reported 9, 19, and 49 categories of vulnerabilities. On the other hand, using the SO{U}RCERER framework, our participants could prioritize only seven categories of vulnerabilities on average.

Based on participants’ reporting, SO{U}RCERER effectively reduced prioritized security warnings in a range of 24-61%, compared to a standalone static analysis tool.

# C. RQ3: Comparative Tool Analysis
Participants reported MobSF as a comprehensive tool for detecting the vulnerabilities found in mobile money apps. The average runtime for MobSF was 50 secs, while the runtime for AndroBugs was 72 secs. QARK was found to have the longest run time of 19 minutes. QARK also failed to analyze 33% of the apps during the case study. Participants reported both MobSF and AndroBugs being consistent in terms of sensitivity and vulnerability ranking throughout the analysis.

# D. RQ4: Common Vulnerabilities and Affected Assets in Mobile Money Apps
Participants found that 75% of the apps had known vulnerabilities affecting all three asset categories. Participants found these vulnerabilities reported by static analysis tools, and later they verified the reported vulnerabilities by manual inspection, as reported in §III. SQL injection was the most critical vulnerability affecting user assets (64% apps), followed by sensitive information (e.g., mobile no., email, IMEI) logging vulnerability (47% apps). 78% apps have been found with hardcoded information (e.g., API keys) in plain text, thus affecting app assets. In terms of platform assets, 75% of the apps have accessed at least one of thirty dangerous permissions defined in Android documentation. Interestingly, 63% of the apps have accessed READ_PHONE_STATE permission, which enables the apps to access non-resettable unique identifiers, e.g., IMEI. Accessing identifiers like IMEI is often tied with transmitting sensitive data to an ad-tracking network, which often shares data with data brokers without the explicit consent of end-users . Our participants also noticed that 68% of mobile money apps using third-party tracking libraries (e.g., Tune, Branch, AppsFlyer, Amplitude, Crashlytics, FireBase), as reported by MobSF. While it was beyond the current scope of this paper, this finding certainly raises suspicions as to why sensitive apps like mobile money apps use tracking libraries and perform international data transfer, which may cause violation of federal banking laws of the operating countries . 80% of apps have been found accessing external storage (platform asset). While accessing external storage is not a vulnerability, a close inspection showed that 53% of apps with external storage access had also logged and stored sensitive information in common storage. The middle column in figure 1 shows summary results of the vulnerabilities identified and the vulnerability-to-asset mapping catalog for 36 analyzed apps.

# E. RQ5: Common Mitigations for Mobile Money Apps
Contrary to the severity of vulnerabilities, mitigations of these vulnerabilities are commonly known and well documented. Most of the vulnerabilities could be mitigated by following secure coding guidelines, e.g., avoiding logging app data in shared storage, avoiding keeping hardcoded data in source code (MSTG-STORAGE-3), verifying that the WebView only rendering JavaScript contained within the app package (MSTG-PLATFORM-7) . The rightmost column in figure 1 shows the mitigations identified during evaluation.

# V. DISCUSSION
Mobile app development is an agile process with high-frequency release cycles with a constant rush of adding new features. App developers keep pace with competitors and app market incentives, focusing heavily on fulfilling functional requirements (e.g., device and OS version compatibility) and putting less effort into testing non-functional requirements like security. Commonly available security guidelines are not readily adoptable by Android app developers for the following reasons:
1. Unlike legacy systems, android devices pose a diverse set of security and privacy challenges due to their rich set of sensors and always-connected nature over an unsecured network.

2. The app economy incentivizes developers for faster app publishing in the marketplace.

3. There is a rapid rise in app developer demographics, from hobbyist to independent, small or medium scale developer teams who cannot afford resources (e.g., time, money, security education) for dedicated security testing.

Research initiatives have not yet produced any standard, reference model, or exemplar that can be used to capture what threat modeling and security testing entails for secure app development . Therefore, it is not always clear to app development teams what to expect from app security testing. Despite publishing app security guidelines, OWASP too acknowledges that a one-size-fits-all approach to mobile app security testing is not sufficient because every mobile app is unique and requires a different level of security, e.g., a threat model for a book reader app would be different from that of a money transfer app. We argue that the list of commonly available security requirements and testing guidelines is too broad and cannot be readily tailored and adapted by a developer to measure the security posture of her app. For example, some could believe that addressing the ‘top 10 threats’ is a valid substitute for systematic security testing. However, we believe that a common reference framework will help to clarify the value of systematic security testing for apps. Furthermore, a standard reference framework serves as the basis for exchanging threat modeling information in a standardized fashion and thus can underpin tools that support the security testing process. Research has shown that small- to medium-scale app developers need tool support and contextualized decision support regarding thinking and implementing security controls . We believe SO{U}RCERER can be a guiding framework by bridging this current gap between knowledge and action. SO{U}RCERER helps an app developer prioritize and fix vulnerabilities based on the critical domain-specific assets of an app without getting overwhelmed by a generic list of security advice or warnings reported by standards bodies or static analysis tools.

# VI. RELATED WORK
We discuss related work in two key areas: investigations of security issues in Android app development, and studies of threat modeling techniques for secure software development.

There have been some efforts to investigate security vulnerabilities in Android apps by developing static analysis tools. For example, Crylogger  detects cryptographic API misuses in Android apps; MalloDroid  detects potential SSL Man-In-The-Middle (MITM) vulnerabilities in apps; FixDroid  scans a developers’ code for common security pitfalls and provides feedback. It needs to be pointed out that working prototypes of academic static analysis tools are hard to find in the real world, thus makes it challenging and harder for reproducibility and re-evaluation for future work, let alone to be used for actual app development phases, as found in systematic studies of Android static analyzers , . Besides academic tools, industry-grade static analysis tools also present warnings to developers in a non-user-friendly and unintuitive format, which leads developers to confusion, due to either a lack of security knowledge or person-hours available to address the issues.

Threat modeling in the context of secure software development is involved in identifying threats to mitigate vulnerabilities. While various threat modeling approaches (e.g., STRIDE, PASTA) have been proposed and developed over time, the practice is not widespread and agile practitioners, and software developers have few sources available on adopting the threat modeling practice during development , . For example, asset identification is one of the greatest challenges faced by development teams ; developers need a baseline and a guiding framework to start modeling the system, eliciting security requirements, and finally reviewing the system to apply security controls as required . Besides, the practice of threat modeling often poses challenges, e.g., steep learning curve, collaboration across teams, and internal or external security expertise. These challenges are critically hard to manage for small (or solo) to medium level app developers with limited to zero levels of organizational resource capacity , ,.

In our work, we focus explicitly on the lack of a developer-driven security testing framework and propose SO{U}RCERER that would help developers contextualize functional requirements of their apps and prioritize threats for mitigation to secure the apps.