# Choosing the Weapon: A Comparative Study of Security Analyzers for Android Applications
Ryan B. Joseph, Minhaz F. Zibran, Farjana Z. Eishita
University of New Orleans, USA; Idaho State University, USA; Idaho State University, USA
rbjoseph@uno.edu; MinhazZibran@isu.edu; FarjanaEishita@isu.edu
# Abstract
This study compares security focused static code analyzers for Android applications. Android operated hand-held devices (e.g., smart phones, tablets) are used in the modern computing world for nearly every need. Banking, email, health care, and other sensitive dealings are completed through the Android applications. Hence, Android application security must be held to the same level of scrutiny as traditional application security. This study compares two open-source security analyzers, MobSF and MARA, against two benchmark datasets and 20 live Android applications. We highlight the strengths and weaknesses of each analyzer and reveal security vulnerabilities found in the Android applications.

Index Terms—Security, Vulnerability, Cybersecurity, Android, Static Analysis, Empirical Study
# I. INTRODUCTION
Mobile devices have quickly outpaced the use of more traditional computers in recent years. Smartphones and their applications have largely replaced the use of desktop and laptop computers. According to a Pew Research Center study on Americans, 81% of own a smartphone and 74% own a desktop/laptop . This trend will not slow down; mobile devices are closing the gap in general computing usage every year. Online banking, healthcare, shopping, email, and other sensitive transactions are now completed on mobile devices. No matter the digital device, software security concerns remain the same. Mobile application developers must be careful not to carry over the common security vulnerabilities from much older paradigms in the field.

This paper compares security analyzers for Android applications. The Android operating system is found in smartphones, tablets, and home entertainment systems. StatsCounter, an online statistics collection service, shows that Android has a 75% market share versus iOS at 22% in November 2019 . Such a large market share and smartphone use has attracted bad actors with the intent of stealing private information from Android based devices. Many of the same software vulnerabilities found in more traditional applications have carried over into the Android landscape.

Malware purposefully written for Android devices is a growing threat. A 2011 report from Fortinet claims that there are approximately 2000 Android malware samples that belong to 80 different families . Another worrisome trend is the amount of information that mobile applications collect on users. Many applications track users for targeted advertisements, but there have been many cases of abuse. Privacy concerns regarding mobile applications have moved into spyware territory.

Greater security auditing of mobile software is needed. There are some major differences in the underlying architecture and design that prevents applying older security analysis tools to mobile applications. Multiple open-source tools exist for security analysis on software. These tools have matured over many iterations, changing in step with newer vulnerabilities and hacker techniques. Security tools that focus on mobile applications are slowly catching up. In this study, we compare two security analyzers for Android applications. These tools should do the following:
- Identify potential security vulnerabilities within an Android application with contextual framework information
- Automatically reverse engineer APKs (Android Application Packages) to a human readable state
- Generate usable reports with sufficient supporting information that benefits the secure development lifecycle.

The rest of the paper is organized as follows. In Section III, we discuss studies related to this work. Section IV describes the methodology of our study. The findings derived from qualitative and quantitative analyses are presented in Section V. In Section VI, we discuss the possible threats to the validity of the results. Section VII includes a discussion and finally, Section VIII concludes the paper.

# II. BACKGROUND
# A. The Android Operating System
Android is an open-sourced mobile operating system (OS) developed and maintained by Google Inc. Applications in the Android ecosystem are typically written in Java but go through multiple compilation transformations before the code can be run natively on devices. The Android SDK compiles Java source code and other resources into a compressed Android Package (APK) known as .apk file . The Android Package is comprised of the AndroidManifest.xml (manifest file that lists Android Permissions and other data), a classes.dex file (Dalvik bytecode ran by the DVM), and other XML or graphic resources.

# B. APK Reverse Engineering
Fully assessing security vulnerabilities in an Android Package requires that Java source code can be reviewed and parsed.

by static analysis tools. The application’s APK technically does not contain Java source code. It has been compiled into Dalvik bytecode by the Android SDK at this point. Luckily, tools have been made that can reverse engineer the Dalvik Executable and produce Java source code. Baksmali is tool that disassembles .dex files into various .smali files. Each .smali contains the equivalent information of a Java .class file . Without using extensive obfuscation techniques, Java .class files are relatively easy to reverse engineer.

# III. RELATED WORK
There have been many studies on general Android security and purpose-built security analyzers over the past few years. Many of them focus on separate parts of the Android security model and how they may introduce vulnerabilities. Software security traditionally aims at analysis of source code, but the Android Framework has a few aspects that don’t exactly live in running code. Configuration settings such as Android Permissions are prime examples of how vulnerabilities can be introduced into APKs. Chiluka, Singh, and Eswaranka covers the misuse of dangerous Android permissions that can lead to private data leakage. The researchers identified many commonly used Android Permissions and categorized them on risk level. Android Permissions are typically found in the AndroidManifest.xml file; they are used by developers to declare which access rights their application needs in order to be run . These permissions are used to access low-level APIs similar to system calls other operating systems. The problem lies in the fact that many permissions are broad in the power granted to user-land applications.

The Android OS and supporting frameworks are related to other operating systems. After all, the Android Kernel is a modified version of Linux. Yet, there are enough differences when taking a holistic view of the Android ecosystem. Joshi and Parekh completed a survey of Android vulnerabilities found in the National Vulnerability Database (NVD) and the Open Source Vulnerability Database (OSVDB) over an 8-year period. They identified 12 vulnerabilities that Android applications are susceptible to.

Other studies have examined the use of security analyzers for Android applications. Using static/dynamic analysis tools on software to find bugs that cause security vulnerabilities are common practices in software engineering. Since mobile applications run on specialized hardware with an array of software stacks on top, new tools had to be written and tested. Rangnath and Mitra studied the effectiveness of multiple free security analysis tools for Android applications. They tested the security analysis tools on a custom benchmarking collection, Ghera, that localizes specific vulnerabilities found in Android applications. The researcher found that many of the tools could not detect vulnerabilities across the board. Some of the tools were accurate at detecting some of the vulnerabilities in Ghera’s sub-test categories, while completely failing at others . Security analyzers for Android applications still need to go through development and refinement to meet current needs.

There are studies on the security and quality assessment of source code and other artifacts , , , ,  of software systems in general using different security scanning tools. Recently, Daniel et al.  conducted a study to assess the efficacy of security scanner plugin for WordPress websites. This study of ours is completely different from all these studies in its objective and procedure. Instead of assessing the software artifacts or source code, we assess the efficacy of the security scanner tools in detecting vulnerabilities in Android applications.

# IV. METHODOLOGY
# A. Analyzer Selection
Android application analyzers are seemingly still an emerging field of development and research. There are not that many all-in-one analyzers that do not require some sort of pre-processing during the reverse engineering phases. In this study, we include two open-source analyzers, MARA and MobSF. Open-source allows for nearly any developer or security professional to install the software package and start incorporating it into their workflow. The scanners were installed on an Ubuntu 18 LTS (Bionic Beaver) virtual machine hosted by an Oracle VM VirtualBox v6 type-2 hypervisor.

# 1) MobSF v2
The Mobile Security Framework (MobSF) is an automated mobile-application penetration testing, malware analysis, and security assessment framework. MobSF is capable of static and dynamic application analysis of Android, iOS, and Windows binaries. The framework also provides REST APIs to support continuous integration and continuous delivery (CI/CD) pipelines for developers to automatically test their applications on each build. MobSF v2 is written in Python 3 and it is open-source under the GNU Public License v3.