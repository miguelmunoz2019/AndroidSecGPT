# 5 Discussion
We have demonstrated through an experimental evaluation that AUTH-EYE is effective in assessing the design and implementation of OTP authentication protocols in Android apps. However, it has some drawbacks, outlined as follows.

• Discovering Vulnerabilities. AUTH-EYE executes each app for SMS OTP validation and points out OTP rules violated by the validation system. However, it is difficult for AUTH-EYE to discover what vulnerabilities exist in the implementation and where they are located. Consider a case that violates R1 (i.e., OTP randomness). The most popular way of implementing this in Android is to invoke the function SecureRandom(.), a pseudo-random number generator. In practice, it should not be seeded with a constant number; otherwise, the function will produce a predictable output sequence across all implementations. However, some developers still use seeds as “000000” or “123456” . Such details cannot be inferred in general by only analyzing the server responses.

• Vulnerability Certainty. Currently, all the implementations that violate any of the OTP rules are tagged as vulnerable. There might be other protection mechanisms implemented in the validation system, beyond those known to AUTH-EYE. For example, we discovered that some Finance apps transmitted mobile phone numbers and OTPs in ciphertext or over a secure connection. These protection schemes confirm that transmissions are under secure circumstances, as long as the cryptographic primitives or secure connection are correctly implemented. This is, however, outside the scope of this work.

• Black Box Analysis. AUTH-EYE treats the validation system as a black box, and only analyzes server responses. We assume that such responses reflect functionalities implemented in the code. However, this assumption does not always hold as our manual inspections described in Section 5 found, such as in the case of the Finance app discussed in Section 5. Based on a given response, one may conclude that the implementation complies with the implementation rules, but nevertheless functionalities defined in the validation system may actually not be correctly implemented.

• Field Identification. AUTH-EYE identifies the required information from the server responses through keywords match only. Nonetheless, the formats of the responses are not always shown as the same. AUTH-EYE might miss some responses in other format or identify an incorrect information from the responses.

# 6 RELATED WORK
This section provides a brief review of related work.

# 6 Security Analysis of One-Time Password Authentication Protocols
Several vulnerability detection approaches and protection schemes are proposed to defend against attacks on the steps of protocols, e.g. transmission and password generation. TrustOTP  builds a TrustZone to protect against attacks such as Denial-of-Service (DoS). It isolates OTP code and data from the mobile OS to ensure that the generated OTPs and seeds are secure even if the mobile OS is compromised. Differently, Hamdare et al.  and Eldefrawy et al.  focused on securing the authentication during OTP transmission and OTP generation, respectively. Hamdare et al. proposed a scheme to protect the OTP mechanism used for e-commerce transactions from Man-In-The-Middle (MITM) attacks. Instead of transmitting a simple OTP, they combined the OTP with a secure key and created a new transaction password by encrypting the combination using RSA. Eldefrawy et al. focused on securing OTP generation by generating multiple OTPs for both service providers and consumers. The low computation cost of their scheme makes it suitable for mobile devices.

The focus of previous work is to enhance the security of OTP authentication protocols. However, we focused on analyzing the correctness of OTP implementations and proposed an approach to check server responses instead of directly performing code analysis. Mulliner et al.  proposed a similar research that conducted a survey by introducing several attacks and weaknesses of SMS OTPs such as SIM swap attack, wireless interception. To protect SMS OTP attacks, the possible defense techniques are generally provided. However, details to exploit vulnerabilities and protect SMS OTP authentication are not given. Dmitrienko et al.  investigated the implementation of two-factor authentication of well-known Internet service providers (e.g., Google, Dropbox, Twitter, and Facebook). They applied cross-platform (i.e., PC-mobile) infection to control both PC and mobile devices involved in the authentication protocol and identified weaknesses that could be exploited in the SMS-based transaction authentication schemes of four large banks and Google. Their approach determines whether an authentication implementation is secure, but cannot provide detailed information on the causes. AUTH-EYE, however, does identify the causes of implementation flaws.

# 6 Dynamic Vulnerability Analysis of Mobile Apps
Several approaches have been proposed for dynamic analysis of mobile apps. The approach by Zuo et al.  detects vulnerabilities arising from SSL error handling in the mobile platform. They statically identified customized error handling processes rewritten by developers. For each process,
their system executes an event to trigger the error and checks whether the error is processed correctly. This approach requires access to the source code. In contrast, AUTH-EYE assumes that the server source code is not available, and uses only decompiled Android app code.

D’Orazio et al. [ 13] relied on an adversary model specifying secure and insecure states to detect vulnerabilities that can expose users’ sensitive data in mobile devices. The drawback of their approach is that complete code coverage cannot be ensured through app execution. AUTH-EYE instead achieves full code coverage because the entire login activities in apps are examined; thus, all the authentication relevant functionalities can all be triggered. Also relying on an attack scenario, IntentDroid [ 24] identifies Inter-Application Communication (IAC) vulnerabilities by executing attacks on eight specified vulnerabilities. It analyzes activity components of apps by implementing attacks based on effect path coverage, with low overhead. Although IntentDroid only uses a small set of tests to achieve high coverage analyses, path analysis mechanisms cannot be accurately applied to decompiled app code.

AUTH-EYE is similar to SmartGen [ 52], which performs in-context analysis to expose harmful URLs through symbolic execution in mobile apps. Since server URLs are invisible, SmartGen triggers the appropriate execution through APIs in app code. The main difference between SmartGen and AUTH-EYE is, however, that AUTH-EYE does not rely on dependency patterns to identify the target functions. It uses only limited code information (i.e., class names and function names) that are extracted easily and completely. SmartGen targets on detecting of hidden malicious URLs whereas AUTH-EYE identifies violations of the OTP rules in implementations of OTP authentication protocols.

# 7 CONCLUSION
In this paper we defined six OTP rules based on the relevant RFCs and proposed a novel automated system, AUTH-EYE, to check for violations of those rules. We used AUTH-EYE to perform an empirical study on a large number of Android applications. Our approach treats each server as a black box and infers the correctness of its OTP implementation code by analyzing server responses generated after a sequence of login requests. We assessed 3,303 Android apps and identified 544 apps implemented OTP authentication. Only eight of these 544 apps correctly implemented the OTP authentication protocols (i.e., satisfied all six OTP rules). Further analysis revealed the surprising fact that the validation systems of apps in security-critical domains, such as Finance, Shopping, and Social, are not as secure as one might expect. The example cases discussed in Section 5 show that poor implementations make users’ accounts vulnerable to attack and may even expose private data directly. As future work, we plan to extend AUTH-EYE to examine additional OTP rules and perform a more extensive survey of real-world app OTP security. A new dynamic analysis tool, CuriousDroid , is introduced. It is a context-based technique and can achieve higher accuracy than Monkey. We will refer to this technique to improve AUTH-EYE. The interested readers could also access our Github page 8 to obtain source code of AUTH-EYE and help improve the analysis.

# Study of Common SMS-Based Authentication in IoT Device
The Journal of Wireless Communications and Mobile Computing 2018 (2018)..