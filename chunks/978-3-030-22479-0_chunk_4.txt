In order to stimulate the app automatically, the DAM relies on DroidBot , an open-source tool that can automatically explore the app UI and mimic the interaction with a user. Unlike many existing input generators that rely on static analysis and instrumentation of the app to generate inputs, DroidBot works in black-box mode, i.e., it does not need to know in advance the structure of the app, and it is resilient to obfuscation techniques. In order to keep track of API
D. Caputo et al.

invocations, the DAM module provides the Android emulator with an ApiMonitor module. ApiMonitor, based on the Xposed framework, allows the DAM to intercept and collect each method executed by the app during the analysis, saving its invocation and the value of parameters on a JSON file. Furthermore, the DAM module intercepts and stores all the network traffic generated by the app using the HTTP/HTTPs proxy mitmproxy.

# WebSite Dumper (WD)
The WebSite Dumper module aims at extracting and retrieving all the websites invoked by the WebView components. To do that, it retrieves from the SAM and DAM modules the list of URLs accessed by app WebView components.

For each identified URL, the WebSite Dumper determines whether it refers to a local or a remote resource. In the first case, it collects and stores the static resource obtained by the app package. In the latter case, the WD module dumps the content of the remote website by downloading the web pages recursively, up to a maximum of 3 levels deep, by using the wget tool. Finally, the module polishes the results and maintains only HTML and JavaScript files that will be inspected by both the FCD and the EC module.

# Frame Confusion Detector (FCD)
The Frame Confusion Detector module implements the core logic of FCDroid for the detection of the vulnerability. At first, FCD collects from the SAM the list of permissions of the app and verifies that the app requires the Internet permission. If so, the module analyzes the list of invoked APIs (both those statically extracted by the SAM module and those evaluated at runtime by the DAM) to verify the existence of at least a WebView instance that enables JavaScript and exposes a JavaScript interface. Furthermore, if an exposed interface is found, the FCD parses the class of the injected Java object to determine the existence of methods that can be accessed from JavaScript.

Finally, the FCD also needs to detect the amount of potentially-vulnerable webpages. To this aim, the module collects the websites dumped by the WD and checks whether a page contains at least an Iframe element and does not enforce any mitigation techniques (i.e., the Content-Security-Policy meta tag in the HTML header or the sandbox attribute). At the end of the analysis, the FCD module marks the application as vulnerable or not vulnerable.

# Exploitation Checker (EC)
The Exploitation Checker is the module responsible for the detection of app configurations that can boost the exploitation of the Frame Confusion Vulnerability. In details, the EC can identify:
- The adoption of unencrypted communication channels, by analyzing the network traffic generated by the DAM module and by extracting the list of URLs that are accessed in plain HTTP.

- The presence of buggy/vulnerable Javascript libraries by relying on the RetireJS tool, which allows obtaining a list of known-to-be-vulnerable JavaScript libraries that are executed within the WebView.

5 https://repo.xposed.info/.

6 https://www.gnu.org/software/wget/.

# Droids in Disarray: Detecting Frame Confusion in Hybrid Android Apps
The presence of JavaScript code vulnerable to DOM-XSS attacks, by including a customized implementation of JSPrime. Such tool inspects the JavaScript code in order to detect unsanitized input variables that could allow an attacker to execute arbitrary JavaScript code in the victim’s WebView.

# 5 Experimental Results
We empirically assessed the reliability of the proposed methodology, by systematically analyzing 50 apps with FCDroid. Such apps have been downloaded from the Google Play Store in December 2018, and they are the top free Android apps ranked by the number of installations and average ratings according to Androidrank. Our experiments were conducted using an Intel Xeon 3106@1 GHz, with 32 GB RAM, running Ubuntu 18.

Frame Confusion Identification. The FCDroid tool discovered that 49% of apps (i.e., 24675 out of 50000) are hybrid, since they use at least a WebView component, thereby highlighting the wide adoption of such component in the Android ecosystem.

As shown in Table 1, all the apps with at least one WebView component enable the execution of JavaScript, while 44% also attach (at least) a JavaScript Interface.

7 https://www.owasp.org/index.php/DOM_Based_XSS.

8 The complete list of experimental results is available at https://www.fcdroid.com/results.

# D. Caputo et al.

JavaScript interface, which contains properly annotated methods. Such methods can be invoked from the websites loaded inside the apps.

Furthermore, FCDroid inspected all the websites accessed by the hybrid apps obtaining the results described in Table 2. In detail, 1% (87k/6M) of websites contain at least an Iframe element; among those pages, the 27% include CPS policies while none of the visited pages enforces the sandbox attribute. Therefore, such findings indicate that most of the web pages that use Iframe elements are potentially vulnerable to Frame Confusion. Finally, our analysis identifies that 6% (i.e., 1637) of hybrid apps are potentially vulnerable to Frame Confusion.

To estimate the impact of such results on the Android users’ community, we cross-referenced our findings with the Google Play Store meta-data, obtaining that the total sum of official installations for vulnerable apps is greater than 250.

# Exploitation Conditions
We further inspected the vulnerable apps with FCDroid, in order to detect the presence of other vulnerabilities in the app configuration that can make easier the exploitation of the Frame Confusion. As shown in Table 3, 59% of vulnerable apps access websites using an insecure connection, i.e., plain HTTP, while 27% contain code vulnerable to XSS attacks. Finally, 79% of vulnerable apps include JavaScript libraries with known security vulnerabilities.

# Advantages and Limitations of FCDroid
FCDroid combines static and dynamic analysis techniques to maximize the detection accuracy. To prove that, we compared the analysis results obtained by the static and the dynamic analysis with the hybrid approach of FCDroid, as shown in Fig. 3. In detail, the static analysis allows to identify 12% of apps as potentially vulnerable to Frame Confusion. Unluckily, such amount contains both true and false positives.

# Droids in Disarray: Detecting Frame Confusion in Hybrid Android Apps
# 135
# Original Request adv
# Forwarded Original Request adv
# Adv ATTACKER
# Original Response adv
# SERVER
Malicious = Phishing page: Fake Twitter Login
HacKed
discriminate, each app should be manually inspected, through a time-consuming and error-prone process. On the contrary, the dynamic analysis is not exhaustive, i.e., it may be unable to reach statically defined web pages, like those hardcoded in the app package, that are loaded in WebView components. Therefore, only 4% of apps are successfully detected as vulnerable (true positives) through dynamic analysis.

To overcome such limitations, the mixed approach (i.e., static and dynamic analysis) adopted by FCDroid detected 6% of (true positive) vulnerable apps automatically. Indeed, FCDroid allowed to automatically validate more than half of the potentially positive results detected by the static analysis. Furthermore, FCDroid increased the detection rate of the dynamic analysis by 1%.

Nonetheless, the experimental results also unveiled some limitations of the current FCDroid implementation. First, the dynamic analysis is limited to the public surface of the app (i.e., the one that does not require any user authentication) and executes in a predefined time-frame (i.e., 60 s). Furthermore, the implementation of FCDroid does not detect dynamically-generated Iframe elements, like, i.e., those created at runtime by the JavaScript code.

# 6 Attacking and Exploiting the Frame Confusion
In this section, we discuss the impact of a successful exploitation of Frame Confusion by attacking a news app (i.e., YTN News9) which has been found vulnerable by FCDroid. At the moment of writing, YTN is available on the Google Play Store and has more than 1M downloads.

We manually reverse-engineered and analyzed the app: it uses the WebView component to load a home page with several Iframes. The Iframe at the bottom
9 https://play.google.com/store/apps/details?id=com.estsoft.android.ytn.