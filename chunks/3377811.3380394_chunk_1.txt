# 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)
# Schrödinger’s Security: Opening the Box on App Developers’ Security Rationale
Dirk van der Linden, University of Bristol, dirk.vanderlinden@bristol.ac.uk
Pauline Anthonysamy, Google, anthonysp@google.com
Bashar Nuseibeh, The Open University, b.nuseibeh@open.ac.uk
Thein Than Tun, The Open University, thein.tun@open.ac.uk
Marian Petre, The Open University, m.petre@open.ac.uk
Mark Levine, Lancaster University, mark.levine@lancaster.ac.uk
John Towse, Lancaster University, j.towse@lancaster.ac.uk
Awais Rashid, University of Bristol, awais.rashid@bristol.ac.uk
# ABSTRACT
Research has established the wide variety of security failures in mobile apps, their consequences, and how app developers introduce or exacerbate them. What is not well known is why developers do so—what is the rationale underpinning the decisions they make which eventually strengthen or weaken app security? This is all the more complicated in modern app development’s increasingly diverse demographic: growing numbers of independent, solo, or small team developers who do not have the organizational structures and support that larger software development houses enjoy.

Through two studies, we open the box on developer rationale, by performing a holistic analysis of the rationale underpinning various activities in which app developers engage when developing an app. The first study does so through a task-based study with app developers (N=44) incorporating six distinct tasks for which this developer demographic must take responsibility: setting up a development environment, reviewing code, seeking help, seeking testers, selecting an advertisement SDK, and software licensing. We found that, while on first glance in several activities participants seemed to prioritize security, only in the code task such prioritization was underpinned by a security rationale–indicating that development behavior perceived to be secure may only be an illusion until the box is opened on their rationale.

The second study confirms these findings through a wider survey of app developers (N=274) investigating to what extent they find the activities of the task-based study to affect their app’s security. In line with the task-based study, we found that developers perceived actively writing code and actively using external SDKs have a potential impact on security. Prior work has focused on what developers do—although primarily in activities that surround the actual writing of code—we instead ask what drives developers to do things securely or not across the variety of app development activities: what rationale underpins their decisions?
To complicate matters, the demographic of app developers has expanded significantly as well: app development is no longer the domain of the select few with deep technical skills, training and knowledge. Apps are now being developed by a wide range of people with diverse backgrounds. Already in 2012 reports showed that 40% of app developers were independent solo developers.

# CCS CONCEPTS
• Security and privacy → Social aspects of security and privacy.

# ACM Reference Format:
Dirk van der Linden, Pauline Anthonysamy, Bashar Nuseibeh, Thein Than Tun, Marian Petre, Mark Levine, John Towse, and Awais Rashid. 2020. Schrödinger’s Security: Opening the Box on App Developers’ Security Rationale. In 42nd International Conference on Software Engineering (ICSE ’20), May 23–29, 2020, Seoul, Republic of Korea. ACM, New York, NY, USA, 12 pages. https://doi.org/10/3377811
# 1 INTRODUCTION
Security failures in mobile apps and their consequences are well understood – ranging from forgetting to sanitize user input to third party libraries using dynamic code-loading to execute malicious content, or simply copy pasting insecure or obsolete code snippets. But, secure app development is about more than just writing secure code. A range of activities, such as, choice of development environment plugins, seeking help when things go wrong and monetization of the app via third party ad libraries, all have a potential impact on security. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

ICSE ’20, May 23–29, 2020, Seoul, Republic of Korea © 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-7121-6/20/05. . . $15 https://doi.org/10/3377811
# ICSE ’20, May 23–29, 2020, Seoul, Republic of Korea
and more recent reports have shown that solo hobbyist and amateur developers constitute 43% of the app developer community. Professional app developers’ have moved towards smaller scales as well: solo or small scale developer teams constitute a further 36% of the demographic . With little ability to delegate things these (often independent) developers do not know how to do – or do not want to do – they must tackle a number of activities and considerations , exemplified in Figure 1. What developers do during all these activities (and not just while writing code) – and the rationale underpinning their actions – may compromise or worsen the security of the resulting app.

Yet, this increasingly diverse and independent group of developers remains under-studied, much research (e.g., ) focusing on experienced, well-established developers. Research also tended to focus more on what established developers do (wrong), e.g., programming errors , misuse of either APIs  or online information sources (e.g., Stackoverflow ) – while not eliciting why they do so. For instance, researchers have shown that copy/pasting from StackOverflow may be harmful . There are reasons why developers do it: shrinking deadlines, frustration with code not compiling, poor documentation – all contribute toward a valid rationale for developers to ‘throw caution to the wind’ and do something they may very well know to be less secure.

Similarly, while developers may understand the potential security implications of allowing third-party code to load into their app and execute, the necessary step of monetization brings exactly this threat of dynamic code loading. With developers often failing to convince users to pay even $0 for an app (let alone consider subscription fees for a service), many turn to advertisements as a reliable way of income. An increasing number of these libraries turn out to be malicious, e.g., Xavier  and Igexin . Likewise, most people would intuitively avoid accepting gifts from strangers. Or, in the context of app development, a USB stick from a local user group with a copy of one’s preferred platform development tools. Yet, as the Xcode-ghost malware that affected > 500 million iOS users  showed, there was a valid rationale behind doing exactly that: many developers lived in areas where they did not have sufficient bandwidth to (easily) download Xcode.

This paper is the first to present empirical insight into the rationale underpinning the various activities in which the ever-growing part of the developer community of diverse and independent app developers engage (cf. Fig. 1) and the extent to which security features in this rationale. The insight is based on two studies of app developers who have gone through such activities and published apps:
1. An in-depth exploration of developers’ prioritization (and subsequent rationalization) during tasks modeling these activities—what they do securely or insecurely, and why.

2. A survey of a large sample of app developers’ attitude towards the impact of various activities on app security—whether a wider representative sample of app developers’ attitudes supports or rejects the in-depth exploration.

Our analysis is the first to uncover that while developers may often make secure decisions across the different activities they have to deal with—even activities not dealing with code—opening the box on their rationale collapses the illusion of developers knowingly and intentionally acting securely. We contribute the following:
- When faced with a coding task, almost half (43%) of participants rationalize their decision using security considerations. However, when faced with any other kind of task, developers rarely rationalize their decisions using security considerations (supported by binomial test comparison of rationale proportions, p<0). This indicates that developers may only really consider security when facing code.

- When faced with most other tasks (e.g., building a license agreement), half (50%) of the participants performed them securely but did so without expressing a clear security rationale. This indicates that perceived secure development behavior may only be an illusion.

- When faced with the two tasks that involve (the need for) social interaction with others, few (14% and 23%) participants performed them securely (supported by binomial test comparison of task solutions, p<0). This indicates that developers may underestimate the impact their social interaction with other people can have on their app’s security.

- A wider survey of a representative app developer sample (N=274) further supports the finding that security rationales are focused on code-centric activities and perceived secure behavior across the wider spectrum of activities may be an illusion: while writing of code and active use of external SDKs are perceived to affect an app’s security, no other activities are clearly perceived by developers as impacting security.