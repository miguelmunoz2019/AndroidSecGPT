# 7. Discussion
Though we could analyze more samples, we believe that the quantity is enough since the methodology we introduced in the paper are universal and could be applied to larger quantity of samples. Besides, all samples we choose are popular and influential. We believe that other apps are similar to our samples and our samples are enough to help summarize the status. Although our large scale analysis reveals that the quantity of flawed in-app payment implementations is surprising, we have to point out that we underestimate the actual danger. During the TP-SDK identification, our methodology is based on static code feature. We classify many apps, especially in Android, protected by code packing techniques as not using any TP-SDK, while they do integrate TP-SDKs. In the detection of flaws in MA, we adopt static analysis for searching leaked KEY candidate, which may ignore those encoded-but-exposed KEY in apps. However, only a small portion of apps adopt such self-protection measures according to previous studies . Since our work presents a systematic approach to detect those vulnerabilities, we believe the analysts of merchants and cashiers could adopt our approach to audit their products before releasing.

Our security analysis mainly focuses on the interfaces of multi-party involvement in the third-party in-app payment. We pay less attention to the attacks or flaws only involving single party (traditional user-to-merchant payment model), for instance, the merchant order tampering, or denied-of-service attack on order ID or transaction ID.

# 8. Related work
# 8. Insecure third-party SDK
Meanwhile, vulnerabilities or threats introduced by third-party SDKs in mobile applications have also been studied by many researchers. Chen et al.  studied on potentially-harmful libraries across Android and iOS through clustering similar packages to identify libraries and analyzing them using AV systems to find those libs. Wang et al.  identified serious authentication and
# 8. Mobile app vulnerabilities
The security analysis of vulnerabilities in mobile application has also become hot spot these years, with the dramatic growth in mobile users. It’s common that misuse of security libraries leads to flaws in apps. iCryptoTracer  and CryptoLint  is proposed to identify the misuse of cryptography functions in iOS and Android apps respectively. CRIOS  focus on the large-scale app analysis for third-party library usage and network security on iOS. Fahl et al. , SMV-Hunter  and Reaves et al.  all perform their app analysis to detect unsafe SSL/TLS and cryptography usage. Different from all of these work, our analysis of security flaws caused by apps integrating third party in-app payment libraries. We reveal that these flaws during in-app payment caused both by merchant apps and third-party payment SDK providers. Among these flaws, KEY Leakage has been studied before. Both PlayDrone  and CredMiner  try to detect token exposure of AWS and OAuth in Android applications. However, we adopt a more efficient and accurate methodology, combining local program analysis and a remote Web API, to detect such flaws in third-party payment. Besides, our work covers the security threats and flawed implementations throughout the whole payment process, rather than focusing on a particular type of vulnerability detection.

# 8. E-commerce vulnerabilities
The security analysis of e-commerce and payment has attracted the attention of researchers in recent years, since vulnerabilities may cause great impact and financial loss. As far as we know, the only similar work is implemented by VirtualSwindle , which can perform an automatic attack against in-app billing service. However, it seems to be just a small part of our work. First, the in-app billing service described in the paper is just one scenario of the in-app third-party payment. The service is simpler and less popular compared to our research targets. Second, VirtualSwindle can only launch one type of attack and the adversary model assumed in the paper is too limited. However, our work describes four types of threats and attack model is more diversified. Third, only 85 Android apps were studied in the paper compared with the thousands of samples in our work. Overall, we perform a more large-scale and systematic analysis to third-party in-app payment.

Our work focuses on finding all flawed implementations throughout the whole payment process, not only launching one type of attack.

Another work on mobile payment is , which studied the security of mobile off-line payment token (QR code). Our work aims to find the flawed implementation of in-app payment, not the QR code payment in off-line situation.

Wang et al.  are the first to analyze logic vulnerabilities in Cashier-as-a-Service based web stores, and found several logic flaws manually. Sun et al.  propose to detect logical vulnerabilities in e-commerce application through static analysis of available program code. Pellegrino and Balzarotti  proposed the idea of black-box detection of logical vulnerabilities in e-shopping applications. Sudhodanan et al.  propose an automatic technique based on attack patterns for black-box, security testing of multi-party web applications. InteGuard  offers dynamic protection of third-party web service integration including cashier service in merchants’ websites. All of the work mainly target on e-commerce in web application, while we focus on mobile platform.

Compared with an automated security analysis against Android apps, that against iOS apps (especially large-scale apps) is more difficult since much less program analysis tools as well as methodologies for iOS apps have been proposed. In comparison to the conference version  of this paper we present new contributions especially on the analysis of iOS platform including: (a) new methodology of third-party payment SDK identification for 10,000 iOS apps; (b) automated vulnerability detection method designed for 3972 iOS payment apps; (c) new detection method of certain flaws for both Android and iOS (old method in our previous work was blocked due to our report); (d) new experiment results for vulnerable iOS apps, embedded TP-SDKs and their servers; (e) new vulnerability exploits and attack cases of vulnerable iOS apps in real world.

# 9. Conclusion
Insecure in-app payment is becoming a main threat to mobile ecosystem as more and more online transactions are transferring from website to app. Different from traditional web payment, in-app payment involves more sophisticated implementation details and the process is often obscure. To demystify processes of popular in-app payments and reveal potential security risks, we conduct a comprehensive analysis on mainstream third-party in-app payment schemes in Android and iOS apps. Our analysis investigates implementations of four in-app payments and concludes a series of security rules that should be obeyed. We not only pinpoint the serious consequence of violating security rules, but also detect these flawed implementations. Our statistics paint a sobering picture–hundreds of apps integrated with third-party in-app payment SDKs are vulnerable. Besides, our further investigation indicates that cashier, as well as merchant are blame for these flawed implementations. We hope our study can remind and guide developers of both merchants and cashiers to build more secure in-app payments.

# Declaration of interests
The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

#menu2b
22. Duan Y, Zhang M, Bhaskar AV, Yin H, Pan X, Li T, et al. Things you may not know about android (un) packers: a systematic study based on whole-system emulation. In: Proceedings of the 25th annual network and distributed system security symposium, NDSS; 2018.

23. Chen K, Wang X, Chen Y, Wang P, Lee Y, Wang X, et al. Following devil’s footprints: cross-platform analysis of potentially harmful libraries on android and IOS. In: Proceedings of the IEEE 37th symposium on security and privacy; 2016.

24. Wang R, Zhou Y, Chen S, Qadeer S, Evans D, Gurevich Y. Explicating SDKs: uncovering assumptions underlying secure authentication and authorization. In: Proceedings of the IUSENIX security; 2013.

25. Li T, Zhou X, Xing L, Lee Y, Naveed M, Wang X, et al. Mayhem in the push clouds: Understanding and mitigating security hazards in mobile push-messaging services. In: Proceedings of the 21st ACM SIGSAC conference on computer and communications security; 2014.

26. Nan Y, Yang Z, Wang X, Zhang Y, Zhu D, Yang M. Finding clues for your secrets: Semantics-driven, learning-based privacy discovery in mobile apps. In: Proceedings of the annual network and distributed system security symposium; 2018.

27. Wang H, Zhang Y, Li J, Liu H, Yang W, Li B, et al. Vulnerability assessment of OAuth implementations in android applications. In: Proceedings of the 31st annual computer security applications conference; 2015.

28. Chen EY, Pei Y, Chen S, Tian Y, Kotcher R, Tague P. Oauth demystified for mobile application developers. In: Proceedings of the ACM SIGSAC conference on computer and communications security; 2014.

29. Li Y, Zhang Y, Li J, Gu D. icryptotracer: Dynamic analysis on misuse of cryptography functions in IOS applications. In: Proceedings of the 8th international conference on network and system security; 2014.

30. Egele M, Brumley D, Fratantonio Y, Kruegel C. An empirical study of cryptographic misuse in android applications. In: Proceedings of the ACM SIGSAC conference on computer and communications security (CCS); 2013.