# 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)
# Too Quiet in the Library: An Empirical Study of Security Updates in Android Apps’ Native Code
Sumaya Almanee*, Arda Unal*, Mathias Payer1, and Joshua Garcia*
‘University of California Irvine, {salmanee, unala, joshug4}@uci.edu
fEPFL, mathias.payer@nebelwelt.net
# Abstract
Android apps include third-party native libraries to increase performance and to reuse functionality. Native code is directly executed from apps through the Java Native Interface or the Android Native Development Kit. Android developers add precompiled native libraries to their projects, enabling their use. Unfortunately, developers often struggle or simply neglect to update these libraries in a timely manner. This results in the continuous use of outdated native libraries with unpatched security vulnerabilities years after patches became available.

To further understand such phenomena, we study the security updates in native libraries in the most popular 200 free apps on Google Play from Sept. 2013 to May 2020. A core difficulty we face in this study is the identification of libraries and their versions. Developers often rename or modify libraries, making their identification challenging. We create an approach called LibRARIAN (LibRAry veRsion IdentificAtioN) that accurately identifies native libraries and their versions as found in Android apps based on our novel similarity metric bin2sim. LibRARIAN leverages different features extracted from libraries based on their metadata and identifying strings in read-only sections.

We discovered 53/200 popular apps (26%) with vulnerable versions with known CVEs between Sept. 2013 and May 2020, with 14 of those apps remaining vulnerable. We find that app developers took, on average, 528 ± 40 days to apply security patches, while library developers release a security patch after 54 ± 8 days—a 10 times slower rate of update.

# I. Introduction
Third-party libraries are convenient, reusable, and form an integral part of mobile apps. Developers can save time and effort by reusing already implemented functionality. Native third-party libraries are prevalent in Android applications (“apps”), especially social networking and gaming apps. These two app categories—ranked among the top categories on Google Play—require special functionality such as 3D rendering, or audio/video encoding/decoding , , , , . These tasks tend to be resource-intensive and are, thus, often handled by native libraries to improve runtime performance.

The ubiquity of third-party libraries in Android apps increases the attack surface ,  since host apps expose vulnerabilities propagated from these libraries , . Another series of previous work has studied the outdatedness and updateability of third-party Java libraries in Android apps , , with a focus on managed code of such apps (e.g., Java or Dalvik code). However, these previous studies do not consider native libraries used by Android apps.

We argue that security implications in native libraries are even more critical for three main reasons. First, app developers add native libraries but neglect to update them. The reasons for this may include concerns over regressions arising from such updates, prioritizing new functionality over security, deadline pressures, or lack of tracking library dependencies and their security patches. This negligence results in outdated or vulnerable native libraries remaining in new versions of apps. Second, native libraries are susceptible to memory vulnerabilities (e.g., buffer overflow attacks) that are straightforward to exploit. Third, and contrary to studies from almost 10 years ago , , native libraries are now used pervasively in mobile apps. To illustrate this point, we analyzed the top 200 apps from Google Play between Sept. 2013 and May 2020. We obtained the version histories of these apps from AndroZoo  totaling 7,678 versions of those 200 top free apps. From these apps, we identified 66,684 native libraries in total with an average of 11 libraries per app and a maximum of 141 for one version of Instagram.

To better understand the usage of third-party native libraries in Android apps and its security implications, we conduct a longitudinal study to identify vulnerabilities in third-party native libraries and assess the extent to which developers update such libraries of their apps. In order to achieve this, we make the following research contributions:
- We construct a novel approach, called LibRARIAN (LibRAry veRsion IdentificAtioN) that, given an unknown binary, identifies (i) the library it implements and (ii) its version. Furthermore, we introduce a new similarity-scoring mechanism for comparing native binaries called bin2sim, which utilizes 6 features that enable LibRARIAN to distinguish between different libraries and their versions. The features cover both metadata and data extracted from the libraries. These features represent elements of a library that are likely to change between major, minor, and patch versions of a native library.

- We conduct a large-scale, longitudinal study that tracks security vulnerabilities in native libraries used in apps over 7 years. We build a repository of Android apps and their native libraries with the 200 most popular free apps from Google Play totaling 7,678 versions gathered between the dates of Sept. 2013 and May 2020. This repository further contains 66,684 native libraries used by these 7,678 versions.

between binaries. However, these approaches identify semantic similarities/differences between binaries at the function-level, with the goal of identifying malware. LibRARIAN, orthogonally, is a syntactic-based tool which computes similarity between two benign binaries (at the file-level) with the goal of identifying library versions with high scalability.

We utilize LibRARIAN and our repository to study (1) LibRARIAN’s accuracy and effectiveness, (2) the prevalence of vulnerabilities in native libraries in the top 200 apps, and (3) the rate at which app developers apply patches to address vulnerabilities in native binaries. The major findings of our study are as follows:
- For our ground truth dataset which contains 46 known libraries with 904 versions, LibRARIAN correctly identifies 91% of those library versions, thus achieving a high identification accuracy.

- To study the prevalence of vulnerabilities in the top 200 apps in Google Play, we use LibRARIAN to examine 53 apps with vulnerable versions and known CVEs between Sept. 2013 and May 2020. 14 of these apps remain vulnerable and contain a wide-range of vulnerability types— including denial of service, memory leaks, null pointer dereferences, or divide-by-zero errors. We further find that libraries in these apps, on average, have been outdated for 859 ± 137 days. The combination of high severity and long exposure of these vulnerabilities results in ample opportunity for attackers to target these highly popular apps.

- To determine developer response rate of applying security fixes, we utilize LibRARIAN to analyze 40 apps, focusing on popular third-party libraries (those found in more apps) with known CVEs such as FFmpeg, GIFLib, OpenSSL, WebP, SQLite3, OpenCV, Jpeg-turbo, Libpng, and XML2, between Sept. 2013 and May 2020. We find that app developers took, on average, 528±40 days to apply security patches, while library developers release a security patch after 54 ± 8 days— a 10 times slower rate of update. These libraries that tend to go for long periods without being patched affect highly popular apps with billions of downloads and installs.

- We make our dataset, analysis platform, and results available online to enable reusability, reproducibility, and others to build upon our work.

# II. LibRARIAN
Unknown Lib Versions
LibRAry veRsion IdentificAtioN(LibRARIAN) Identified Library Versions
Known Lib Versions
# A. Feature Vector Extraction
Our binary similarity detection is based on the extraction of features from binaries combining both metadata found in Executable and Linkable Format (ELF) files as well as identifying features in different binary sections of the library. All shared libraries included in Android apps are compiled into ELF binaries. Like other object files, ELF binaries contain a symbol table with externally visible identifiers such as function names, global symbols, local symbols, and imported symbols. This symbol table is used (1) during loading and linking and (2) by binary analysis tools  (e.g., objdump, readelf, nm, pwntools, or angr ) to infer information about the binary.

To distinguish between different libraries and their versions, we need to identify differencing features. To that end, we define a set of six features inherent to versions and libraries. Five features represent ELF metadata, these features are used to compute the similarity score between two binaries as described in Section II-B, hence, we refer to these features as Metadata Features. Orthogonally, we leverage strings extracted from the .rodata section of an ELF object, which we refer to as Version Identification Strings. This feature complements the similarity score from the first set of features. We either use it to verify the correctness of the version or as a fallback if the similarity to existing binaries in our ground-truth dataset is low (see Section II-C).