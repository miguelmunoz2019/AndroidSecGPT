# Methodology
The authors captured and observed the getParkerHistory API response in Fiddler and discovered that the response from the server contained far more data about the user than what is displayed in the application user interface. Figure 1 shows the truncated output from the getParkerHistory API call response. The information from the API call includes phone number, last four digits of the credit card used to purchase a pass, ticket number, and ticket details (e.g., color, background, and letter). As the name of the API suggests, license plate number, location, and entry/exit time and date can also be found for parking app users. Apparently, multiple mobile applications deployed by the vendor for both mobile fare payments as well as parking payments used the same set of APIs to store and retrieve user data.

The authors discovered that the getParkerHistory API allows a malicious user to access the information of any other user in the system by first obtaining a valid session ID with one user, and then reusing this valid session ID with another user. Table 1 shows the required request parameters for the getParkerHistory API.

The ppverifiedparker parameter, which appears to be used to verify an authenticated user session, was not one of the required parameters. When providing the four required parameters in a request, the response from the server was the same as when all 17 parameters were provided. As a result, the getParkerHistory API returned user information without verifying the user’s ppverified-parker value. In other words, the server did not validate the pairing of the session ID and the user ID, which allowed a malicious user to reuse their session ID to access the information of any other user.

# Results
This vulnerability exposed private information from all users of this system, including name, phone number, and the last four digits of the user’s credit card number. Additionally, because parking and transit payment apps share the same server, license plate numbers and parking location history could also be retrieved for parking app users. Figure 3 shows the compromised researcher account information on the rider history screen in the application.

The same vendor has many similar versions of the application deployed for many different public sector agencies (i.e., ‘‘white-labeled’’ solutions) that appear to use the same server. As a result, customers in as many as 40 cities across the United States may have had their information exposed. The exact number of users affected is difficult to calculate with public information, as neither Google Play for Android devices nor the Apple App Store for iOS devices disclose the exact number of app installations. Google Play does publish a lower bound of installations that indicates an order of magnitude of the number of times the application has been downloaded (10,000 + , 50,000 + , 100,000 + , etc.). Additionally, some websites such as Sensor Tower (20) estimate the number of iOS installations from the Apple App Store. Based on these resources, an estimated 1,554,000 users across the United States may have been affected by this vulnerability.

# Rider History
# Discussion
On discovering this server-side vulnerability, it was determined that other applications published by the same vendor should be analyzed to determine if they used the vulnerable API call. The PassportParking Mobile Pay application (21) was also analyzed. It was found that this application used the same API but a different combination of parameters. This combination of parameters did not result in the same vulnerability when the ppverified-parker value was omitted from the API request.

However, as discussed above, parking information for a PassportParking account created for the analysis could still be retrieved using the API parameter format from the MyJTA application. In other words, users of the PassportParking app could still have their information exposed by this vulnerability. Figure 4 provides a diagram showing how this vulnerability affected multiple agencies. It is assumed these applications share the same server-side database.

# Dennis et al
database. The authors have no evidence that the vulnerability was exploited nor that users were affected; these user counts are rough estimates based on publicly available data to gauge the potential severity in the worst-case scenario.

This vendor is not alone in publishing white-label applications. As a result, this paper should not be viewed as singling out a specific agency or vendor but should instead be taken as a warning that this type of vulnerability could potentially happen in any system.

An attacker who can gather information about users by exploiting this vulnerability may be able to combine this information with other sources to steal another user’s identity. License plate information and parking locations may provide access to a large amount of additional information, including the user’s home and work addresses, which could be combined with the name and credit card information to create a more complete profile. In addition, if an attacker were able to identify the method used by the Passport server to create the QR codes, the attacker may be able to use the information from this API call to recreate tickets from another user’s account.

Many apps by the same vendor used the same vulnerable server Application Programming Interface (API).

Number of estimated users affected by the discovered vulnerability.

Note: API = Application Programming Interface.

The vulnerability was discovered in early October 2018 and was reported to Jacksonville Transportation Authority (JTA) on October 30, 2018. The research team received no further communication from the transit agency or mobile app vendor but confirmed that the vulnerability had been patched by December 8, 2018, via additional testing. The time taken to patch the vulnerability was well within the current industry standard.

# Transportation Research Record 00(0)
given the level of effort required to fix the issue as esti- mated by the research team.

The vulnerability report included the following disclo- sure statement: ‘‘This research project follows a 60-day disclosure deadline. After 60 days elapse or a patch has been made broadly available, the vulnerability will be dis- closed to the public.’’ Following vulnerability disclosure policies from various organizations including Google (23) and Cisco (24), the research team would typically use a 90-day disclosure deadline. However, because of the perceived ease of the vulnerability patch, which only required a server-side change, and the sensitivity of the exposed information, the team shortened the period to 60 days. As mentioned above, the vulnerability was fixed in under 38 days.

The vulnerability report was sent to a staff member from the transit agency participating in a Florida-based cybersecurity working group that was organized by the research team under this same project funded by the Florida Department of Transportation (DOT). Neither the transit agency nor the mobile app vendor published any public vulnerability disclosure policies. If the research team did not have this existing relationship with this staff member, the disclosure would have been sent to the general contact email listed on the transit agency’s website. While the vulnerability was fixed, the research team is unaware of the exact process used to communi- cate and patch the vulnerability. However, this transit agency is not alone. After a review of the websites of transit agencies in Florida, the research team could not find public vulnerability disclosure policies for any agen- cies. While the vulnerability was patched quickly in this scenario, policies are needed to ensure future incidents are also resolved quickly and with improved communica- tion with relevant parties. The following section describes the need for publicly available vulnerability disclosure processes in detail.

As mentioned earlier, because the vendor’s application was ‘‘white-labeled,’’ or a shared system with deploy- ments at other transit agencies and cities, up to 40 orga- nizations and their customers may have been affected by this vulnerability across the United States. The research team does not know if the transit agency or the vendor notified any of the other potentially affected organiza- tions or end-users. The Florida Information Protection Act of 2014 (25) requires a covered entity to provide noti- fication within 30 days after a breach affecting 500 or more individuals in Florida is discovered. However, this specific Florida law uses a relatively narrow definition of personally identifiable information (PII): it primarily focuses on social security or driver license numbers, full credit card numbers in combination with a PIN, and full plain text usernames and passwords that could be used to access an account directly. If the breach does not meet this definition of PII, it does not need to be reported. Notably, the information obtained by the authors using the discussed vulnerability does not appear to meet this threshold and, as a result, the transit agency and vendor may not be legally required to disclose this vulnerability. The research team did not review the data breach laws for other states, which may have broader definitions of PII or specific requirements in the event of a breach.