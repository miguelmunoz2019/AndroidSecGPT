# Privacy Protection Framework for Android
DILBAG SINGH 1, AASTHA AGARWAL 1, AYUSH GOEL 3, (Senior Member, IEEE) BHARAVI MISHRA, (Member, IEEE), AND HEUNG-NO LEE 1, AMAN AHMAD ANSARI 1, PRAMOD GAUR 2,
1The LNM Institute of Information Technology, Rajasthan, Jaipur 302031, India
2Birla Institute of Technology and Science Pilani, Dubai, United Arab Emirates
3School of Electrical Engineering and Computer Science, Gwangju Institute of Science and Technology, Gwangju 61005, South Korea
Corresponding author: Heung-No Lee (heungno@gist.ac.kr)
This work was supported in part by the National Research Foundation of Korea (NRF) Grant funded by the Korean Government (MSIP) under Grant NRF-2021R1A2B5B03002118; and in part by the Ministry of Science and ICT (MSIT), South Korea, under the Information Technology Research Center (ITRC) Support Program under Grant IITP-2021-0-01835 supervised by the Institute of Information & Communications Technology Planning & Evaluation (IITP).

# ABSTRACT
The increase in popularity and users of the Android platform in recent years has led to a lot of innovative and smart Android applications (apps). Many of these apps are highly interactive, customizable, and require user data to provide services. While being convenient, user privacy is the primary concern. It is not guaranteed that these apps are not storing user data for their need or scrapping algorithms through them. Android uses the system of permissions to provide security and protect user data. The user can grant permission for requested resources either at runtime or during the installation process. However, this system is often misused in practice by demanding extra permissions that are not required to provide services. These kinds of apps stop functioning if all permissions are not granted to them. Therefore, in this paper, a privacy preserved secure framework is proposed to prevent an app from stealing user data by restricting all unnecessary permissions. Unnecessary permissions are recognized by predicting the permissions required by a given app by using collaborative filtering and frequent permission set mining algorithms. Thus, the proposed model interacts with the target application and modifies the permission data inside. Experimental results reveal that the proposed model not only protects the user data but also ensures the proper functioning of the given application.

# INDEX TERMS
Android, instrumentation, permission model, security, privacy.

# I. INTRODUCTION
Android is the most popular operating system (OS) when it comes to mobile platforms. According to Global Stats , Android OS enjoys almost 75% of the market share in the Mobile OS Industry, followed by iOS with a 25% share in June 2020. Users prefer Android because of its free and open-source nature with support for many apps. Developers also select Android over the competitive iOS as it is open-source in nature. Applications for Android are written mainly in Java and are commonly referred to as ‘apps’.

Security is a crucial aspect of apps. The nature of Android apps makes it difficult to rely on standard, traditional, and dynamic malware analysis systems . Google launched a Google play app security improvement program for providing security services to Google Play app developers to improve the security of their apps . Apps are scanned for potential malware before uploading on Play Store. In 2017, Google worked on detecting malware and potentially harmful apps for improving security on devices and Play Store using Google Play Protect . In Android 9, Google put a restriction on the access of sensors in the background so that apps running in the background cannot access the camera, microphone, and sensors.

To protect user data and passwords, Google has provided a feature for hardware-backed keys. Safe Browsing application programming interface (API) is also present for protection against deceptive websites. While there have been significant developments towards platform security, application development security, and secure Android OS, the apps taking user data can sometimes be malicious. With over 2 million apps already present in the Google play store , it is hard to determine which app is malicious or which may take data to analyze behavior or sell it to any third party.

To prevent the issue of data security and malicious usage of the applications, Android works on the principle of
VOLUME 10, 2022 This work is licensed under a Creative Commons Attribution 4 License. For more information, see https://creativecommons.org/licenses/by/4/
# EEE Access
# B. Mishra et al.: Privacy Protection Framework for Android
permissions, i.e., the apps must ask for the permissions required for their applications from the user, and Android provides access to the APIs of that very permission only if the user grants it –. The Android system has permission categories based on security levels - normal, dangerous, and signature permissions. The developer just needs to mention the required permissions in the manifest file. The Android system does not prompt users for such permissions. The dangerous permissions could lead to some severe data breach problems. Hence, these permissions need to be mentioned in the manifest file and should prompt the user to allow the app to use these permissions inside the app. It allowed users to use the app without really permitting access to any permissions. However, this still did not solve the issue of data breaching as some apps started to crash when the user declined the requested permission.

As discussed, the Android OS platform works on permission mechanisms. Certain apps take many permissions. The intent and nature behind these permissions motivated us to study data trade, user privacy leaks, and current security policies in Android. After analyzing many of the applications, it is found that the application developer misuses permissions to steal the user’s private and personal data. Android 6 (Marshmallow) Android has provided support to allow/decline permissions, i.e., users could decide whether an app requires specific permissions and could decline whatever permissions they find unnecessary. However, this often leads to apps being crashed on purpose by the developer if specific malicious permission(s) are rejected.

Due to a lack of protection in dangerous permissions associated with sensitive APIs, user privacy is exploited by malicious apps by manipulating users and application services. This situation motivated us to make a system that would improve the app’s functioning while securing sensitive data. In this paper, a framework of data protection is proposed that will ensure data security and try to stop on-purpose crashes by making the app believe it has access to the requested data.

This paper addresses the malfunctioning of applications when permissions are denied and protects data privacy. Considering all these issues, service is enforced to identify the malicious permissions inside the installed applications on the user’s device. The proposed framework provides services to predict the permissions required by an app and instructs the app to prevent malfunction dynamically. The instrumented Android Package (APK) file is installed on the target device. It communicates with the server service at runtime whenever a potentially dangerous API is triggered. The mobile client communicates over the insecure public channel (the Internet). The communicated messages can be read or modified over the network, or the mobile client’s identity can be known to an adversary. Therefore, an anonymous authentication and key agreement scheme are also proposed to protect communication without revealing the client’s identity. Thus, the proposed framework protects user data without affecting the functionality of the application.

The paper is organized into the following sections. Section II describes security measures that are available in Android. Sections III and IV describe the motivation and previous work done in this regard, respectively. The proposed framework and the communication scheme are discussed in section V. The application of the proposed model, through a case study, is discussed in section VI. Conclusions and future work are shown in section VII.

# II. SECURITY IN ANDROID
# A. ANDROID ARCHITECTURE
Android is a Linux-based open-source software program or rather, an Operating System (OS) . The platform security is based on the OS’s architecture, Fig. 1, which is achieved by separating resources and accessibility in subsequent layers.

Each layer assumes that the proceeding layer is secure. Subsequent layers become less accessible. The Linux kernel runs on the lowest level and is responsible for performing the basic OS operations such as process management, memory
# B. Mishra et al.: Privacy Protection Framework for Android
management, and managing other device-related operations. Above the Linux, kernel layer runs the Hardware Abstraction Layer (HAL) which is responsible for providing a standard interface to hardware so that hardware vendors can build their hardware without affecting higher-level layers. Now, the OS can be updated without changing or re-configuring hardware implementations. It also provides an advantage in the HAL. It promotes the principle of least privileges, as HALs in a process do not have access to an identical set of permissions compared to the rest of the process.