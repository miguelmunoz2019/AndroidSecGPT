Another important but orthogonal question is whether the app virtualization framework itself can be abused to achieve unintended functionality. For example, we observe that app virtualization is used by developers as an alternative approach to repackage existing Android apps. Repackaging apps used to be a common way to create and distribute malware  — making a malicious version of Angry Birds with a backdoor. As defenses, a large number of detection techniques (mostly based on similarity) were proposed to detect app repackaging . However, using app virtualization, existing techniques become insufficient. One reason is that the original app is now wrapped by the virtualization framework, which encrypts the original app and decrypts it at runtime, and is invisible to traditional static analysis tools. We therefore propose a new approach to address this challenge. Specifically, by analyzing 250,145 apps automatically from four app markets, we are able to locate 164 zero-day malware and 29 suspicious apps. Furthermore, we upload these apps to VirusTotal , and find that although some apps are labeled as PUP (potential unwanted program), few of them are explicitly labeled as malware. Our further investigation shows that the existing anti-virus engines cannot tell malware from benign app virtualization frameworks.

# Contributions
The contributions of our work are summarized as follows:
- We systematically identified the security vulnerabilities of app virtualization, and revealed that many Android existing security assumptions/policies are broken in almost all studied virtualization frameworks, causing serious consequences (e.g., stolen cookie and login token).

- We thoroughly investigated the severeness of these vulnerabilities. Our experiments revealed that a large amount of private data (in social apps) are exposed to malware, and malware can be easily pushed to users who use the virtualization frameworks.

- We pointed out that malware is using app virtualization as an alternative way to repackage apps. We proposed a new approach to detect such malware and find 164 zero-day Android malware in 4 app markets.

# 2 BACKGROUND
In this section, we provide necessary background for understanding how the app virtualization works and how the access controls are performed in Android.

# 2 App virtualization
App customizations are highly demanded by Android users. For example, many users need to manage multiple Facebook or Twitter accounts within one Android device. However, the social apps normally disallow the users to login multiple accounts simultaneously from the same device. Besides, many apps apply obfuscation or packing techniques to protect their code integrity. Thus, it is difficult to modify a highly obfuscated Android app. App virtualization is a popular solution to customize apps without modifying their code.

Currently, app virtualization is applied to achieve various customization requirements, including: (1) creating multiple instances of a customized app without installing it to an Android device;
# 17:4
# L. Zhang et al.

# Facebook Customized Game Virtualized Apps
# App Request Wrapper Access Control
# Facebook Virtualization Framework
# Android Framework
(2) mocking device information including IMEI, phone number, location, etc; (3) bots, for example, automatically clicking the window of a game, sending messages to a group of people; (4) encrypting/decrypting user privacy in a given app; (5) breaching device restrictions. For example, in China, Google Play Service (gps) is forbidden, thus most of the Android devices cannot utilize the gps framework, causing many apps to be not functional. Android users can break the restriction by using a virtualization framework which pre-installed a gps framework.

As depicted in Figure 1, virtualization frameworks act as a virtual execution environment. Specifically, they load the code of the customized apps at runtime, and execute the code in their own process. When an app is executed on such a framework, all its requests to Android are collected and submitted by the request wrappers. On one hand, these wrappers are convenient to customize the virtualized apps, for example, to forge the location by modifying the response of system service LocationManagerService. On the other hand, they take the place of the virtualized apps to communicate with the Android framework. As a result, Android determines the virtualization framework as the owner of all the requests, although none of them are generated by the framework itself. However, many Android access control policies are built upon the assumption that Android can correctly identify the senders of requests, which is invalid in the virtualization frameworks. For example, to enforce that each app can only manipulate its own internal storage, Android framework checks the uid of apps. However, for all apps executed on the same virtualization framework, their code is executed under the same uid, that is, the uid of the framework. As a result, the isolation mechanism is broken. Actually, in any of the studied virtualization frameworks, a virtualized app can arbitrarily read or write files of another. Thus, a systematic review of Android security model in virtualization frameworks is necessary.

# 2 Access controls in Android
To maintain the security of Android system and mobile users, Android enforces many access control mechanisms, including its permission-based security model and some app-level isolation policies.

# Permissions
To prevent apps from abusing Android system resources, Android provides a set of permissions and ensures that each app should be granted the corresponding permission before it accesses a sensitive resource. Before Android version 6, permissions can only be granted when users are installing apps. To install an app, users should grant all the requested permissions to the installed app, otherwise the installation is canceled. After version 6, Android starts to support dynamic permission granting. In the new permission model, normal level permissions are granted automatically, and any higher-level permissions should be explicitly granted. Specifically, when
Proc. ACM Meas. Anal. Comput. Syst., Vol. 3, No. 1, Article 17. Publication date: March 2019.

# App in the Middle
an app is going to access a system resource with a dangerous level permission, a popup window appears to ask the user to grant the permission or deny the access. Besides, signature level permissions can only be granted to apps signed by the same developer.

# App-level Isolations
Android security model provides a set of isolation and access control policies. As a fundamental piece of this model, every Android app is assigned a unique id (uid). Then, Android isolates the execution spaces of apps by their uids. For example, Figure 2 illustrates a code snippet, which verifies the identity of the caller by checking its uid.

1 int uid = Binder.getCallingUid();
2 if (uid == System_UID) {
3                  #   sensitive operation
4 } else {
5                  throw new SecurityException(...);
6 }
# 3 VULNERABILITIES OF VIRTUALIZATION FRAMEWORKS
As we introduced in §2, the adoption of app virtualization may break many security assumptions of the Android access control system, causing security threats to the apps executed on the virtualization frameworks. In this section, we first give an example to illustrate the real-world damage of vulnerabilities in these frameworks. Then, we systematically study the virtualization frameworks collected from Google Play.

Our results in §3 show various security threats to these frameworks. Finally, we show several real-world exploitation demos and introduce how they work. We reported these vulnerabilities to the corresponding developers of the virtualization frameworks, and now we received confirmation from one of them.

# 3 A motivating example
WhatsApp is one of the most popular social apps in the world, and it maintains a plenty of user privacy. To manage two WhatsApp accounts simultaneously in one Android device, many users install it into a virtualization framework, e.g., Parallel Space. By calling getDataDir(), WhatsApp aims to get the directory of its internal storage (/data/data/WhatsApp/ in Android file system). However, to achieve virtualization, Parallel Space redirects the return value of this function call to a specific subdirectory of its own storage (/data/data/Parallel_Space/parallel/0/WhatsApp/). As a result, all user private data are stored to the new location. Suppose a malware Mal is also installed to the virtualization framework. When Mal is attempting to access /data/data/Parallel_Space/parallel/0/WhatsApp/, Android security policy is not violated because both WhatsApp and Mal are executed in the same app (Parallel Space) with the same uid. Furthermore, since Parallel Space does not restrict the access of Mal, user privacy managed by WhatsApp is leaked to Mal. Our proof-of-concept demo illustrates this attack.

# 3 Overall methodology
Android implements a series of isolation and access control policies to restrict the capability of Android apps. However, our motivating example illustrates that apps running on commercial virtualization frameworks can easily bypass certain security policies. To thoroughly unveil the security of these virtualization frameworks, we summarize the security concerns enforced by the
Proc. ACM Meas. Anal. Comput. Syst., Vol. 3, No. 1, Article 17. Publication date: March 2019.