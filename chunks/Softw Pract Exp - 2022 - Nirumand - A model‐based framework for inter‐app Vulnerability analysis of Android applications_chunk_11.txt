# 7 Comparing with IccTA, Amandroid, and COVERT
In this section, VAnDroid2 is compared with three existing state-of-the-art static analyzers targeting ICC vulnerability detection: IccTA, Amandroid, and COVERT. All of these analyzer tools have high accuracy in identifying privacy leakage vulnerabilities and are the most related tools to ICC and IAC. Three benchmarks, DroidBench, ICC-Bench, and Ghera, are used in this comparison. The first two benchmarks, DroidBench and ICC-Bench, are two benchmarks of Android applications with ICC-based privacy leaks for which all vulnerabilities are known in advance. DroidBench contains Android apps for evaluating the tools in various static analysis problems, including ICC analysis and inter-app communication analysis. ICC-Bench is another benchmark of Android apps for various purposes, including Intent communication. In this benchmark, each Android app contains at least one ICC leak. As described in Section 6, Ghera is a growing repository of Android apps that contains known vulnerabilities in various categories, including ICC. In this comparison, the results of ReproDroid, as a framework to infer the ground truth for data leaks in Android apps, are considered to identify the ground truth for each test case in DroidBench and ICC-Bench. This comparison is based on True Positive (TP), False Positive (FP), and False Negative (FN). Also, the precision, recall, and F-measure of the tools are calculated.

As can be seen in Table 9, the results indicate that VAnDroid2 outperforms the other two analysis tools and achieves higher precision (100%), recall (96%), and F-measure (98%) in ICC analysis. VAnDroid2 succeeds in identifying 22 vulnerabilities out of 23 in the DroidBench benchmark and detecting all 18 vulnerabilities in the ICC-Bench suite. In the case of DroidBench, similar to Amandroid, VAnDroid2 has a false negative. The false negative of Amandroid is due to this tool cannot consider the Java Singleton in its modeling. Therefore, Amandroid is not able to detect ICC vulnerability for the Singletons1 app. The false negative of VAnDroid2 is due to VAnDroid2 uses only static analysis techniques for Android ICC analysis of Android applications. The UnresolvableIntent1 app has an intent sending mechanism that cannot be resolved statically. Therefore, VAnDroid2 is not able to detect this type of vulnerability.

Among the vulnerability analysis tools (listed in Reference 58), COVERT claimed to detect inter-app vulnerabilities. We compared the effectiveness of VAnDroid2 with COVERT in inter-app vulnerability detection. In this comparison, the extended version of DroidBench proposed by Pauck et al. and the bundles of the Ghera repository are used. Only bundles related to ICC contain Intent Spoofing or Unauthorized Intent Receipt vulnerabilities from the Ghera repository are considered. These bundles are the six bundles introduced in Section 6. Table 10 summarizes the results of this.

https://mdse.ui.ac.ir/project/vandroid2/
1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# NIRUMAND et al.

# (a) DroidBench2
# (b) ICC-Bench
# Summary
Comparison. As can be seen, VAnDroid2 outperforms the COVERT tool and achieves a precision of 100%, a recall of 100%, and an F-measure of 100%, in inter-app analysis.

As shown in Table 10, for the DroidBench benchmark, VAnDroid2 outperforms the COVERT tool and succeeds in detecting all inter-app vulnerabilities. According to the results of applying COVERT to the bundles of Ghera, while COVERT claimed to detect inter-app vulnerabilities, it could not identify any of the ICC vulnerabilities in the six bundles. As can be seen in Table 10, VAnDroid2 significantly outperforms the COVERT tool and detects all the vulnerabilities in these bundles without any further reported security issues. Therefore, according to Tables 9 and 10, VAnDroid2 outperforms the other analysis tools in terms of precision, recall, and F-measure.

# 7 Other types of ICC vulnerabilities
While Intent Spoofing and Unauthorized Intent Receipt vulnerabilities have been the focus of this paper, we believe that VAnDroid2 can be extended to identify other kinds of ICC vulnerabilities and significant components of VAnDroid2 can be.

# Comparison of VAnDroid2 with COVERT
# (TP, FP, and FN are specified by symbols , ⊠, □, respectively)
# (a) DroidBench3
reused. Each further security analysis is built on top of VAnDroid2 and involves extending two phases: the Transformation and Integration phase and the Analysis phase (i.e., phases 1 and 2 in Figure 7).

As described in Section 2, the ICC mechanism can be done through URIs. URIs are used to communicate with the Content Provider component as a database for an Android app. We still see various reports about security issues in Android apps, including insecure interprocess communication and data leakage problems. Therefore, an important category of inter-app vulnerabilities is information data leakage. For this type of vulnerability, VAnDroid2 must be extended to consider ICC information related to URIs and data sharing as the main mechanism for Android that allows app components to share data.

To show the extension potential and reuse of VAnDroid2, we describe an example of inter-app information leakage vulnerability. Consider a bundle of the Ghera repository called InadequatePathPermission-InformationExposure. This bundle contains benign and malicious apps. The benign app has a Provider called UserDetailsContentProvider that is exported (i.e., the other app components can access this provider). This app component has a path-permission edu.ksu.cs.benign.permission.internalRead with the path prefix /user. This permission controls access to a folder and has no control access over subfolders. The malicious app has a MalActivity component. This malicious component has created a read operation request for data within the provider of benign. This data read request has a URI content://edu.ksu.cs.benign.userdetails/user/ssn.

As explained above, the provider of benign protects the data within the /user folder and does not perform any protection for the data within the subfolders /user/ssn. Therefore, the malicious app can exploit this ICC vulnerability to perform malicious activities.

The following efforts are required to extend VAnDroid2 to support the analysis of this ICC attack scenario.

- Extend the transformation and integration phase. First, the Android Application Security Aspects metamodel must be extended to address the concepts related to the URIs and data sharing mechanism. Since the Provider is responsible for sharing data between app components, it has a complex security model. As depicted in Figure 19, according to the metamodel (the part related to the ContentProvider element), ContentProvider needs to be extended to address all scopes of provider permissions such as path-permission. Second, the ICC metamodel must be extended to extract
# NIRUMAND et al.

# ContentProvider
1097024x, 2023, 4, Downloaded from Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
all potential data sharing interactions between app components at intra- and inter-app levels. Finally, the M2M transformations need to be extended to extract all ICC information from bundles of Android apps, which is needed for analyzing data sharing communications between app components.

- Extend the analysis phase. The formal analysis process needs to be extended to identify the data leakage vulnerabilities at intra- and inter-app communication levels.

# 7 Comparing with the original VAnDroid framework
Tables 11 and 12 present a comparison between VAnDroid2 and the original VAnDroid framework 19 according to the following dimensions.

- Approach Positioning (Research Problem). This dimension (the first part of Table 11) characterizes the objectives of VAnDroid and VAnDroid2.

- Approach. The second part of Table 11 characterizes the approaches presented in VAnDroid and VAnDroid2.

- Tool support. The third part of Table 11 specifies the features of two tools, VAnDroid and VAnDroid2.

- Evaluation and results. The first part of Table 12 is about the evaluation of VAnDroid and VAnDroid2.

- Comparing with state-of-the-art analysis tools. The second part of Table 12 is about the comparison VAnDroid and VAnDroid2 with state-of-the-art tools.

# 7 Limitations and threats to validity
# 7 Limitations
One limitation of VAnDroid2 is related to input Android applications. Since VAnDroid2 uses MoDisco to generate the Java model, only apps with standard GUI widgets for Android API and without anonymous classes can currently be considered. To overcome this limitation, we can improve MoDisco or consider another tool to generate the Java model. Another limitation is related to the analysis of “strings” of intent values. Currently, VAnDroid2 can only perform simplified string analysis to extract the intent values. Nevertheless, VAnDroid2 can be extended to perform more complex string analyses of Android applications.

# 7 Threats to validity
One threat to the validity of our evaluation results is the generalization of obtained results to bundles outside of our study. To overcome this threat, for 10 experiments, we considered a combination of benign apps, malicious apps, and vulnerable.

# Comparison of VAnDroid2 with the original VAnDroid framework
# NIRUMAND et al.