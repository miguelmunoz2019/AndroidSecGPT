ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
can get control over the execution flow. First is a direct method in which flow is redirected to any arbitrary code by overwriting the stack pointer. Depending upon the position of the buffer, either ROP or JOP can be used to overwrite the stack pointer. ROP is usable when the buffer location is on the stack, but in the case where the buffer is located on the heap then JOP is used. Another method is an indirect approach to control the flow of a program. In the latter method, the primary motive is to overwrite an entry in the Global Offset Table to gain control of the program. The overwriting process is similar to JOP and ROP. ASLR, Stack Canaries, and DEP are existing security measures adopted for protecting Android against SOP attacks. The ROP and similar attacks require knowledge about the binaries to exploit it.

# Blind ROP Attack
A Blind ROP (BROP)  attack can be launched even without knowledge of target code or binaries. This attack is able to exploit a stack buffer remotely without using binaries. This method can hack servers that are based on open source platforms, and this method can also hack closed binary operations. This hacking can take place even without knowing the target source code and binaries. Two requirements to execute this attack are (a) knowing the vulnerability in the stack and the information about how to exploit it and (b) a server application that will restart every time after it crashes. This known vulnerability in the stack is exploited to launch a buffer overflow attack using known methods. The buffer overflow causes the server to crash. The attacker must be able to crash the server n number of times and every time server is supposed to restart. The period during which server restarts is utilized by attackers to find enough instructions/binaries (gadgets) to trigger and control arguments of “write” system call of the victim system. Attackers then embed sufficient malicious binaries to exploit the system. In this way, attackers can remotely attack the system and hack it. Randomizing the address space of the server when it restarts, sleep on crash, and Control-flow integrity (CFI) are few techniques that are used to mitigate a BROP attack.

# Sigreturn-oriented Programming Attack
Another variant of ROP is SROP . This method breaches security offered by ASLR, DEP and Stack Canaries. The malware developers use SROP for exploiting source code and also for introducing a backdoor into the target system. The method of attack is similar to ROP, but the preconditions for launching the SROP attack are different from that of ROP. Unlike ROP, in SROP only a single gadget is to be known for exploitation, e.g., sigreturn or syscall. The gadgets have mostly fixed positions in the memory. The attack mechanism involves placing a fake structure of signal context  on the stack (call stack) and then overwriting a return address with the address of a known gadget. This gadget will help the attacker in accessing either syscall or sigreturn. Further, SROP is platform independent, and it can attack against different operating systems; this makes it even more critical attack. Technologies present to defend system from these attacks are ASLR, Signal cookies , Vsyscall emulation , Return-Address Protection (RAP) , and Control-flow Enforcement Technology (CET).

# Returning to Libc Attack
This is an approach that can exploit the weakness in the system to impose buffer overflow attack on a stack that is non-executable. As the stack is non-executable, it is not possible to inject malicious code and execute using the traditional buffer overflow method. To overcome this problem, the attackers use the function provided by the library to execute the return to libc attack. In this method, the malware overwrites the return address, using a stack overflow method, to a libc function, and if it passes right arguments to this function, then the function will execute the code bypassing the security provided by non-executable stack . Recently, a return-to-art attack is also used by attackers to attack new ART architecture. This attack is very much like a return-to-libc attack . ASLR, Stack smashing, and No eXecute(NX) bit methods safeguard the system from the return-to-libc attack to an extent.

# Return-to-user Attack
ret2usr attack is also an example of code reuse attack. In this attack, the malware application overwrites the kernel pointers. Attackers then have control over the
ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

P. Bhat and K. Dutta
Execution flow, and they redirect it to the address of arbitrary code in the user space. It is essential to isolate the kernel and user address space to increase the kernel security. Researchers have proposed many methods, which prevent the random transfer of control flow between the kernel and userspace. There exists defensive methods for ret2usr attack like kGuard, Supervisor Mode Execution Protection (SMEP)/Supervisor Mode Access Protection (SMAP), Privileged Execute-Never (PXN)/ Privileged Access-Never (PAN), and Non-executable pages (KERNEXEC)/Userland-kernel separation (UDEREF) . These methods isolate both address spaces but only explicitly and not implicitly. So attackers are exploiting implicitly shared address space to breach the present defensive techniques. The ret2dir attack does the same by exploiting the information given in Page Frame Numbers (PFN’s). Researchers  have proposed an eXclusive Page Frame Ownership (XPFO) scheme that helps in protecting the kernel from ret2dir attack.

ROP attacks and its variants are still persistent and are continuously exploiting weaknesses in security policies employed by the Android system . Attackers have found various mechanisms to bypass the security offered by ASLR and other security techniques. Many factors contribute to the proliferation of these attacks one of them is using security techniques like ASLR require a large number of resources to perform well, which degrades the performance of the device and also increases its cost. Hence, most of the systems do not adopt these techniques. Also, the Zygote process used by application runtime architecture in the Android system to fork each user-based application weakens the ASLR security. Each application has a systematic memory design that challenges the concept of randomization used in ASLR technique . In Android Oreo a Kernel Address Space Layout Randomization (KASLR) technique is used to reduce attacks at the kernel level. KASLR randomizes the space used to place kernel code during boot time . It renders help in preventing the attacks mentioned above. Every time the system is booted, this technique randomizes the location of kernel code, this helps in safeguarding the kernel from code reuse attacks . However, researchers  have shown that this KASLR technique can be evaded by a timing attack named DrK, which exploits a hardware feature called Intel Transactional Synchronization Extension (TSX) found in latest CPUs. This attack can de-randomize the location of kernel code. Usually, OS is supposed to intervene when a hardware exception occurs, but TSX suppresses such exceptions from being notified to the OS. It results in abortion of the transaction and invoking of the abort handler. The time difference in accessing mapped and unmapped memory locations in the kernel during abort handling is calculated by the DrK to de-randomize the kernel code. So, it will not be surprising in future if attackers explore any such vulnerability in the Android environment that can put the credibility of KASLR in a questionable state. Other than KASLR,  the latest advanced security features on Android Oreo:
- PXN - Prevents a process from executing a code for which it does not have privilege.

- PAN - Prevents from redirecting a kernel pointer to userspace.

- Post-init read-only memory - Prevents from overwriting important kernel pointers.

However, even these advanced security features fail to prevent against root exploitation technique called Kernel Space Mirroring Attack (KSMA). The KSMA can bypass both PAN and PXN and reach the kernel space to exploit kernel vulnerabilities. The KSMA exploits minor design fault of ARM virtual memory system’s virtual memory translation descriptor. In violation of the principle of least privilege, the data access permissions for stage 1 of the Exception level 0 (user mode), provide read/write capability to the unprivileged user. Though the permission seems useless because of PAN; attackers have successfully exploited this vulnerability to read and write kernel data virtual address without using syscalls, from user mode. It shows that even the latest Android Oreo devices can easily be rooted.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.