Further analysis of these tools is given in Table 6.

A number of tools and techniques has been developed so far by researchers to minimize the unnecessary permissions requested by the applications and their respective ad libraries. These tools can identify and protect the system from different types of privilege escalation attacks. Based on the user experience and attacks, these tools decide which permission request should be entertained and which one should be denied. These tools serve as an extension to the already existing security model of Android. Android Security Model comprises of security features like Application Sandbox, Cryptography, and IPC . Even then attackers are continually working to explore.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
# Detection Mechanism
The vulnerability of these defensive mechanisms against privilege escalation attacks. For example, app-in-the-middle attacks can bypass Android Sandbox ; such attacks pose a serious threat to the user’s private content.

Completely blocking the ad libraries will not give an appropriate solution as this is a source of revenue for the advertising industry. So it is necessary to extend the Android security model, and this can be achieved by using these defensive tools and increasing permission constraints. Application developers also need to minimize the number of permission requests they include in the application they develop. It will help in reducing the ambiguity caused due to the large number of permissions requested at the installation time, which are mostly tricky for the users to understand. The naive users just want to use the applications. So they accept all the permissions, without giving it much thought. It gives attackers and analysts the opportunity to peek into the system, which can prove fatal for the system.

# 4 Static and Dynamic Approaches to Analyze and Detect Attacks
The malware detection tools use static and dynamic detection mechanisms for identifying attacks and blocking them from penetrating into the system. Static detection is a passive approach where the tool extracts features from the application file without executing the application. This methodology is resource and time efficient, as the application is not required to be executed. A dynamic approach is an active approach; it identifies attacks in the real environment. Unlike a static approach, it is not easy to evade dynamic detection tool with the help of code obfuscation attack. A static approach monitors features like permissions, API calls, .dex files for opcodes, and metadata. The dynamic approach analyzes features, while the application is running; it includes network traffic, battery usage, CPU utilization, IP addresses opcodes. Most of the dynamic and static detection mechanisms incorporate machine-learning techniques for fine results. Once the model is trained, using machine-learning Algorithm, it can work automatically in the detection of attacks and human intervention is not required. It helps in improving the detection of attacks that are otherwise not detectable during manual analysis. Moreover, data mining helps in identifying the class of attacks that are previously unknown, with the help of ample experience. This technique helps in proper resource utilization. Figure 3 provides a classification of these approaches.

There are broadly two categories of static detection: (i) Op-Code analysis and (ii) Manifest and API Calls analysis. In Op-Code analysis or N-Gram Opcode analysis , the detection tool
ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

P. Bhat and K. Dutta
extracts N-Gram Op-Codes from the dataset of malware and benign applications. The dataset is used to classify application using Pattern Recognition and machine-learning techniques. One of the most widely used classifier for this purpose is Support Vector machine. In Manifest and API Calls analysis , the tools use machine learning to learn features such as permissions, intents, component deployment from the Manifest file, and API Calls details from the dataset of malicious and benign applications, these data are then used to classify the target applications. Dynamic analysis is of two types: (i) in-the-box analysis and (ii) out-of-the-box analysis . In case of in-the-box analysis, data collection and analysis is performed on the same privilege level as the malware. The detection tools use ART for this purpose.

Data collection and analysis can be meddled with by malware, as it shares the same privileges as the analyzer. This approach allows interception of data at the OS level, access to memory architecture, libraries, API, and other methods. However, at the same time, it makes the critical data vulnerable to attacks. In the out-of-the-box analysis approach, analysis is done taking the security of the system as well as that of the analyzer into consideration. To achieve this, a virtual environment is created to deceive the attackers. It allows the analyzing technique to understand the nature of the attack securely. VM-based analyses and emulators are key techniques used for performing out-of-the-box analysis. Attackers have also explored this detection mechanism and have found the methods to evade such emulated environment and use strategies to remain undetected. Such attacks are stealthy and are often difficult to detect. Dynamic analysis mechanism performs better in identifying attacks that use code obfuscation technique as it analyzes the program in runtime environment. Static analysis approach is better equipped to identify previously known attack for which the detection mechanism has been trained. Researchers have also developed a hybrid approach, a combination of the approaches mentioned above for improving the detection mechanism.

A malware detection system can be host based or network based. In a host-based system, the detection tool is incorporated in the system itself and can better analyze malicious activities occurring within the system as well as defend the system from outside attacks. A network-based detection system is responsible for monitoring the whole network to which host is connected and has access to complete network as well as to the system. A network-based detection mechanism cannot analyze the malicious activities occurring within the system like at the kernel level. Such details are hidden from the network-based detection mechanism. Moreover, a network-based detection mechanism requires more software and hardware resources as compared to the host-based detection mechanism and is costlier as well. As host-based detection mechanisms are located on the system itself, they are easy targets for attackers. A network-based detection mechanism fails against previously unknown attacks. A network-based detection mechanism has to analyze heavy network traffic, so its performance suffers from the intense workload and leads to a poor detection rate. The main aim of these detection mechanisms is to reduce the false alarms raised during analysis and detection. Researchers have developed a huge variety of analysis and detection tools that are capable of identifying a wide range of attacks. Table 7 summarizes some of these tools. In the table, ML denotes for “machine learning.”
# 4 Anti-virus or Anti-malware Tools
In 2012, Google introduced Google-Bouncer , an anti-virus system to automatically detect malicious content in applications on the Android platform. Researchers have exposed many security weaknesses present in Google-Bouncer . Google is continuously trying to improve the security features of Google-Bouncer. However, attackers are also continually working in the direction of finding methods to breach this security mechanism. In 2017, malware named Judy  was able to bypass the Google-Bouncer security system. The malware itself clicks on ads in the background without knowledge of the user, thereby earning revenue for the hackers. Further,
ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
Google-Bouncer is effective only when applications are downloaded from the Google Play Store; problems arise if the user downloads applications from a third-party or unauthorized sources . It exposes the operating system to attacks. So, to protect the Android system from such attacks, large numbers of anti-virus products for Android (more than 50) are also available in the market. These tools detect and protect the system from malware. The detection mechanism of these anti-virus applications can be broadly classified into four categories :
- API based
- Dataflow based
- Interaction based
- Signature based
Researchers have shown how malware developers can fail these detection mechanisms. These anti-virus products do not provide a robust solution and are easily evadable. For example, a signature-based anti-virus product looks for a particular pattern or signature in the program, and, if found, the program is considered malicious and, otherwise, benign. Anti-virus applications, just like any other application, are prone to attacks themselves. For example, the Automatically Bypassing Android Malware Detection System (AVPASS) developed by researchers can evade most.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.