This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

# IEEE TRANSACTIONS ON RELIABILITY
# Understanding the Evolution of Android App Vulnerabilities
Jun Gao, Li Li, Pingfan Kong, Tegawendé F. Bissyandé, and Jacques Klein
# Abstract
The Android ecosystem today is a growing universe of a few billion devices, hundreds of millions of users and millions of applications targeting a wide range of activities where sensitive information is collected and processed. Security of communication and privacy of data are thus of utmost importance in application development. Yet, regularly, there are reports of successful attacks targeting Android users. While some of those attacks exploit vulnerabilities in the Android operating system, others directly concern application-level code written by a large pool of developers with varying experience. Recently, a number of studies have investigated this phenomenon, focusing, however, only on a specific vulnerability type appearing in apps, and based on only a snapshot of the situation at a given time. Thus, the community is still lacking comprehensive studies exploring how vulnerabilities have evolved over time, and how they evolve in a single app across developer updates. Our work fills this gap by leveraging a data stream of 5 million app packages to reconstruct versioned lineages of Android apps, and finally, obtained 28 564 app lineages (i.e., successive releases of the same Android apps) with more than ten app versions each, corresponding to a total of 465 037 apks. Based on these app lineages, we apply state-of-the-art vulnerability-finding tools and investigate systematically the reports produced by each tool. In particular, we study which types of vulnerabilities are found, how they are introduced in the app code, where they are located, and whether they foreshadow malware. We provide insights based on the quantitative data as reported by the tools, but we further discuss the potential false positives. Our findings and study artifacts constitute a tangible knowledge to the community. It could be leveraged by developers to focus verification tasks, and by researchers to drive vulnerability discovery and repair research efforts.

# Index Terms
Android, vulnerability, evolution.

# I. INTRODUCTION
MOBILE software has been overtaking the traditional desktop software to support citizens of our digital era in an ever-increasing number of activities, including for leisure, internet communication, or commerce. In this ecosystem, the most popular and widely deployed platform is undoubtedly Android, powering more than 2 billion monthly active users, and contributing to over 3 million mobile applications, hereinafter referred to as apps, in online software stores . Yet from a security standpoint, the Android stack has been pointed out as being flawed in several studies: among various issues, its permission model has been extensively criticized for increasing the attack surface –; the complexity of its message passing system has led to various vulnerabilities in third-party apps allowing for capability leaks  or component hijacking attacks ; furthermore, the lack of visible indicators for (in)secure connections between apps and the Internet is exposing user communication to man-in-the-middle (MITM) attacks.

Vulnerabilities of mobile apps, in general, and of Android apps, in particular, have been studied from various perspectives in the literature. Security researchers have indeed provided comprehensive analyses – of specific vulnerability types, establishing how they could be exploited and to what extent they are spread in markets at the time of the study. The community has also contributed to improve the security of the Android ecosystem by developing security vulnerability finding tools – and by proposing improvements to current security models –. Although advanced techniques have been employed by malicious developers such as packer and obfuscation, countermeasures such as – have also been proposed. Unfortunately, whether these efforts have actually impacted the overall security of Android apps, remains an unanswered question. Along the same line of questions, little attention has been paid to the evolution of vulnerabilities in the Android ecosystem: which vulnerabilities developers have progressively learned to avoid? Have there been trends in the vulnerability landscape? Answering these questions could allow the community to focus its efforts to build tools that are actually relevant for developers and market maintainers to make the mobile market safer for users.

Investigating the evolution of vulnerabilities in Android apps is, however, challenging. In the quasi-totality of apps available in the marketplace, the history of development is a fleeing data stream: at a given time, only a single version of the app is available in the market; when the next updated version is uploaded, the past version is lost. A few works – involving evolution studies have proposed to “watch” a small number of apps for a period of time to collect history versions. However, the insight observed by such studies may not be representative of that of the whole Android ecosystem.

1 For example, padlock and HTTPS in url input field.

0018-9529 © 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

# IEEE TRANSACTIONS ON RELIABILITY
This article: In this article, we set to perform a large-scale investigation on how vulnerabilities evolve in Android apps. We fully rely on static vulnerability detection tools and report their results on consecutive versions of Android apps. We refer the reader to the discussion section on false positive detections by the state-of-the-art tools that were used. Our contributions are as follows.

1. We carefully proceed to reconstruct the version lineages of Android apps at an unprecedented scale, based on a dataset of over 5 million apps collected from a continuous crawling of Android markets (including the official Google Play). Since market scraping opportunistically follows links in online store webpages, no explicit identifier could be maintained to track app versions. Therefore, we rely on heuristics to conservatively link and order app versions to retrieve lineages, leading to the selection of 28,564 app lineages containing each at least ten versions of a given app. Although this contribution serves the purpose of our study, it is a valuable artifact for diverse research fields in our community, notably software quality and its subfields of testing, repair, and evolution studies.

2. We apply state-of-the-art static vulnerability finding tools on all app versions and record the alerts raised as well as their locations. We investigate specifically ten vulnerability types associated to four different categories related to common security features (e.g., secure sockets layer (SSL)), its sandbox mechanism (e.g., Permission issues), code injection (e.g., WebView RCE vulnerability) as well as its interapp message passing (e.g., intent spoofing). Correlating the analysis results for consecutive app pairs in lineages, we extract a comprehensive dataset of reported vulnerable pieces of code in real-world apps, and whenever available, the subset of changes that were applied to fix the vulnerabilities.

3. Finally, we perform several empirical analyses to highlight statistical trends on the temporal evolutions of vulnerabilities in Android apps; capture the common locations (e.g., developer versus library code) of vulnerable code in apps; comprehend the vehicle (e.g., code change, new files, etc.) through which vulnerabilities are introduced in mobile apps; and investigate via correlation analysis whether vulnerabilities foreshadow malware in the Android ecosystem.

And the main findings are as follows:
1. most vulnerabilities will survive at least three updates;
2. some third-party libraries are major contributors to most vulnerabilities detected by static tools;
3. vulnerability reintroduction occurs for all kinds of vulnerabilities with Encryption-related vulnerabilities being the mostly reintroduced type in this study;
4. some vulnerabilities reported by detection tools may foreshadow malware.

Noticeably, this is the largest-scale Android vulnerability study so far. Meanwhile, we novelly analyze vulnerabilities from the aspect of app lineages and certain patterns (e.g., vulnerability reintroduction) are first spotted in this study.

The artifacts of our study, including the constructed app lineages as well as the harvested vulnerability detection tool reports, are made publicly available to the community in the following anonymous repository:
https://avedroid.github.io
The rest of this article is organized as follows. Section II describes the experimental setup, including the construction of app lineages, an introduction of the vulnerability finding tools, and the research questions. Section III unfolds the empirical analyses. Section IV-B enumerates threats to validity, while Section IV-A discusses some promising future works. Section V discusses related work, and finally, Section VI concludes this article.

# II. STUDY DATA AND DESIGN
In this section, we first define and clarify some terms used in this article. Second, we provide some background information on the scale of the app dataset that we adopted, as well as on the security vulnerability detection tools that we leveraged in Section II-B. Third, we describe the methodology developed in this work to reconstruct app lineages, which are required to perform the evolution study (cf., Section II-C). Finally, we outline the research questions as well as the motivations behind them (cf., Section II-D).