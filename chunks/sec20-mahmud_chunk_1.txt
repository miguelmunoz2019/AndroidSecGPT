# Cardpliance: PCI DSS Compliance of Android Applications
Samin Yaseer Mahmud and Akhil Acharya, North Carolina State University; Benjamin Andow, IBM T.J. Watson Research Center; William Enck and Bradley Reaves, North Carolina State University
https://www.usenix.org/conference/usenixsecurity20/presentation/mahmud
This paper is included in the Proceedings of the 29th USENIX Security Symposium.

August 12–14, 2020
978-1-939133-17-5
Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.

# Cardpliance: PCI DSS Compliance of Android Applications
Samin Yaseer Mahmud,? Akhil Acharya,? Benjamin Andow,† William Enck,? and Bradley Reaves??North Carolina State University
†IBM T.J. Watson Research Center
# Abstract
Smartphones and their applications have become a predominant way of computing, and it is only natural that they have become an important part of financial transaction technology. However, applications asking users to enter credit card numbers have been largely overlooked by prior studies, which frequently report pervasive security and privacy concerns in the general mobile application ecosystem. Such applications are particularly security-sensitive, and they are subject to the Payment Card Industry Data Security Standard (PCI DSS). In this paper, we design a tool called Cardpliance, which bridges the semantics of the graphical user interface with static program analysis to capture relevant requirements from PCI DSS. We use Cardpliance to study 358 popular applications from Google Play that ask the user to enter a credit card number. Overall, we found that 1% of the 358 applications are not compliant with PCI DSS, with vulnerabilities including improperly storing credit card numbers and card verification codes. These findings paint a largely positive picture of the state of PCI DSS compliance of popular Android applications.

# 1 Introduction
Mobile devices have become a primary way for users to access technology, and for many users, it is the only way. The most wide-spread mobile device platforms, namely Android and iOS, are known for their vast application stores providing applications that offer a wide variety of functionality. An important subset of these applications takes payment information from consumers, including those providing entertainment, transportation, and food-related services.

The casual observer might expect that mobile apps offering paid services and goods will always leverage the established and centralized payment platforms provided by the mobile OS (e.g., Google Pay and Apple Pay). These payment platforms provide users a secure and trusted way to manage their payment information (e.g., credit card numbers) without unnecessarily exposing it to third parties. They do so by a) using a virtual token that is linked to the actual credit card, and b) handling both payment information and authorization outside of the third-party application . However, recent work  reported that 4,433 of a random sample of 50,162 applications from Google Play were asking the user to enter credit card information via text fields in the application UI. There are many reasons why this may occur. For example, an application developer may wish to offer an alternative if the user does not want to use the Google or Apple payment system. Alternatively, the application developer may wish to avoid overhead charges from Google and Apple . Whatever the reason, the fact remains: applications are asking users to enter credit card information.

The use of payment information makes these applications distinct from the majority of mobile applications. Specifically, the PCI DSS  financial industry-standard mandates that software systems protect payment information in specific ways. While it is well known that mobile applications leak privacy-sensitive information , fail to verify SSL certificates , and misuse cryptographic primitives , doing so while processing payment information represents a significant violation.

Our work is motivated by the research question: do mobile applications mishandle payment information? Answering this question introduces several technical research challenges. First, which PCI DSS requirements apply to mobile applications? PCI DSS v3  is 139 pages and applies to a broad variety of payment systems. Second, how can those requirements be translated into static program analysis tasks? The analysis should avoid false negatives while minimizing false positives. Third, how can the use of credit card information be programmatically identified? Distinguishing credit card text values requires understanding the semantics of widgets in the user interface.

In this paper, we design a static program analysis tool called Cardpliance that captures key requirements from PCI DSS that are applicable to mobile applications. Cardpliance combines recent work on static program analysis of Android applications (i.e., Amandroid ) and UI semantic inference.

USENIX Association 29th USENIX Security Symposium 1517
(i.e., UiRef ) to create novel checks for PCI DSS requirements. We use Cardpliance to study a set of 17,500 popular free applications selected across all categories of Google Play. Using the UI semantic inference of UiRef , Cardpliance reduces this sample to 358 applications known to ask for credit card information from the user. Cardpliance then identifies 40 applications with potential PCI DSS violations. After manual decompilation and source code review, we confirmed 6 non-compliant applications.

Broadly, our empirical study leads to the following takeaways. Overall, 98% of the 358 Android applications that we analyzed passed Cardpliance’s PCI DSS tests, which shows that the risk of financial loss due to insecure behaviors in mobile applications may not be as wide-spread as predicted. In particular, we did not find any evidence of applications sending payment information over the network in plaintext, over vulnerable SSL connections, or insecurely exposing the payment information via inter-component communication channels. However, we identified 6 applications that combined have nearly 1 million downloads on Google Play violating PCI DSS requirements by storing or logging credit card numbers in plaintext (5/6), persisting credit card verification codes (3/6), and not masking credit card numbers when displaying (2/6). These applications are placing the users and potentially their customers at unnecessary risk for fraud due to their non-complying behaviors.

This paper makes the following contributions:
- We encode PCI DSS requirements for mobile applications into static program analysis rules. These rules are largely captured using data flow analysis, but the existence of method calls on the corresponding control flow paths play a key role.

- We study a set of 358 applications known to prompt the user for credit card information. We find 6 applications that violate PCI DSS requirements.

- We propose a set of best practices for mobile application developers processing payment information. These suggestions distill hundreds of pages to PCI DSS standards specification into key areas relevant to mobile apps.

We note that an entire industry of products exists to enable developers to identify individual PCI DSS violations in their own code . By contrast, Cardpliance is to our knowledge the first system to identify violations across a significant portion of an entire industry with no prior knowledge of which apps might even handle credit card information. In addition to helping Android application developers be aware of unintentional PCI DSS violations, Cardpliance can also be used by Google to triage and investigate flaws in applications as they are submitted to the Play Store. Google could also show the output of Cardpliance in the Play Store’s developer console.

The remainder of this paper proceeds as follows: Section 2 describes relevant security requirements from PCI DSS. Section 3 overviews our approach to testing compliance with these requirements. Section 4 describes the design and implementation of Cardpliance. Section 5 uses Cardpliance to study popular applications accepting credit card information. Section 6 presents a set of best practices for mobile application developers processing payment information. Section 7 describes related work. Section 8 concludes.

# 2 PCI Data Security Standard
In the early 2000s, major credit card companies faced a crisis of payment fraud that was enabled by the widespread adoption of online financial transactions. As a result, the Payment Card Industry (PCI) released the first version of its Data Security Standard (DSS) in December 2004. PCI DSS  now regulates all financial systems seeking to do business with PCI members, which includes all major credit card companies. This standard applies to all computing systems that accept card payment, as well as those that store and process sensitive cardholder data. It defines a series of security measures that must be taken for such systems, including the use of firewalls and anti-virus software.

Not all PCI DSS security measures apply to mobile applications installed on consumer devices. Based on our expertise in mobile application security, we systematically reviewed the 139 pages of PCI DSS version 3 to determine which regulations apply. For example, mobile applications are payment terminals where a consumer may enter a credit card information into either their own device or the device of a merchant. In contrast, mobile applications are not used as back-end payment processing systems. We then looked for the different types of sensitive information referenced within the standard. We found that PCI DSS distinguishes between cardholder data (CHD) and sensitive account data (SAD), which impacts software processing, as shown in Table 1.