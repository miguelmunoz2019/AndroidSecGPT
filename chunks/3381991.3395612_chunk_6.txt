Proof-of-concept of a network attack. The first app leaked the join code in an insecure form over the network. We intercepted all network traffic between the devices and the back-end server. Afterward, we analyzed the network traffic traces to find any hint of actual join codes. We found that the join code existed in the network traffic, as “code=xxxxxx”. To demonstrate a network attack, we installed the same app on a third device for the purposes of launching an attack. We used the same join code that we had found in the network traffic. We succeeded in joining the circle by the third phone, and we were able to view the location of all the group members along with their chat messages.

Proof-of-concept of a local storage attack. The second app leaked join codes in an insecure form from the local storage. We extracted the entire database of the app from the device that generated the join code. We then browsed the app’s database with a SQLite viewer on a host PC to view all the stored data.

# Session 3: Privacy and Data Sharing
# SACMAT ’20, June 10–12, 2020, Barcelona, Spain
found that all the data was stored in plaintext, including the join code. Similar to what we did with our network attack, we used a third device for the attack. We installed the same app on the third device, and then we used the leaked join code to enter the circle. We succeeded in joining the circle and were able to view the locations of all the group members. It should be noted that attackers could also use an Android emulator, rather than a real device, to hide their actual current location when joining a circle. Using an emulator makes it hard for law enforcement to locate the source of attacks.

Authentication and authorization vulnerabilities in back-end servers. We observed that some apps use short and easily guessable information in their HTTP requests to retrieve user data. For example, the app that we mentioned above that leaked join codes over HTTP sent the join code within the HTTP request to retrieve all user and group member information, including userID, password, location, and other PII. In fact, the app generated the join code using the same characters of the circle name. For example, if the circle name is “123”, the app will generate the join code: “123”. For this app, the HTTP request is similar to http:// xxxx/ xxxx/ getByMembers.php?userFamily=xxx, and “userFamilly” is the same for the circle name and the generated join code. For the case study, we generated a circle and then invited group members to join the circle. Next, we used a Chrome browser on a host PC to send the same HTTP request to the server. We were able to reveal all information of every member of the entire group. The server did not require any kind of authentication, it did not even verify whether the request had come from a PC or a mobile device.

Additionally, this server did not check the strength of the userID value. As a result, attackers can perform dictionary attacks to access the circles that use short values as userID. It is worth noting that there were four other apps out of the 41 FL apps that had weak authentication and authorization mechanisms. Similarly, an attacker only needs to guess the userID to reveal and access sensitive information about group members. In all these five apps, the data returned from their corresponding servers was not encrypted.

# 7 DISCUSSION
# 7 Implications
Evaluating FL apps is critical. This will make an impact to the society, where many households nowadays rely on such FL apps to communicate and share data with their families. We think our findings are useful for both users and developers: for users to feel more secure and confident in the security and privacy practices of FL apps, and for developers to improve their products so they can build trust to enhance their financial profits and reputations.

The essential problem is that most FL apps do not use encryption mechanisms. There are three main parties each play a vital role in Android security: users, developers, and the platform (Android). Relying on only one party to provide the security and privacy measures may lead to defects in the others. For example, some users want to root their Android devices in order to have more freedom and control. Rooting devices may disable essential security mechanisms from devices which may open the door for adversaries to have high privileges and superuser access in devices. Consequently, adversaries could extract sensitive information if it was stored unencrypted on internal storage with minimum efforts. From another perspective, some developers focus on apps’ functionality more than security and privacy. Some developers may not have experience on how to use security measures.

Another main concern about the current FL apps is privacy. Some parents may not be comfortable with using FL apps since a lot of the family’s data is collected by FL apps. Indeed, there is a clear call for a trustworthy, robust, and secure FL ecosystem.

# 7 Suggestions
Providing effective suggestions to protect against data leakage in mobile apps can be a challenging task. From the users’ perspective, user awareness is very important for their security and privacy. Users have to be aware of the maker of the mobile apps. For instance, users should seek answers to some questions before using FL apps: is the mobile app designed by a trusted entity, is it from trusted markets, what kind of data is the app collecting, and is the data collection relevant to app’s features. Having answers to these questions can reduce the harm as users would raise or lower their expectations aligned with their findings. To elaborate, if an FL app is from a suspicious vendor and a user needs to use the app, a user can use some protections and give the minimum amount of privileges to the app.

Furthermore, a user should be aware of who joins a family’s circle by identifying and verifying each member on the circle. Moreover, users have to distribute join codes amongst a group by using secure methods if FL apps are vulnerable to some of the channels discussed in this paper. For instance, a user can simply create a VPN channel in their phone to protect against the network vulnerabilities like what we found in our analysis. A VPN will create a secure channel to tunnel all the traffic inbound and outbound. This will encrypt all the traffic of the user’s phone regardless of the app.

From the developers’ perspective, app developers should implement best practices for security mechanisms. Protecting users’ data is vital, especially if the data has personally identifiable information. To best protect users, data transferring and storing channels must be secured to prevent unauthorized access. For example, the mobile app should only transmit user data via secure channels, such as SSL connections. Furthermore, data at rest should always be protected by ensuring that data is stored securely on the device and on the server.

To mitigate join code leakages, FL apps should set a short lifetime for the join code as setting a long lifetime gives an attacker more time to crack the code. FL apps also should generate different join codes for each invitation to the circle, each of which can only be used once. This provides greater protection to the FL system. In contrast, generating a fixed join code creates multiple security vulnerabilities that let attackers compromise circles easily. Last, join codes should be generated randomly, e.g., using secure random number generators to avoid easily guessable join codes, as discussed in Section 6.

# 7 Limitations
The methodology used for this study allowed us to detect a number of security and privacy issues with FL apps; however, there were limitations in this research. The dataset contained 41 apps that were identified in the Google Play store. More candidate apps might have
# Session 3: Privacy and Data Sharing
# SACMAT ’20, June 10–12, 2020, Barcelona, Spain
been located if we had utilized other app markets. However, the set of apps we used was representative as we chose popular FL apps with noticeable number of downloads. We plan to extend our crawler to download more FL apps from different markets for future work.

In our study, we analyzed the FL apps based on the free features available to all users. However, users can choose to purchase premium features, such as ones that allow for larger groups/circles, the storage of location history for more than one month, and others. Although we did not investigate the premium features due to budgetary restrictions, we think some security and privacy problems might exist with premium features as were identified with the free features. It is worth noting that app descriptions of the tested FL apps do not mention any additional security and privacy protections for the feature set for premium subscribers.