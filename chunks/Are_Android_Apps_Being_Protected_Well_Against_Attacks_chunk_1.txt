# ADVANCES IN SECURITY AND PRIVACY IN EMERGING WIRELESS NETWORKS
# Are Android Apps Being Protected Well Against Attacks?
# Siqi Ma, Yang Liu, and Surya Nepal
# Abstract
Authentication is the most pervasive means for developers to protect users’ private data against attacks while using mobile applications. Incorrect implementations of authentication make users’ accounts vulnerable to several attacks such as eavesdropping attacks, reply attacks, and man-in-the-middle attacks, and thus break the first line of defense in securing mobile services. To solve this problem, we design a system that learns patterns from authentication bugs, and identifies incorrect authentication implementations from mobile applications. By conducting a static analysis, our system extracts control and data dependencies for further pattern learning and utilizes a machine learning algorithm to build a classification model. To distinguish whether an application contains any authentication bugs, we take the unknown application as an input and recognize the vulnerable patterns. To evaluate the accuracy of our system, we collected 1200 Android applications from the official Google Play store, representing a variety of categories. We compare our system with MalloDroid, a state-of-the-art tool for SSL/TLS authentication bug detection. Our system successfully identifies 691 SSL/TLS authentication bugs with precision, recall, and F1 value as 52, 93, and 67 percent, respectively.

Nowadays, authentication has become ubiquitous in our lives, not only applied to applications, but also involved in smart contracts in the blockchain system. For mobile devices, we rely on applications to process business (e.g., email apps), socialize with others (e.g., WhatsApp), and support our daily lives (e.g., MRT transport). For each user, the system sets up a private account, which contains access control to prevent privacy leakage. When a user wants to retrieve any of her private data, an identity authentication is required. However, authentication in mobile devices can easily become vulnerable under certain authentication scenarios. Therefore, we target a security analysis of user authentication protocols implemented in mobile apps.

# Introduction
Generally, developers choose to implement single factor authentication for Android applications. Most of them use password authentication, which relies on a combination of username and password. A user sends a combination of username and password in plaintext to a server through a client application, and then the server replies with an authentication-acknowledgement if the received password is valid. However, this scheme is vulnerable to replay attacks if users’ passwords are not being protected (i.e., transmitted in plaintext over an insecure network). For the other applications, they apply one-time password (OTP) authentication, which requires servers to generate pseudo-random numbers for identity validation. In this scheme, a user first provides a valid mobile phone number or an email account to the server. The server then generates a pseudo-random number and sends it to the user. The user is regarded as valid if and only if the correct pseudo-random number is submitted. For each authentication, the pseudo-random number should be random (i.e., unpredictable).

Nonetheless, implementing password authentication and OTP authentication correctly are not easy. Potential privacy leakage is caused by incorrect implementations. Simple password authentication and OTP authentication are vulnerable to eavesdropping and reply attacks because users’ passwords and the generated OTP values are transmitted in plaintext. To protect these authentication against attacks, a countermeasure to build SSL/TLS secure connection between clients and servers is proposed. This countermeasure is secure only if the server’s certificate and hostname are checked; otherwise, the secure connection is still vulnerable to eavesdropping and reply attacks. Moreover, OTP values generated by servers MUST be unpredictable and unrepeatable.

Instead of analyzing cryptographic algorithms and the security of authentication protocols, we aim to identify incorrect authentication code by analyzing Android apps. However, identifying incorrect implementation manually is tedious and inaccurate. Since each correct authentication implementation follows a certain pattern, we design an automated tool to learn that pattern and identify the corresponding authentication bug without any involvement of human effort. In advance, we define four types of authentication implementation:
1. Secure implementation: a correct authentication implementation
2. Insecure certificate check: an incorrect authentication that violates any requirements of certificate check;
3. Insecure hostname check: an incorrect authentication that accepts all hostnames
Digital Object Identifier: 10/MWC
Siqi Ma is with the University of Queensland; Yang Liu is with Xidian University; Surya Nepal is with Data61, CSIRO.

1536-1284/20/$25 © 2020 IEEE
IEEE Wireless Communications • June 2020
# 1. UserName: Alice
Password: xxxxxxx
# 2. Accept/Reject
We then conclude the article.

# 4. Insecure OTP value:
an OTP value that is either repeatable or predictable
Given applications with the above labels, we first extract control and data dependencies of each app by analyzing its code. We then traverse the dependencies into a vector and combine all vectors to construct a training matrix. Each vector represents an application, including its dependencies and its label. To learn the pattern of each category, we leverage a machine learning algorithm (i.e., long short-term memory, LSTM) to build a detection model, which is further used to identify incorrect authentication implementations.

In order to evaluate the performance of our system, we randomly collect 1200 Android applications from the official Google Play Store. These applications are chosen from six categories: communication, finance, dating, health & fitness, shopping, and social networking. Since there is no existing ground truth with authentication bugs labeled, we manually analyzed these collected Android applications and labeled them as secure authentication, insecure certificate check, insecure hostname check, and insecure OTP value. Due to the lack of a tool comparable to our system, we benchmarked MalloDroid , a state-of-the-art Secure Sockets Layer (SSL)/Transport Layer Security (TLS) vulnerability detection tool, against our dataset. MalloDroid is an SSL/TLS certificate validation tool (and thus does not detect the other bugs that our system covers).

We benchmarked our system over the dataset of SSL/TLS related authentication bugs and compared it with MalloDroid over this dataset. Our system successfully identifies 370 insecure certificate checks with precision, recall, and F1 of 92, 78, and 85 percent, respectively. It also recognizes 321 insecure hostname checks with precision, recall, and F1 of 89, 76, and 82 percent, respectively. MalloDroid only detects 211 SSL/TLS related authentication bugs containing 151 insecure certificate checks and 60 insecure hostname checks. Because MalloDroid labels all the potential vulnerable apps as vulnerable, it has better detection precision but low recall (i.e., false positive).

# Contributions:
Overall, our contributions are as follows:
- A novel automated approach that is able to learn patterns of each category of authentication bug without requiring any manual effort. It then checks whether password authentication and OTP authentication in an Android app are correctly implemented.

- A comparison of our system with a state-of-the-art tool, MalloDroid. Our system performs much better than MalloDroid with only a few data.

# Organization:
The rest of this article is organized as follows. We provide background information on authentication schemes used in PAP, which is simple to use and deploy because only a combination of username and password is required without any extra configurations. Hence, PAP is suitable for all types of network infrastructure. As the security of PAP entirely relies on confidentiality and the strength of the password, PAP is the most vulnerable authentication scheme.

When passwords are transmitted in plaintext over the network, the simple PAP is vulnerable to man-in-the-middle attacks (MITMAs) and brute force attacks. To protect PAP against attacks, SSL/TLS encryption is constructed, through which the
IEEE Wireless Communications • June 2020
67
# Certificate Authority
# 5. Certificate Verification
# 3. Certificate Verification
(server.cert)
(client.cert)
Two types of OTP authentication are proposed: HMAC-based one-time password (HOTP)  and time-based one-time password (TOTP) . Referring to the OTP authentication presented in Fig. 3, first, a user initializes a login request and sends it to the server. Then the server creates an HMAC hash from a secret key and a counter. An output value is further generated. Next, the server sends the generated output to the user. To fulfill the identity verification, the user provides the output value within a period of time. Theoretically, an OTP is more secure than a static password because it is not reusable and predictable. However, several pitfalls may be generated, which makes OTP authentication even weaker. An implemented OTP authentication is vulnerable to replay attacks and brute force attacks  when:
- It generates a sequence of predictable OTPs.

- It allows an OTP to be reusable.

# 1. Request Login with User Information
# 3. OTP Transmission
# 4. OTP Submission for Validation
# User
# Server
# Server
2. OTP Generation
The component of feature matrix generation takes mobile applications as inputs. It takes the steps of decompilation, auth locator, and feature construction introduced as follows.