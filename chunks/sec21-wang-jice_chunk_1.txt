# Understanding Malicious Cross-library Data Harvesting on Android
Jice Wang, National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences; Indiana University Bloomington; Yue Xiao and Xueqiang Wang, Indiana University Bloomington; Yuhong Nan, Purdue University; Luyi Xing and Xiaojing Liao, Indiana University Bloomington; JinWei Dong, School of Cyber Engineering, Xidian University; Nicolas Serrano, Indiana University, Bloomington; Haoran Lu and XiaoFeng Wang, Indiana University Bloomington; Yuqing Zhang, National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences; School of Cyber Engineering, Xidian University; School of Computer Science and Cyberspace Security, Hainan University
https://www.usenix.org/conference/usenixsecurity21/presentation/wang-jice
This paper is included in the Proceedings of the 30th USENIX Security Symposium.

August 11–13, 2021
978-1-939133-24-3
Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.

# Understanding Malicious Cross-library Data Harvesting on Android
# Xiaojing Liao2 Jice Wang1,2∗,†, Jin Wei Dong4, Nicolas Serrano2, Haoran Lu2, XiaoFeng Wang2, Yuqing Zhang1,4,5†, Yue Xiao2∗, Xueqiang Wang2, Yuhong Nan3, Luyi Xing2†
# 1National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences,
# 2Indiana University Bloomington,
# 3Purdue University, 4School of Cyber Engineering, Xidian University,
# 5School of Computer Science and Cyberspace Security, Hainan University
# Abstract
Recent years have witnessed the rise of security risks of libraries integrated in mobile apps, which are reported to steal private user data from the host apps and the app backend servers. Their security implications, however, have never been fully understood. In our research, we brought to light a new attack vector long been ignored yet with serious privacy impacts – malicious libraries strategically target other vendors’ SDKs integrated in the same host app to harvest private user data (e.g., Facebook’s user profile). Using a methodology that incorporates semantic analysis on an SDK’s Terms of Services (ToS, which describes restricted data access and sharing policies) and code analysis on cross-library interactions, we were able to investigate 1 million Google Play apps and the ToSes from 40 highly-popular SDKs, leading to the discovery of 42 distinct libraries stealthily harvesting data from 16 popular SDKs, which affect more than 19K apps with a total of 9 billion downloads. Our study further sheds light on the underground ecosystem behind such library-based data harvesting (e.g., monetary incentives for SDK integration), their unique strategies (e.g., hiding data in crash reports and using C2 server to schedule data exfiltration) and significant impacts.

# 1 Introduction
Mobile apps today extensively incorporate third-party libraries (e.g., analytics, advertising, app monetization, or single-sign-on SDK), which enriches their functionalities but also brings in security risks. It has been reported that malicious SDKs stealthily collect private user data from the device running their host app (e.g., IMEI, GPS location, phone number, MAC address, SIM card ID, Android ID, etc.), the server or the cloud supporting the app. With significance of such leaks, the security implications of library integration have yet been fully revealed: it is less clear whether a malicious library could endanger a user’s sensitive information from other data sources, those not under the direct control of the affected app.

Beyond its threat to personal privacy, malicious data harvesting can also have serious social implications. A prominent example is the Cambridge Analytica scandal, in which the personal data of millions of Facebook users (profiles, page likes, current city, News Feed, etc. – enough to create psychographic profiles of the users) were collected and utilized for malicious political advertising. XLDH also provides a new avenue for such political profiling and promotion, as discovered in our research. Despite the importance of the problem, little has been done so far to understand.

∗The first two authors are ordered alphabetically. Work was done when Jice Wang was studying at Indiana University Bloomington.

†Luyi Xing, Xiaojing Liao and Yuqing Zhang are co-corresponding authors.

1In this paper, the terms “SDK" and “library" always refer to those developed by third-parties, i.e., vendors other than the host app vendor or OS vendor; also, we refer to “SDK" as the victim and “library" as a general term.

# Finding XLDH in the wild
In this paper, we report the first study on XLDH on Android, aiming to understand its privacy and social impacts, underground ecosystem and challenges in controlling the threat. To this end, we developed a new, automatic methodology called XFinder to identify malicious libraries integrated in real-world apps on Google Play. Our idea is to discover restricted data managed by the SDKs and their third-party data sharing policies, which describes whether and how restricted data can be shared with or collected by other libraries. We automatically extract those policies from the terms of service (ToS, a.k.a., terms of use, terms and conditions) released by the SDK vendors, and then analyze the code of each integrated library to find out whether it makes any access to the SDK’s data in violation of these policies. This turns out to be nontrivial due to the challenges in analyzing ToS to recover its semantics and evaluating apps to find cross-library interactions.

More specifically, unlike app privacy policies that protect known sensitive content (e.g., address, contact, etc.) and therefore can be identified by existing privacy policy analyzer such as Polisis , ToS describes restricted data whose security or privacy implications can only be determined from the context of their usage. Examples include security-critical data such as password and token, and SDK-specific sensitive data such as utdid used by Alibaba for identifying user devices , page likes, health or political groups of a user recorded by Facebook, and education and project information maintained by LinkedIn . More challenging is to recover the data sharing policies from ToS that specify the restrictions on collecting and sharing different data items, which tends to be complicated. For example, Google allows developers to access advertising ID or device identifier (e.g., ssaid, mac address, imei), but restricts the collection of these two data item simultaneously; also Facebook user’s page likes, timeline, etc., are open to the apps certified by Facebook , but not to other parties (including third-party libraries) , while Facebook user ID and password are not allowed to be sent out to the Internet by any party. Our research shows that existing techniques like Polisis  and PolicyLint  cannot be directly adopted for ToS analysis (see the evaluation in Section 3).

To address these challenges, XFinder utilizes a semantic analysis tuned towards the unique features of ToS, which leverages natural language processing techniques to capture sensitive data items and to recover complicated policies (Section 3). Further, our code analyzer module in XFinder is designed to handle potential evasion tricks played by malicious libraries when evaluating its interactions with a target SDK (Section 3). Our experiment shows that XFinder achieved a high precision of 86% and successfully detected 42 malicious libraries from more than one million Android apps.

# Measurement and discoveries
From 1 million Google Play apps analyzed in our research, we are surprised to find the significant impacts of the new threat. More specifically, we discovered 42 distinct libraries that stealthily harvest data from third-party SDKs without a user consent. These libraries have been integrated into more than 19K apps, with a total of 9 billion downloads. The data harvested are highly sensitive, including access tokens, profile photos, and friend lists (see Section 5). As an example, OneAudience, a library integrated in more than 1,738 apps with more than 100 million users, collects users’ private data from Facebook and Twitter SDKs. Based on a press release from Nielsen , OneAudience shared mobile user data with Nielsen – a marketing research firm, and the data can be used by Nielsen’s customers for political marketing purpose, among other marketing usages. Hence, we suspect that the data harvesting campaign might lead to a Cambridge-Analytica-like political scandal if they were taken advantage of by the adversary. Although the campaign has been stopped after we reported it to Facebook (see below), already millions of Facebook users’ data have been exposed, since the library has been continuously gathering user data, once per hour on both Android and iOS since 2014.

Also interesting is the ecosystem behind XLDH, which includes library distribution, stealthy data exfiltration channel, and data monetization. In particular, XLDH vendors are found to distribute their libraries through multiple channels, including colluding with free app building services, integrating into popular libraries, and offering app monetization (Section 5). For example, app monetization is used to attract app developers to integrate problematic libraries into their apps: app developers that integrate OneAudience and Mobiburn are paid $0 to $0 per app install. Furthermore, we revealed the techniques used by malicious libraries that made their data harvesting activities more stealthy and harder to detect, such as the abuse of Java reflection technique (see Section 3).