To this end, we set out to explore how Android apps and network libraries do enforce these policies. First, we checked the official Android documentation, which states that “third-party libraries are strongly encouraged to honor the cleartext setting” . We found the documentation concerning, for two reasons. First, the wording of the documentation only mentions that honoring the policy is “strongly encouraged.” However, we believe that since the policy relates to security-relevant aspects, network libraries should be forced to honor the policy—and in case they do not, that should be considered as a vulnerability. In fact, a network library not honoring the policy would have the negative side-effect of silently making the policy useless. Second, the documentation only mentions the “cleartext settings.” However, as we discussed in Section 3, the new version of the policy touches on many more aspects: Unfortunately, the documentation does not even mention the other features (e.g., which KeyStore to trust, pinning).

Next, we checked the official API, implemented by the NetworkSecurityPolicy class. This is the API that, in theory, network libraries should rely on to obtain the content of the policy (and honor it). However, this API appears very limited: the only available API is isCleartextTrafficPermitted(), which returns whether cleartext traffic should be allowed. There is no other API to query the remaining fields of the policy, and it is thus not clear how network libraries are supposed to enforce them.

For these reasons, we set out to explore how and whether popular network libraries honor the policy. The remainder of this section discusses how we built a dataset of network libraries, an automatic analysis framework to test whether a given library honors the various aspects of a policy, and the results of this analysis.

# Libraries Dataset
To perform this investigation, we first built a comprehensive dataset of the most used networking libraries. We identified these libraries from AppBrain , a service that provides multiple statistics on the Android application’s ecosystem such as “Android libraries adoption” by different apps. Our dataset consists of all the network libraries mentioned by AppBrain: URLConnection, Robospice, HttpClientAndroid, AndroidAsync, Retrofit, BasicHttpClient, OkHttp, AndroidAsyncHTTP, Volley, and FastAndroidNetworking. Except for URLConnection, which is the default HTTP library on Android, all the libraries are “external,” which means that app developers need to manually specify them as external dependencies. Note that these external libraries, even though they are not the default, are used by almost 30% of all the apps published on the Google Play Store (∼ 250K unique apps). Table 3, in Appendix, provides more detailed statistics.

# Analysis Framework
Determining whether a given library is implementing the NSP is not a straightforward process. In fact, the source code of these libraries is often not available, and manual reverse engineering may be challenging and error-prone. Thus, we opted for an automatic approach based on dynamic analysis. We built an automatic framework to check whether a given networking library honors the policy defined in an app. Note that while for this paper we tested the ten popular network libraries in our dataset, our framework is completely generic and can be easily used to vet an arbitrary network library.

Our framework analyzes each network library individually. For each of them, it performs the following steps. First, we generate all the possible combinations of a policy, by combining all possible nodes, attributes, and representative values. In particular, the framework considers the following nodes: base-config, domain-config, pin-set, and trust-anchors. For each node, it considers all the relevant child nodes, such as domain, pin, and certificate. Each node is then configured with all the possible attributes that might be used within a given node, like overridePins for what concerns trust-anchors, or src for the certificate node (see Section 3 for the entire list). For what concerns the values, we generate “representative values.” For the value field representing a certificate hash, we generate various policies with the following values: a valid hash matching the hash of the certificate actually used during the tests, a valid hash that is different than the expected one, and a non-valid hash (e.g., the character “A” repeated several times). The combinations of all nodes, attributes, and representative values, generates 72 unique policies.

Then, the framework creates an app that attempts to connect to an endpoint via HTTP and via HTTPS by using the library under test. The app is then built multiple times, each time with a different policy. Each of these apps is then tested in three different “testing environments,” each of which simulates the different threat models discussed in Section 2: 1) the app is tested without attempting to perform MITM; 2) we simulate an attacker performing MITM (by using a proxy); 3) we simulate an attacker performing MITM with the attacker’s custom CA added to the User KeyStore. At each execution, the framework logs whether a given connection with a given policy in a given testing environment was successful or not. These logs are compared with a ground truth, which is generated by a Python-based implementation that takes into account the various aspects of the policy and the various testing environments. We flag a library as compliant if and only if the runtime logs match with the expectations of the ground truth.

# Compliance Results
First, we identified that HttpClientAndroid, AndroidAsync, and AndroidAsyncHTTP are not enforcing the cleartext attribute: these libraries allow HTTP even though the policy would prohibit it. We note how these libraries are used by more than tens of thousands of popular apps with hundreds of millions of unique installations.

Instead, for what concerns certificate pinning and trusted anchors, we noticed that nine of the ten libraries do correctly
USENIX Association 29th USENIX Security Symposium 351
# Winner
# URL
1. Contact the URL and retrieve the content
2. User clicked.

3. Show the full content
4. Forward the request
5. Bidding
6. Who wants to show an AD?
# ADS
# Library
1. Request for an AD
2. Content to show in the WebView of the application
3. Winner AD
4. Winner AD
Content to show: URL, Images
honor the policy. Given the difficulty and missing documentation, we were positively surprised by this high adoption rate. We thus decided to investigate why libraries are enforcing such a difficult part of the policy and not the easier-to-enforce cleartext settings. For these libraries, we performed manual analysis (including source code analysis, when available) to determine how the policy is actually enforced. We found that none of these libraries is implementing SSL/TLS-related operations from scratch nor defining a custom handler for CAs. Instead, they are all relying on core Android framework methods to perform SSL operations, which includes handshake and management of the KeyStores. All these operations are handled by the Conscrypt  package, which provides Java Secure Socket Extension (JSSE). While this is clearly a positive news, we find it surprising that these popular network libraries do not adhere to arguably more critical cleartext settings.

We also found that AndroidAsync, used by thousands of apps, does not support NSP at all. In fact, we found that the mere presence of a domain-config node is enough to break the network library, leading to an exception, and thus making it essentially incompatible with the NSP. Table 3, in Appendix, summarizes our findings.

# 5 Disclosure
We disclosed our findings to Google, with an emphasis on the misconfiguration of the SSL Pinning (which may give a false sense of security to inexperienced app developers). We also proposed to extend the AndroidStudio IDE with a linter for the NSP that checks for these misconfigurations and informs the developer about the potential risks. Google acknowledged that this is, in fact, a rather odd configuration. For what concerns the networking libraries not compliant with the actual NSP (see Table 3), we have disclosed our findings to the developers. We are still working towards full bugs fixes.

# 6 Impact of Advertisement Libraries
Advertisements (ads, in short) play a key role in mobile apps. In this section, we first provide an overview of how advertisement libraries (ad libraries) operate and their complexity, and we then explore the implications for the adoption of the NSP.

Ads are the most important source of income for many app developers, especially when they can be freely downloaded from the Play Store. An app can simultaneously embed one or multiple ad libraries. While the app is running, the ad library retrieves the content of the ads from a remote server and it displays it to the user. Every time an ad is shown to the user, the developer earns a revenue. If the user clicks on the ad, the developer then gets a more substantial revenue. Even though this mechanism is conceptually simple, the actual implementation details and the underlying process are far from trivial. We now quickly discuss the main steps, which are also depicted in Figure 2.