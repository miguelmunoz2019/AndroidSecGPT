Implementing the consensus method is this layer’s main task. The consensus mechanism—Proof of Work, Proof of Stake, or another—rules transaction agreement and blockchain inclusion. The whole blockchain ecosystem relies on this decision-making process for reliability and transparency. Transaction validation is crucial to the Blockchain Network Layer. It rigorously evaluates incoming transactions to verify they meet consensus processes and smart contract requirements. Blockchain integrity and security depend on this rigorous certification procedure. In Proof of Work or comparable contexts, this layer manages the complex process of mining blocks. Mining creates new blockchain blocks by solving challenging mathematical problems. The Network Layer quickly distributes mined blocks across the network, ensuring that all nodes validate and incorporate them into their blockchains. Additionally, the Blockchain Network Layer protects distributed ledger integrity. It ensures consistency across blockchain copies kept by network nodes. Consistency is essential for blockchain trust and reliability. This layer manages self-executing contracts in smart contract-enabled blockchains. It validates smart contract conditions before activation, ensuring blockchain ecosystem trust in automated contractual agreement execution.

# 4. Data Storage Layer
The Data Storage Layer stands as the bedrock of trustworthiness and security within blockchain-based applications, underpinning the very essence of data integrity. It serves
# Sensors 2023, 23, 8749
as the stalwart guardian, ensuring that information etched onto the blockchain remains impervious to tampering, creating a secure and transparent data storage solution. Fundamentally, this layer is bestowed with the solemn responsibility of safeguarding information on the blockchain. This is achieved through the skillful arrangement of interlinked components, creating an unyielding sequence of permanence and robustness. Contained within these blocks lies a wealth of transactional data, encompassing a wide spectrum of value exchanges, as well as complex data structures that encompass a diverse range of assets and contractual arrangements. In blockchain ecosystems that adopt smart contracts, the Data Storage Layer assumes the task of preserving the up-to-date status of deployed smart contracts. The system functions as a repository for both contract-related data and the factors that dictate their functionality. The aforementioned responsibility is carried out with steadfast dedication to maintaining the integrity of the data. In order to ensure the inviolability of data, this layer utilizes the powerful capabilities of cryptographic hash functions and consensus procedures. These guardians of security remain steadfast in their efforts to prevent any retrospective endeavors to modify recorded data on the blockchain without the universal agreement of the network, hence upholding the integrity of the blockchain. In situations where the amount of data exceeds the storage capacity of the blockchain, innovative off-chain data storage methods are utilized. The proposed methods involve storing cryptographic hashes or references on the blockchain for the purpose of verification, while the primary data is stored in external databases or decentralized file systems. This prudent strategy guarantees both the ability to be easily accessed and the potential for expansion. In addition, the Data Storage Layer enhances the capability of retrieving and querying data, enabling programs to access previous data or extract specific information as needed. Aligned with the remaining five tiers of the BSADS framework, this particular tier establishes a comprehensive integration of measures pertaining to data security, user authentication, data integrity, and smooth interaction with the blockchain network. The aforementioned statement offers a solid and steadfast groundwork, poised to confront the intricacies and difficulties associated with the development of Android applications based on blockchain technology. Furthermore, it allows for flexibility and growth as circumstances demand.

These six layers collectively cover the major components and functionalities required to build a secure Android app with blockchain data storage. They establish a well-structured architecture that ensures data security, user authentication, data integrity, and seamless interaction with the underlying blockchain network. While it is possible to introduce additional layers or further divide these layers based on specific requirements , the provided six layers offer a strong foundation for the BSADS framework. This flexibility allows developers to adapt the framework to diverse use cases and evolving technological landscapes. As blockchain technology continues to evolve, the BSADS framework can serve as a robust starting point, offering a balance between security, performance, and scalability.

In addition, the modularity of these layers facilitates maintenance and scalability. Without rewriting the entire application, developers can enhance or extend individual layers to accommodate new features or requirements. This agility is particularly valuable in the ever-changing mobile app development landscape, where remaining ahead of the curve is crucial. The BSADS framework fosters a community of innovation and best practices by encouraging collaboration between developers and blockchain enthusiasts. By sharing insights and experiences, developers can refine and expand the framework, ensuring that it remains at the vanguard of blockchain-based Android application development. In conclusion, the BSADS framework is a landmark in the convergence of Android application development and blockchain technology. It empowers developers to create the next iteration of Android applications that leverage the transformative power of blockchain data storage by virtue of its adaptability, security, and innovation potential.

# 4. Flow of Data and Relationships Between Layers
The user interacts with the application’s User Interface (UI), providing input or making requests (e.g., submitting a form, or initiating a transaction). Then it forwards the user’s input to the Application Logic Layer. The Application Logic Layer receives the user’s input and identifies that the user wants to perform an action that requires authentication (e.g., access a restricted feature, or sign a transaction). The layer then sends a request to the Identity Management Layer for user authentication.

The Identity Management Layer generates or retrieves the user’s decentralized identity (DID) and cryptographic key pair (public and private keys). It then uses the cryptographic keys to sign the authentication request and forwards the signed authentication request to the Blockchain Interface Layer. The Blockchain Interface Layer takes the signed authentication request and sends it to the Blockchain Network Layer to initiate the authentication process. It also verifies the authenticity of the authentication request using the user’s public key stored on the blockchain. The Blockchain Network Layer returns a response to the Identity Management Layer, confirming the successful verification of the user’s authentication request.

The Identity Management Layer informs the Application Logic Layer that the user’s authentication is successful, and the user is authorized to perform the requested action. Based on the user’s input and authentication status, the Application Logic Layer decides whether to read or write data to the Data Storage Layer. If the user requests to read data, the Application Logic Layer sends a query to the Data Storage Layer. For on-chain data, the Data Storage Layer interacts with the Blockchain Interface Layer to fetch the requested data from the blockchain (e.g., reading user account balance from a smart contract). For off-chain data, the Data Storage Layer accesses external databases or decentralized file systems using appropriate APIs or protocols (e.g., IPFS). If the requested data is on-chain, the Blockchain Interface Layer sends a query to the Blockchain Network Layer to retrieve the relevant information.

The Blockchain Network Layer returns the requested data to the Data Storage Layer and the Data Storage Layer forwards the retrieved data to the Application Logic Layer. The Application Logic Layer then processes the retrieved data, performs any necessary calculations or manipulations, and prepares the data to be displayed. It sends the processed data back to the UI Layer. Finally, the UI Layer displays the processed data to the user or provides appropriate feedback based on the user’s actions and the results of the requested operation. The relationship between the different layers of the proposed framework is best described as sequential and dependent. This means that one layer’s output is often the input for the next layer, and each layer relies on the preceding layers to perform its functions properly. However, the actual flow of data and interactions between the layers is bidirectional, allowing for a dynamic exchange of information to create a fully functional and secure app using blockchain technology. The bidirectional relationships ensure that each layer can communicate with others as needed, leading to a cohesive and well-integrated application architecture.