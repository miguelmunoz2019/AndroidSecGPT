# 3) HTML CONTENT REPLACEMENT
As shown in Table 3, the security risk of HTML content replacement appeared in all 10 apps, which means that the apps did not validate HTML content in HTTP/HTTPS communication data. What content they received, what content they displayed, as shown in Fig. In this case, if a user clicks on the replaced HTML content, it may cause security threats such as data leakage or malware download. This kind of attack has a great impact on the News applications. Attackers can change display content and spread wrong/harmful information based on this vulnerability. We reported a security vulnerability of this kind in a representative app to CNNVD. See the vulnerability CNNVD-201806-1043  for details.

# 4) URL REDIRECTION
As can be seen from Table 3, 70% of apps have this problem. After replacing the ‘‘Location’’ field in response header with ‘‘https://m.baidu.com’’, none of the seven apps verified this field. They directly accessed the modified URL, as shown in Fig. A more harmful situation is that attackers replace the redirected URL of the login interface, with a highly similar fake page. The User enters username and password on this redirected page, which results in information leakage. Additionally, access to malicious links may also lead the mobile phone to be implanted in Trojans.

VOLUME 7, 2019 59959
# X. Huang et al.: Fuzzing the Android Applications With HTTP/HTTPS Network Data
1) JSON: If the application uses a custom JSON data processing mechanism, improve the filtering of data for various possible error formats.

2) HTML content replacement: This problem is mostly found in third parties, such as ad pages in apps. When jumping to a third-party page, the application should filter the content of the HTML data returned by the server before displaying it.

3) URL redirection: The app preferably avoids to use the response data of 302 in its key function. For the received 302 response data, the app should verify its legitimacy, filter the redirect URL, not jump except received the target URL.

# V. DISCUSSION AND SUMMARY
# A. LIMITATION AND FUTURE WORK
1) RESULT JUDGMENTS AND ACCURACY: AAHF cannot generate the root causes of these bugs directly. Similar to fuzzers such as IOTFUZZER , the design target of AAHF is to automatically produce vulnerability alerts (i.e., error message) to assist security analysts locating and confirming the root causes in applications easily. For example, analysts could search the keywords mentioned in error messages as the clue to locate the vulnerable binary code block. In fact, in general black-box testing, the final vulnerability confirmation always requires some kinds of manual efforts. AAHF might present false positive and false negative. For false positive, some ANR message reports are due to the Monkey operation (see Section IV). For false negative, since there is no reverse analysis of each test app, the test case is not targeted enough, AAHF will miss some risks.

2) ADJUSTMENTS AND IMPROVEMENTS: The JSON fuzzing framework PyJFuzz  used by this paper has a limitation on the data length. For the variation of long JSON data with arrays, it simply swaps the key-value pairs in sequence without changing its specific value. Therefore, the framework needs to be modified, or a new framework needs to be implemented to improve the ability to process JSON data. For data in HTML/javascript/image format, we consider increasing the diversity of samples. In the future, test samples generated by different fuzzers (AFL, PEACH, etc.) will be added to improve the testing effect. We can also perform a reverse analysis of the app to improve the relevance of test samples. How to handle HTTPS response data with custom encryption is also a problem worth studying.

3) EXPANSION OF THE APPLICABLE RANGE OF THE FUZZING METHOD: The generation of network communication data is not limited to Android applications. In the future, the applicable platform for this scheme can be extended (IOS, Windows, etc.), the types of protocols targeted can be increased, not just limiting to the HTTP/HTTPS protocol. For other protocols, we need to adjust the fuzzing strategy according to the.

59960 VOLUME 7, 2019
# X. Huang et al.: Fuzzing the Android Applications With HTTP/HTTPS Network Data
# 4) IMPROVE THE AVAILABILITY OF RESULTS
To exploit the vulnerabilities discovered in practice, the hacker needs to launch a successful man-in-the-the-middle attack first. This greatly increases the difficulty of utilization.

In the future, it could be studied how to make more convenient use of these problems.

# B. CONCLUSION
This paper proposed a black-box fuzzing method for Android applications, which uses network interaction data as test input to explore potential security risks from a new perspective. We tested 10 popular apps to verify the effectiveness of the method, discovered 4 kinds of security problems: application’s ANR, application’s crash caused by JSON data, HTML content replacement and URL redirection. The research indicated that network data, as one of the important attack surfaces of Android applications, would cause security impact and harm to the applications, in addition to causing the leakage of user’s private data. Exploiting these discovered vulnerabilities requires a successful man-in-the-middle attack, which is difficult. Even so, when developing applications, mobile software developers should pay attention to perfecting the legality and correctness of the verification mechanism for network data, to avoid the above security risks as much as possible.

# XINYUE HUANG
received the B.Eng. degree from the College of Electronics and Information Engineering, Sichuan University, Chengdu, China, in 2017, where she is currently pursuing the master’s degree with the College of Cybersecurity. Her current research interests include vulnerability mining, malicious code analysis, network security, and mobile security.

VOLUME 7, 2019
# X. Huang et al.: Fuzzing the Android Applications With HTTP/HTTPS Network Data
# ANMIN ZHOU
received the B.Eng. degree from the Northwest Institute of Telecommunication Engineering, Xi’an, China, in 1984. He is currently a Research Fellow with the College of Cybersecurity, Sichuan University, China. His current research interests include malicious detection, network security, system security, and artificial intelligence.

# LUPING LIU
received the M.S. degree from Sichuan University, Chengdu, China, in 2015, where he is currently pursuing the Ph.D. degree with the College of Electronics and Information Engineering. His current research interests include binary security, information extraction, and artificial intelligence.

# PENG JIA
received the B.Eng. degree from Sichuan University, Chengdu, China, in 2012, where he is currently pursuing the Ph.D. degree with the College of Electronics and Information Engineering. From 2015 to 2016, he was a Visiting Student with the School of Computer Science, University of Ottawa, Ottawa, ON, Canada. His current research interests include binary security, network science, and malware propagation.

# LIANG LIU
received the M.S. degree from Sichuan University, Chengdu, China, in 2010. He is currently an Assistant Professor with the College of Cybersecurity, Sichuan University. His current research interests include malicious detection, network security, system security, and artificial intelligence.

59962
VOLUME 7, 2019.