# On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
Zicheng Zhang
Singapore Management University
Singapore
zczhang@phdcs.smu.edu.sg
Lixiang Li†
miHoYo Co., Ltd.

China
lixiang.li@mihoyo.com
# ABSTRACT
Due to the frequent encountering of web URLs in various application scenarios (e.g., chatting and email reading), many mobile apps build their in-app browsing interfaces (IABIs) to provide a seamless user experience. Although this achieves user-friendliness by avoiding the constant switching between the subject app and the system built-in browser apps, we find that IABIs, if not well designed or customized, could result in usability security risks.

In this paper, we conduct the first empirical study on the usability (in)security of in-app browsing interfaces in both Android and iOS apps. Specifically, we collect a dataset of 25 high-profile mobile apps from five common application categories that contain IABIs, including Facebook and Gmail, and perform a systematic analysis (not end-user study though) that comprises eight carefully designed security tests and covers the entire course of opening, displaying, and navigating an in-app web page. During this process, we obtain three major security findings: (1) about 30% of the tested apps fail to provide enough URL information for users to make informed decisions on opening an URL; (2) nearly all custom IABIs have various problems in providing sufficient indicators to faithfully display an in-app page to users, whereas ten IABIs that are based on Chrome Custom Tabs and SFSafariViewController are generally secure; and (3) only a few IABIs give warnings to remind users of the risk of inputting passwords during navigating a (potentially phishing) login page.

Most developers had acknowledged our findings but their willingness and readiness to fix usability issues are rather low compared to fixing technical vulnerabilities, which is a puzzle in usability security research. Nevertheless, to help mitigate risky IABIs and guide future designs, we propose a set of secure IABI design principles.

∗Daoyuan Wu is the corresponding author.

†Lixiang Li was a MSc student when he conducted this study through the Advanced Research and Development Project course at The Chinese University of Hong Kong.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

RAID ’21, October 6–8, 2021, San Sebastian, Spain
© 2021 Association for Computing Machinery.

ACM ISBN 978-1-4503-9058-3/21/10. . . $15
https://doi.org/10/3471621
Daoyuan Wu∗
The Chinese University of Hong Kong
Hong Kong, China
dywu@ie.cuhk.edu.hk
Debin Gao
Singapore Management University
Singapore
dbgao@smu.edu.sg
# CCS CONCEPTS
• Security and privacy → Mobile platform security.

# KEYWORDS
Android Security; Usability Security; WebView Security
# ACM Reference Format:
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao. 2021. On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps. In 24th International Symposium on Research in Attacks, Intrusions and Defenses (RAID ’21), October 6–8, 2021, San Sebastian, Spain. ACM, New York, NY, USA, 13 pages. https://doi.org/10/3471621
# 1 INTRODUCTION
Nowadays, mobile applications (or apps) are heavily used in our daily life. Although most app functionalities are self-contained, it is not uncommon for users to open (external) web URLs in their app UIs (user interfaces). For example, a user may need to open a URL sent from her friends in a chat app like Whatsapp or WeChat, or need to open a URL embedded in an email when using Gmail. To satisfy such URL opening requirements in non-browser apps, one could offload the task to the system built-in browser apps. While this is simple for developers, it hurts user-friendliness due to the potential constant switching from the subject app to a system browser app. As a result, many high-profile apps choose to provide their own in-app browsing interfaces, or IABIs, for a seamless user experience.

However, if not designed or customized well, IABIs could introduce serious usability security issues. The major reason is that IABIs are typically simplified implementations of browsing interfaces lacking security indicators as opposed to “full-service” and standalone browsers with well-thought usability security designs. For example, an IABI may not display the full URL domain name or simply miss the HTTP(S) indicator. Motivated by this intuition, we conduct the first empirical study in this paper on the usability (in)security of in-app browsing interfaces in both Android and iOS apps. To this end, we collect and analyze a dataset of 25 high-profile mobile apps that contain IABIs, such as WeChat, Twitter, Gmail, LinkedIn, and Reddit. To make our results representative, these apps are selected from five common app categories, including Chat, Social, Mail, Business, and News.

# RAID ’21, October 6–8, 2021, San Sebastian, Spain
Atop this dataset, we perform a systematic analysis that comprises eight carefully designed security tests (T1∼T8 in three categories) and covers the entire course of interacting with an in-app web page in IABIs including page opening, displaying, and navigating. First, before a user opens a URL, we test whether the subject app provides sufficient URL information to enable end users to make informed decisions on opening the URL in a trustworthy manner (T1). Second, after the web page is loaded, we test whether the IABI provides enough security indicators for end users to validate the trustworthiness of the displayed page. This includes whether the URL itself (T2), an HTTPS (secure) indicator (T3), and an HTTP (insecure) warning (T4) are displayed in the title/address bar, whether a security alert is prompted for URLs with TLS errors (T5), and whether IABIs could defend against phishing URLs with a fake HTTPS lock icon (T6) and a long sub-domain name (T7). Third, during navigation of the web page, we test whether IABI could give a specific warning if the browsed page asks users to input passwords in a (potentially phishing) login form (T8).

Although our analysis focused on the apps’ performance rather than a study with direct end users, our cross-platform analysis results show the following major security findings:
- About 30% of the tested apps do NOT display the complete URL, thus fail to provide enough information for a user to trustfully open an URL. Most of these apps omit the scheme (HTTP or HTTPS), while two apps (Weibo and Quora) completely hide the URL. Another 30% of the apps, despite outputting the full URL, display additional favicon or title information, which enables attackers to craft a fake favicon/title to mislead users.

- Nearly all custom IABIs have various problems in providing sufficient indicators to faithfully display an in-app page to users, whereas ten IABIs that are based on Chrome Custom Tabs or SFSafariViewController are generally secure. Specifically, among the 15 apps implementing their own IABIs, over half do not display the domain name in the address bar, and nearly none provide HTTP(S) indicators, which makes them fail to defeat phishing with a lock emoji or a long subdomain.

- Only a few IABIs, from the QQ, and QQ Mail apps, give specific warnings to remind users of dangerous operations (e.g., password inputting) during navigating a login page.

To understand developers’ reaction to our findings and to potentially provide our recommendations on fixing severe IABI issues, we issued security reports to all affected apps (details in Section 5). Most developers acknowledged our findings and agreed with our assessment. In particular, Instagram had fixed its issues as we reported and LinkedIn would patch it in its future versions. However, we also found that developers’ willingness and readiness to fix usability security issues are rather low compared to fixing technical vulnerabilities. Specifically, they refused to recognize them as vulnerabilities and were not willing to patch or improve their risky IABIs. Nevertheless, to help mitigate risky IABIs and guide future designs, we propose a set of secure IABI design principles in Section 6.

To sum up, we make the following contributions in this paper:
- (Problem and analysis in §2-§3) We summarized the attack surfaces on interacting with an IABI and performed a systematic analysis with eight security tests.

- (Measurement results in §4) We obtained cross-platform analysis results and their three major security findings by extensively testing 25 high-profile mobile apps.

- (Reporting and defense in §5-§6) We reported our findings to affected vendors and analyzed their responses. We further proposed a set of IABI design principles.