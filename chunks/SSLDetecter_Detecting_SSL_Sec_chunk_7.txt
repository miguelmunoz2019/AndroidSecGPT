# 6. Results and Analysis
# 6. Confirm the Interface State Similarity Threshold
The setting of the interface state similarity threshold affects the number of GUI nodes in the GUI traversal model. To balance the efficiency and accuracy and test the influence of different similarity thresholds on the number of GUI nodes and Activity components traversed, we randomly select 6 popular applications of different categories from the application markets for testing. The specific information of the six applications is shown in Table 4, including the application name, the size of the application, the collection of Activity components extracted from the AndroidManifest.xml file, and the total number of activities after removing the third-party library.

In Figure 4, when the similarity threshold is gradually increased from 0 to 0, the total number of GUI nodes traversed in the six applications tends to increase. It can be seen from the four applications of “Douguo,” “Straight flush,” “Tencent News,” and “JMEI” that when the threshold value changes from 0 to 0, the interface state changes slowly and the number of GUI nodes formed is not very different. After the threshold value of 0, the interface state is further divided, and the number of GUI nodes increased obviously. Figure 5 shows the variation trend of the total number of Activities traversed in the six apps when the similarity threshold gradually increases from 0 to 0. As can be seen from the figure, the change in the number of Activities is not as obvious as the change in the number of GUI nodes and tends to balance in the end.

After further analysis of the two applications of “CareOS” and “Zhihu Daily” which have little change in the number of GUI nodes, the main reasons are found as follows. The total number of widgets on each interface for the “CareOS” application is small, and the traversal saturation has been reached when the threshold is set to 0. The “Zhihu Daily” application belongs to a single-function information application, and each category of soft text list is mainly displayed by the ListView widget. Since the child widgets of the same structure in the interface widget tree are effectively cropped, the number of nodes traversed varies little with the similarity threshold. At the same time, it is found that the successful login of the application has a certain influence on the number of generated GUI nodes. For example, when the similarity threshold is set to 0, if the login is successful, the traversed GUI node is as high as 103; if the login fails, the number of GUI nodes traversed is 70.

Combined with the results shown in Figures 4 and 5, the threshold value of the interface state similarity is set to 0 in our SSLDetecter system from the aspects of accuracy and efficiency. This is the answer to the first research question RQ1.

# 6. Average Traversal Coverage of SSLDetecter
We compare the SSLDetecter system with Google’s official automated testing tool Monkey. Monkey drives the automation of applications based on a sequence of random events, while our system is based on application widgets. We set Monkey as the default configuration and set the interval between two random test events to 200 milliseconds. In the experiment, we have found that the test results of Monkey are different each time, and finally, we take 5 tests to average. However, when the network state remains unchanged, the
# Security and Communication Networks
fM f’ IM I’ -M -’ HM H’ M ’ (M (fi (z (U (F
“nterfaceAstateAsimilarityAthreshold
%areYQ QtraightAflush Gouguo ?encentA7ews ZhihuAGaily ”jq“
fM f’ IM I’ -M -’ HM H’ M ’ (M (fi (z (U (F
“nterfaceAstateAsimilarityAthreshold
%areYQ QtraightAflush Gouguo ?encentA7ews ZhihuAGaily ”jq“
situation in which our SSLDetecter runs multiple times is target application tests for 4 minutes on both SSLDetecter and Monkey. The results are shown in Table 5.

The results show that the average Activity Coverage of Monkey is 21%. And the Activity Coverage rate of our
# Security and Communication Networks
# 5. Activity Coverage Results
SSLDetecter ranges from 17% to 58%, with an average coverage rate of 35%. The Activity Coverage of our system is much higher than that of Monkey. In practice, SSLDetecter traverses more application UIs than Monkey. This is the answer to the second research question RQ2.

In general, as the number of Activities in the application increases, the Activity Coverage gradually decreases in both SSLDetecter and Monkey. The main reason is that the number of activities in the application is positively correlated with the functional complexity of the application. The more complex the function is, the more complex the GUI node jump will be, which will lead to the reduction of coverage. There are many reasons why Monkey’s traversal coverage is lower than our system. Firstly, Monkey is easy to click on the outside area of the application, causing exceptions such as jumping out of the application and being unable to execute. While operations of our system is to click on the application’s widgets, all operations are controllable, alleviating a lot of jump failures. Secondly, SSLDetecter can automatically complete some simple user input events based on the UI type and the preconfigured input library. Monkey does not have the support of simple user input, and the research  has shown that automatic inputs can help increase traversal coverage. In addition, sometimes, on an Activity of an application, there are many similar widgets that can display a lot of similar content. Monkey tends to spend too much time in this Activity because it does not have traversal strategies, while our SSLDetecter system has corresponding traversal strategies that can handle these specific situations very well.

A study  shows that if we allow users to manually exhaust the traversal of the GUI interface of the application, the activity coverage achieved by the artificial traversal method is 30% on average. The experimental results prove that the coverage rate of our automatic traversal algorithm is also better than that of manual traversal. Furthermore, our method is applicable to packed applications, and time is within acceptable limits without being too lengthy.

Overall, our SSLDetecter system has much higher traversal coverage than the Monkey. Our traversal strategy is optimized for MITM attack scenarios, with higher coverage, and is more suitable for driving application auto-execution and completing dynamic verification of SSL security vulnerabilities.

# 6. Comparison between SSLDetecter and SMV-HUNTER
In order to verify the feasibility and practicability of our SSLDetecter system, we use crawler technology to collect popular applications of various categories in the 9 major application markets, with a total number of 2456. The number distribution of each category in 2456 applications is shown in Figure 6.

Our SSLDetecter system and the existing SMV-HUNTER system are, respectively, used to test 2456 applications for comparison. As can be seen from Figure 7, compared with the SMV-HUNTER system, the SSLDetecter system improves the detection efficiency by about 38%. The total time of static analysis of SMV-HUNTER is 44 hours. It statically analyzes 2,456 applications, with an average static analysis time of 65 seconds per application. After static analysis, 350 applications are left for dynamic analysis. And the total time of dynamic analysis using two simulators is 54 hours. The average time of dynamic analysis is 558 seconds.

While for our SSLDetecter system, the total time of static analysis is 33 hours for 2456 applications, with an average static analysis time of 49 seconds per application. After static analysis, 773 applications are left for dynamic analysis. The total time of dynamic analysis using two simulators is 72 hours and average time of dynamic analysis is 336 seconds. In summary, the average analysis time for each application of our SSLDetecter system is 385 seconds, while SMV-HUNTER is 623 seconds.

As is shown in Figures 8 and 9, SSLDetecter detects more applications with SSL vulnerabilities, and the average detection rate increases by 6 percentage points than SMV-HUNTER. It should be noted that the SMV-HUNTER currently only supports the detection of only the vulnerability type of trusting all hosts, and the number of such vulnerabilities detected is 267. Our SSLDetecter system detects a total of 424 applications with SSL security vulnerabilities (not just trusting all host vulnerabilities).

# Security and Communication Networks
# 15
# Healthy life
To further analyze the results in detail, the test results of SSLDetecter are divided into three categories: trusting all host-type vulnerabilities, other types of SSL vulnerabilities, and SSL security vulnerabilities of packed applications. Figure 8 describes the results of SSLDetecter system in detail.