# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
(‘ICV’ refers to ‘Improper certificate validation, ‘WBCVV’ refers to ‘WebView bypass certificate validation vulnerability’, ‘WRCEV’ refers to ‘WebView remote code execution vulnerability’ and ‘ACOCDV’ refers to ‘Alibaba Cloud OSS credential disclosure vulnerability’).

WebView is an Android component that displays webpages and supports the execution of JavaScript. And its APIs are designed to customize WebView for developers. TABLE 1 shows the WebView APIs and their functional description.

Certificate verification APIs are used for HTTPs communication process of Apps, through which developers can customize the verification rules. TABLE 2 summarizes related APIs.

SDK is a set of tools provided by an organization, and are used to develop Android applications. For example, SDK provided by Alibaba help developers use the company’s services. TABLE 3 shows APIs in Alibaba OSS Cloud service SDK.

# III. CASE STUDY
# A. SELECTING VULNERABILITIES
# 1) IMPROPER CERTIFICATE VALIDATION (ICV)
HTTPs is an extension of the Hypertext Transfer Protocol (HTTP). It is used for secure communication over a computer network, and is widely used on Apps. In the use of such a network transmission protocol, the App verifies whether the certificate on the server side is a compliant certificate, so that both sides of the communication can be trusted. Apps use the X509TrustManager class to trust certificates. The weakness that the App improper certificate validation is described in CWE-295, when a certificate is invalid, it might allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The weakness code is shown in Fig 1. We extract 100 Apps in the dataset, After manual analyzing, we find that 81 of these Apps with the weakness, as shown in Table 4. Hence we analysis this weakness in the paper.

# 2) WebView BYPASS CERTIFICATE VALIDATION VULNERABILITY (WBCVV)
The WebView component supports certificate verification when loading webpages with HTTPs protocol. As described in CVE-2014-5531, when an App is displaying data through WebView, at the same time, the function of verifying the validity of the certificate in this component does not work. In this case, the App will be vulnerable to man-in-the-middle attacks, And attacks can obtain sensitive information via a crafted certificate. As shown in Fig 2, the WebView is used to load the webpage, when the certificate verification fails, it still allows the data exchange between the App and the server side of the crafted certificate. Table 4 shows that we find 86 Apps in 100 have this vulnerability, so it is worthwhile to analyze the vulnerability in detail.

# 3) WebView REMOTE CODE EXECUTION VULNERABILITY (WRCEV)
According to Google , there are 2 billion active devices on Android monthly, and close to 10% are running in Android 4 or lower versions and more than 4% are running in Android 4 or lower versions. That indicates that JS-to-Java interface vulnerabilities may still affect hundreds of millions of users. Table 1 describes some of the APIs for the WebView component. The addJavascriptInterface(Object object, String name) function provides a way
VOLUME 8, 2020 106439
# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
# 4) ALIBABA CLOUD OSS CREDENTIAL DISCLOSURE VULNERABILITY (ACOCDV)
ACOCDV is a new vulnerability with wide influence in 2017. Alibaba cloud Object Storage Service (OSS) is a massive, safe and highly reliable cloud storage service provided by Alibaba. As shown in Fig 4, when developers use Alibaba cloud OSS service framework by the SDK, sensitive information, such as AccessKey and AccessKeySecret, is directly written into the code (for data protection, we perform sensitive information erasure processing). An attacker can easily get sensitive information through reversing the App, it causes data leakage from developers on cloud services. The data in Table 4 shows that the vulnerability the existence rate of the vulnerability is 20%, so the vulnerability of data leakage should be taken seriously.

# B. CASE STUDY 1-WebView REMOTE CODE EXECUTION vulnerability(WRCEV)
# 1) VULNERABILITY TO EXPLAIN
java/android/webkit/BrowserFrame.java in Android 4 and earlier uses the addJavascriptInterface in conjunction with creating an object of SearchBoxImpl class, which allows attackers to execute arbitrary Java code by leveraging access to the SearchBoxJavaBridge_ interface at certain Android version.

An App in the above environment, when the WebView component uses the addJavascriptInterface(Object object, String name) API to establish the connection between JavaScript and Java without security restrictions. JavaScript in the webpage not only has permission to call Java object’s methods in its runtime environment, but to execute Android system commands.

The above description of the vulnerability is summarized that when the App runtime environment belongs to Android version 4 or below, if the WebView addJavascriptInterface(Object object, String name) API is used in the App and the developer has not added security restrictions, an attacker can build malicious JavaScript code perform instruction execution on the App.

# 2) VULNERABILITY POC
(1) File MD5: cdc18db0cad812225d8412be4e27182b
(2) version: 4
(3) Exploit: The App supports running under Android version 4. Fig 5 shows the code that causes the vulnerability in the App, it uses the WebView component to display a
The sample code of WBCVV(md5 of this App is 28ac441942de453dd3c5756b2b223f9d).

The sample code of WRCEV(md5 of this App is ef400edb1ece62a44b97edabfdc5e076).

The sample code of ACOCDV(md5 of this App is 0aa8d5d2e46902509d4343077c14d15e).

# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
webpage. Also, it uses addJavascriptInterface(Object object, String name) API to make the JavaScript code can call the object by string a method in the called HTML page. However, this App does not limit the vulnerability through some protection methods, so the App has the vulnerability.

We install the App on an Android emulator, we open the browser to tap an url, such as https://www.yahoo.com. As is shown in Fig 6a, the App correctly displays the page passed by the url. Viaing a MITM attack, we forged malicious JavaScript code into the webpage. Malicious JavaScript code executes the command ‘‘ls - al /MNT/sdcard/’’ to read file information in sdcard. As shown in Fig 6b, malicious JavaScript normally runs on the vulnerable App, which reads the file information from the sdcard directory of the Android device. It indicates that this vulnerability exists and can be exploited in the App.

# 3) INSIGHT
When developers use the addJavascriptInterface (Object object, String name) API to call a web page. As summarized in Table 5, the functions of removing the risk interface should be added to limit the permission of JavaScript code. They can eliminate the WRCEV in Apps.

# C. CASE STUDY 2-ALIBABA CLOUD OSS CREDENTIAL DISCLOSURE VULNERABILITY (ACOCDV)
# 1) VULNERABILITY TO EXPLAIN
Alibaba Cloud Object Storage Service (OSS) is a secure and reliable cloud Storage Service provided by Alibaba. When the service is used in an Android App, the APIs provided by the SDK of the service need to be called in the App. However, developers usually simply copy the official sample code and don’t consider the security weakness of programming. Fig 7 is the demo code provided by the Alibaba cloud. Attackers can obtain this set of credentials by using the OSS management tool to get the data in the service easily. It will result in information leakage and constitute a serious security weakness.

# 2) VULNERABILITY POC
(1) File MD5: fea5226fdf7a1a1ed95d6c24a6e30f06
(2) version: 4
(3) Exploit: In order to facilitate the manual analysis and reading of the source code of the App, we use the Jeb  tool to reverse the App when manually verifying the vulnerability. Because the App is packed, we use our unpacking tool  to get the source code of the App. As shown in Fig 8, it is the source code which is obtained after unpacking the App.

Fig 9 is the code which contains sensitive information in the App. In onCreate method, we find construct the object Alibaba cloud storage service initializes the object. When constructing an object, this method directly invoke the accessKeyId and accessKeySecret, and both of these sensitive values are hard coded by the developer in the program, thus it causes the weakness of sensitive information.

VOLUME 8, 2020 106441
# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
# 3) INSIGHT
In order to prevent data leakage of sensitive information of accessKeyId and accessKeySecret, developers should encrypt sensitive information when using the Alibaba OSS SDK.

# D. VULNERABILITY CHARACTERISTICS
As shown in TABLE 6, the characteristics of vulnerabilities are summarized after a comprehensive case study of each vulnerability. In addition, after a lot of manual analysis of Apps of above vulnerabilities, we divided the four vulnerabilities into three categories, and generalized the analysis methods and characteristics of each type of vulnerability based on the four specific vulnerabilities. The details are described as follows.

# 1) IMPROPER CERTIFICATE VALIDATION (ICV)
An App uses the method of checkServerTrusted. No certificate verification operation is performed in it, or in this method, only the expiration time of the certificate is verified, and no other information is verified.