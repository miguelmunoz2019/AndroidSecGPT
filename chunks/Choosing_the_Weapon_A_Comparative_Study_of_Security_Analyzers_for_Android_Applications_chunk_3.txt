This report covers all the information found in the various text files of MARA’s output directories. MobSF’s major sections cover the Code Signers Certificate, Android Permissions, Android API Calls, Security Analysis, Malware Analysis, and Recon to name a few. Many of these major report sections are subdivided into smaller groupings. Security Analysis is subdivided into Manifest, Code, and File analysis. Each of these smaller groupings contains vital information that is given a severity score. The level of detail far exceeds MARA’s Trueseeing Report.

Findings Categorization: Using MARA and MobSF to analyze the same benchmark and live APKs allowed a baseline of how each tool worked and its propensity of error. The tools reported their vulnerability findings extremely differently which made direct comparison difficult. MARA has its Trueseeing Report, which is the only dependable report that was produced out of the sub-tools. The Trueseeing Report categorizes findings into High, Medium, Low, and Info. This was done to fairly compare the two analyzers.

has a higher severity categorization, Critical. MobSF’s Signature categorization does not compare to any within MARA’s Trueseeing report. This categorization was extremely rare to see and was dropped from the results.

# a) Performance on the DIVA Benchmark:
# b) Performance on the Ghera Benchmark:
# c) Performance on the Live Applications:
As mentioned before, we operated MARA and MobSF separately on 20 live Android applications obtained from APKPure.com.

For the rest of the Ghera benchmark, we found mixed results. On the benchmark under Storage category, both MARA and MobSF fail to detect many of the vulnerabilities. Only MobSF is able to detect some vulnerabilities in the SQL-based benchmarks (i.e., SQLite-ExecSQL and SQLlite-RawQuery-SQLInjection). Both analyzers correctly identified the vulnerabilities in Ghera’s Permission based benchmarks (i.e., UnnecessaryPermissions-Priv Escalation and WeakPermission-UnauthorizedAccess). However, the detected vulnerabilities are categorized differently with respect to severity. MARA places all permission-based findings in its ‘Info’ category, while MobSF classifies most of them as ‘Dangerous’. These mixed results are not surprising considering that the Ghera Benchmark developers also came to a similar mixed conclusions about different security analyzers.

presents the number of vulnerabilities at different severity levels detected by MARA and MobSF in My Leviton v2 (App-17). As seen in the figure, many vulnerabilities, which MARA categorized as ‘high’ severity are characterized as ‘info’ by MobSF. A slightly different scenario is found in the results for Color Flashlight v3 (App-18). As presented in Figure 4b, the number of vulnerabilities detected and classified in each category are by both MARA and MobSF are in agreement. The only exception is that MARA identified higher number of vulnerabilities classified as ‘info’. These additional vulnerabilities are legitimate informational findings such as text strings and URLs, while MobSF does not give a categorization score to these types of findings in its report.

presents the results for Messenger for Messages Text and Video Chat v2 (App-19). Compared to MARA’s result, MobSF reports a large number of vulnerabilities classified as ‘high’ severity. This appears surprising. In most cases, the MobSF-reported ‘high’ severity vulnerabilities would be counter balanced by MARA-reported ‘info’-level vulnerabilities. But, this is not the case here. MobSF gave the application a general Security Score 15/100, which is the lowest among all the 20 live applications in this study. Further investigation reveal that MobSF reports a vulnerability to the application requesting root privileges and a decent percentage of the source code was not fully de-obfuscated. MARA was also not able to fully de-obfuscate the application’s source code. MobSF also found 16 trackers associated with the application. For each tracker, MobSF cross-references the information with a privacy organization called Exodus-Privacy . This allows MobSF users to quickly find information on the trackers used in applications. CallDorado, one of the trackers found in this Messenger clone, is able to collect vast amounts of private data from users’ phones (call logs, contact lists, and location). Worst yet, this data is shared with unspecified third parties . Such an application seems to be bordering on the definition of spyware.

A similar result is found for New Orleans Jazz Fest v17 (App-20), as presented in Figure 4d. The number of vulnerabilities at different severity levels detected by MARA and MobSF in the other 16 live applications (App-1 through App-16) are presented in Table III. As seen in the table, for App-13 (Instasweet Retro Vintage Camera Filter Camera v1) and App-16 (WeChat v7), MARA reports zero vulnerabilities. This is because MARA fails to reverse engineer these two applications.

# VI. THREATS TO VALIDITY
Many of the assertions in this study comes down to the overall usability of the two analyzers in question. This is the main threat to validity. It can be argued that MARA and MobSF are capable of many of the same findings. Those arguments are largely correct, yet a tool is meant to be used. MARA catalogs all of the same findings that are presented in MobSF’s report, but the information is presented in such a difficult way. Only one report, Trueseeing, was dependably generated when using MARA across the benchmarks and live applications. Qark, another sub-tool of MARA, also produces reports. These Qark reports were not always generated dependably. When MARA fails, it does so silently. A developer or security researcher can comb through all of MARA’s text file dumps to piece together usable information. Or they can get the same results in one easy to read MobSF report.

Another threat to validity was the methods of comparison. MARA and MobSF do not have the same severity level categorizations. Some levels had to be fused for both security analyzers. Also, MobSF has some specialized severity level categorizations that specific to sub-sections within its own report. If severity level combinations are done incorrectly, one tool’s perceived effectiveness may be affected.

# Table III: Vulnerabilities Detected in Live Applications
Here, H = high, M = medium, L = low, I = info
# VIII. CONCLUSION
This study compared two Android app security analyzers to investigate if their use could benefit developers and security researchers in assessing application security. Either scanner, MARA or MobSF, could be used to assess the security posture of an Android application. Both identify security vulnerabilities within the context of Android applications and reverse engineer fully packaged APKs. The major difference between the two is how the information is presented post analysis.

MobSF has an easy to follow report that logically shows information in subsections. Each individual finding that may pose a security risk is given some sort of vulnerability score. MARA’s sub-tools are haphazardly strung together by a bash script that dumps their findings in directories. It may not always produce the same results if one of the sub-tools fails. If a sub-tool fails, it does so silently without alerting the user.

MARA’s most dependable report is Trueseeing, which often categorizes high risk findings within its Info category. MARA needs its own reporting format that collects information from its disparate sub-tools in one place. In its current state, MARA is a time-consuming venture; it is possibly useful but arguably not usable. MobSF can be preferable over MARA..