# Predicting Security Vulnerabilities using Source Code Metrics
Sundarakrishnan Ganesh
Department of Computer Science and Media Technology
Linnaeus University
Vaxjo, Sweden
sg222wn@student.lnu.se
Tobias Ohlsson and Francis Palma
Department of Computer Science and Media Technology
Linnaeus University
Kalmar, Sweden
{tobias.olsson,francis.palma}@lnu.se
Abstract—Large open-source systems generate and operate on a plethora of sensitive enterprise data. Thus, security threats or vulnerabilities must not be present in open-source systems and must be resolved as early as possible in the development phases to avoid catastrophic consequences. One way to recognize security vulnerabilities is to predict them while developers write code to minimize costs and resources. This study examines the effectiveness of machine learning algorithms to predict potential security vulnerabilities by analyzing the source code of a system. We obtained the security vulnerabilities dataset from Apache Tomcat security reports for version 4.x to 10.x. We also collected the source code of Apache Tomcat 4.x to 10.x to compute 43 object-oriented metrics. We assessed four traditional supervised learning algorithms, i.e., Naive Bayes (NB), Decision Tree (DT), K-Nearest Neighbors (KNN), and Logistic Regression (LR), to understand their efficacy in predicting security vulnerabilities. We obtained the highest accuracy of 80% using the KNN. Thus, the KNN classifier was demonstrated to be the most effective of all the models we built. The DT classifier also performed well but under-performed when it came to multi-class classification.

Index Terms—Prediction, Security Vulnerabilities, Machine Learning, Source Code, Software Metrics.

# I. INTRODUCTION
The system’s security is profoundly conditioned on the quality of the underlying source code. Poor code quality frequently makes the code susceptive to third-party access, thus, drawing the system exposed to security threats. Security vulnerabilities identification is essential to implement and operate secured systems. A study revealed that a cyberattack in Equifax led to 143 million accounts being exposed, for which Equifax accused Apache Struts’ open-source nature.

System security has been a subject of interest concerning vulnerability identification and avoidance. Previously, the revealing of vulnerabilities or bugs was conducted through manual peer reviews, which became tiresome as developers began producing a thousand lines of code. Thus, the code inspection tools, e.g., JSLint  and SonarQube , were introduced, helping to recognize vulnerabilities based on familiar code patterns. Nevertheless, the problem of revealing vulnerabilities as early as possible persists. Software testing methods, e.g., fuzz testing are demonstrated useful to identify vulnerabilities; however, at later steps of development cycle.

As outlined by NordVPN, the number of common vulnerabilities and exposures increased by 12,174 in 2020 with laborious patching efforts. Without patches installed, attackers may exploit the security vulnerabilities . This study guides by recognizing security vulnerabilities in open-source systems like the Jakarta servlet engine: Apache Tomcat.

Large software projects generate a plethora of source code that makes it challenging for the developers to determine the source of a bug or security vulnerability. Moreover, security vulnerabilities are usually not revealed until the very end of development. Security vulnerabilities might boost the cost of quality assurance significantly. Therefore, this study strives to construct machine learning models that will suggest developers on the likelihood of vulnerability occurrences in the source code using static metrics. Thus, we answer two research questions – RQ1: What is the best feature set for predicting security vulnerabilities? and RQ2: Can we employ machine learning to predict security vulnerabilities with high accuracy?
The key contributions of this paper are: (1) a dataset consisting of security vulnerabilities and source code metrics for Apache Tomcat version 4.x until 10.x; (2) identification of the features set that contribute most to forecasting security vulnerabilities; (3) a best-performing machine learning model to predict the type and severity of the security vulnerabilities. We achieved the highest accuracy of 80% using the KNN classifier. The other three classifiers: Decision Tree (DT), Logistic Regression (LR), and Naive Bayes (NB), had an accuracy of 77%, 61%, and 71%, respectively. The DT classifier under-performed for multi-class classification.

In the rest of the paper: Section II provides some background information on security vulnerabilities and the metrics we use. Section III highlights the related work while Section IV describes our method. Section V presents experiments and results with a discussion in Section VI. Finally, Section VII concludes the paper and outlines future plans.

# II. BACKGROUND
Security vulnerabilities are identified via common vulnerabilities and exposures (CVEs) categories.

978-1-6654-1830-0/21/$31 © 2021 IEEE
Authorized licensed use limited to: Pontificia Universidad Javeriana. Downloaded on August 12, 2024 at 03:35:06 UTC from IEEE Xplore. Restrictions apply.

# A. Types of Security Vulnerabilities
Apache Tomcat has 22 unique security vulnerabilities as listed on the Apache website: AJP Request Injection and potential Remote Code Execution, Arbitrary File deletion, Authentication weakness, Cross-site scripting, Denial of Service, DIGEST Authentication weakness, Frame injection in documentation Javadoc, HTTP/2 DoS, HTTP/2 request mix-up, Information disclosure, Limited directory traversal, Local Privilege Escalation, Multiple weaknesses in HTTP DIGEST authentication, Remote Code Execution, Remote Code Execution on Windows, Remote Code Execution via session persistence, Request Smuggling, Security Bypass, Session fixation, Session hi-jacking, Unrestricted Access to Global Resources, and WebSocket DoS.

For example, Denial of Service is an attack in which a resource is rendered unavailable for its expected use. If a service is swamped with requests, regular users may not be able to send requests to it . Remote Code Execution attack is written into an automated script that yields remote access to a potentially compromised system with administrative rights . Information Disclosure occurs when a website inadvertently discloses sensitive information such as passwords or financial details to its users . AJP Request Injection and Potential Remote Code Execution vulnerability transpires when the AJP (Apache Jserv Protocol) connections are entrusted without validation . The Arbitrary File Deletion vulnerability transpires as a result of a Directory Traversal attack where, utilizing malformed input, an attacker deletes files available via the web application. The Request Smuggling vulnerability transpires when incoming HTTP requests are not validated, and thus, an attacker sends malformed HTTP requests to the application resulting in information disclosure, security bypass, or directory traversal attack.

# B. Code Quality and Vulnerability Proneness
Chowdhury and Zulkernine  showed that code quality metrics such as coupling, cohesion, and complexity metrics are critical in the occurrence of a vulnerability in a system. Poor quality code can significantly increase the probability of an external attacker exploiting certain parts of the system. This relationship between code quality and vulnerabilities was recognized in 2001 when the Code Red exploited a buffer overflow attack on Microsoft’s Internet Information Services.

# C. Source Code Metrics
In this study, we consider 30 source code metrics from  that we use in predicting security vulnerabilities (Table I).

# III. RELATED WORK
Several studies performed the detection of security vulnerabilities or defects early in the life-cycle of the software systems –. For example, Harer et al.  discussed the use of traditional and deep machine learning models to detect vulnerabilities in C/C++ programs using control-flow graphs to predict vulnerabilities. Their features are extracted mainly based on the build and source of the code. Pang et al.

- CBO (Coupling Between Objects) is the number of dependencies in a class.- DIT (Depth of Inheritance Tree) represents the number of fathers in a class.- totalFieldsQty, protectedFieldsQty, defaultFieldsQty, finalFieldsQty metrics are the number of fields of various types.- totalMethodsQty (Number of Methods) is the number of methods of various return types and scopes.- visibleMethodsQty (Number of Visible Methods) is the number of non-private methods.- NoSI (Number of Static Invocations) represents the number of invocations to static methods, but is limited to JDT resolved methods.- RFC (Response for a Class) is the number of unique method invocations in a class, but fails with overloaded methods.- LOC (Lines of Code) is the total lines of code in a class.- LCOM (Lack of Cohesion of Methods) is the count of the number of method pairs whose similarity is zero.- TCC (Tight Class Cohesion) is the cohesion of a class and results are delivered between 0 and 1.- LCC (Loose Class Cohesion), same as TCC, but also includes the number of indirect connections between visible classes for the cohesion calculation.- returnQty, loopQty, comparisonsQty, tryCatchQty, paranthesizedExpsQty, stringLiteralsQty, numbersQty, mathOperationsQty, and variablesQty represent the number of return statements, number of loops, comparison operators, try and catch statements used, parenthesized expressions, string literals, numeric literals, arithmetic symbols, and variables respectively.- maxNestedBlocksQty (Max Nested Blocks) is the highest number of blocks nested within each other.- anonymousClassesQty, innerClassesQty, and lambdsQty are the number of anonymous classes, inner classes, and lambda expressions, respectively.- uniqueWordsQty and logStatementsQty are the count of unique words and log statements in a class, respectively.- Has Javadoc metric checks whether the source code has javadoc or not.- privateMethodsQty, protectedMethodsQty, synchronizedMethodsQty based on modifiers specify whether a class is public, abstract, private, protected, or native.- assignmentsQty and fieldQty represent how often each variable and local field was used inside each class, respectively.- Method Invocations is the number of directly invoked methods, variations are local invocations and indirect local invocations.- WMC (Weight Method Class), also known as McCabe’s complexity, counts the number of branch instructions in a class.