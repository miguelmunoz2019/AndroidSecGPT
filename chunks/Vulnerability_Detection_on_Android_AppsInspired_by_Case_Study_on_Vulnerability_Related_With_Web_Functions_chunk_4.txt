# 1) A VERIFICATION METHOD FOR MAN-IN-THE-MIDDLE ATTACK VULNERABILITY CAUSED BY WEAK CERTIFICATE VERIFICATION
Fig 11 depicts the attack architecture for this weakness. First, we set up the environment to enable Burpsuite  to block all network traffic from mobile. We write a script based on Burpsuite, which is mainly responsible for analyzing the traffic information of mobile, extracting the Host and body and sending it to the server. The web service module is mainly responsible for auto installing Apps and recycling the results of analyzing network traffic, also, determining whether the App is attacked by MIMT automatically.

# 2) A VERIFICATION METHOD FOR WRCEV
As shown in Fig 12, our verification method is mainly to inject malicious JavaScript code into the App’s network traffic by MIMT. We use Burpsuite to block all traffic sent by the mobile and injecting the written malicious JavaScript code in the response. If the JavaScript can successfully execute malicious code, the code will send a record to the web service to record whether the App exists the vulnerability.

VOLUME 8, 2020 106445
# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
# 3) A VERIFICATION METHOD FOR ACOCDV
We use the Jeb to reverse the App, and we look for the code module initialized by OSSClient in the reverse smali code. We find out whether initialize method by using plaintext accessKey and secretKey. We get these keys, and use the OSSUtils to connect the service.

# V. EXPERIMENT
Our experiments are performed in the following environment: The CPU is e5-2640v4, the memory is 32G, system is Linux 64 and python 2.

# A. COLLECT ORIGINAL SAMPLES
In this paper, the main types of Apps we focus on are financial, shopping, and browser. We downloaded a total of 6177 Apps from the Baidu, Wandoujia, Qihoo and Huawei App Stores, which were released from January to August 2018. Of these, 3160 Apps are in the financial category, 2954 Apps are in the shopping category, and the remaining 63 Apps are in the browser category. Table 7 shows the distribution of three types of Apps from January to August 2018. It includes classification by sample category of Apps, classification by time. Table 8 shows the distribution of three types of Apps’ size.

# B. ANALYZE THE RESULTS
Finding 1: Although the WRCEV was first reported in 2014, there is still a 4% Apps in the currently released browser Apps.

Finding 2: When the JS-to-Java reflection function in WebView is used in Apps, it is able to strictly limit the Android version to be greater than 17, and use the interface function shown in TABLE 5.

Manually Verify. We randomly select samples with and without vulnerabilities in the detection results. We manually analyze those samples. For those which need a user account to use, and these accounts are not free to register externally, these are not the scope we consider. The analysis results are shown in TABLE 9, it is showed that VulArcher detects ACOCDV with high accuracy.

Finding 3: When we do the MITM, we find that many Apps not only do not carry out certificate verification, but also transmit sensitive data such as user name and password in plaintext. It is very easy to cause the leakage of sensitive information. So it is necessary to encrypt sensitive information.

Finding 4: The detection accuracy for ACOCDV can reach 100%, and for WBCVV can reach 95%. Also the accuracy is lightly lower and can reach 87% for the other two vulnerabilities. VulArcher can help developers detect vulnerabilities before Apps are released. It can avoid releasing Apps with the above vulnerabilities.

The irrelevance of vulnerabilities and sizes of Apps. Fig 13 shows the number of vulnerabilities in Apps with different sizes. It can be seen that the same category of Apps...

# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
(‘P’ refers to ‘Probability of vulnerability(%)’; ‘ICV’ refers to ‘Improper certificate validation, ‘WBCVV’ refers to ‘WebView bypass certificate validation vulnerability’, ‘WRCEV’ refers to ‘WebView remote code execution vulnerability’ and ‘ACOCDV’ refers to ‘Alibaba Cloud OSS credential disclosure vulnerability’).

(‘ACOCDV’ refers to ‘Alibaba Cloud OSS credential disclosure vulnerability’, ‘WRCEV’ refers to ‘WebView remote code execution vulnerability’, ‘WBCVV’ refers to ‘WebView bypass certificate validation vulnerability’ and ‘ICV’ refers to ‘Improper certificate validation’).

vulnerabilities have almost the same probability distribution in different sized apps. Both WBCVV and ICV have a high percentage in Apps of different sizes.

# Finding 5:
The number and the type of vulnerabilities in Apps are independent of the size of them.

The relationship between vulnerabilities and categories. Fig 14 shows the probability of vulnerabilities for each of the categories of Apps. ACOCDV does not exist in the browser Apps, because they do not need to use this service to store a large number of images. The reason that the percentage of WRCEV in these Apps is slightly higher than the other two types of Apps is most of these Apps use the WebView component and many of them support for the Android 4 version.

# Finding 6:
More and more Apps face the vulnerability of MITM, because developers do not validate certificate for convenience. So certificate validation must be done strictly in the development.

# Finding 7:
Although Alibaba OSS SDK has released new instructions to circumvent this credential information leak , results in Fig 14 shows that many Apps still have this vulnerability. This means that Apps should be timely updated the SDK version to fix the vulnerability.

(‘ACOCDV’ refers to ‘Alibaba Cloud OSS credential disclosure vulnerability’, ‘WRCEV’ refers to ‘WebView remote code execution vulnerability’, ‘WBCVV’ refers to ‘WebView bypass certificate validation vulnerability’ and ‘ICV’ refers to ‘Improper certificate validation’).

The trend of the vulnerability. Fig 15 shows the trend of probability of vulnerabilities for Apps in each month from January to August in 2018. It can be intuitively reflected that there are vulnerabilities and weaknesses in the monthly release of Apps, and the number of vulnerabilities does not decline over time.

# Finding 8:
As shown in Fig 15, the trend of vulnerabilities tends to be in a stable state. This shows that various vulnerabilities still exist in Apps and developers do not mitigate these vulnerabilities.

# C. VulArcher PERFORMANCE
# Efficiency.

VulArcher takes an average of one minute to analyze an App. However, if the analysis App is packed, then the time to unpack it is an average of 50 seconds.

# Computing cost.

For an App, the memory consumption is 400M, CPU utilization is 40%.

# Scalability.

VulArcher supports the rules of vulnerabilities to detect them. Hence, for a new vulnerability, VulArcher only need to know the vulnerability rule to complete the detection of the new vulnerability.

# VI. DISCUSSIONS AND LIMITATIONS
We download the Apps to analyze the four types of vulnerabilities, but the Apps was two years ago. We should use the latest data for analysis. However, the latest Apps compared with the previous ones, the Android system versions they support has not been updated much, the APIs used in them has not been updated. Our findings are not biased.

VOLUME 8, 2020 106447
# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
The vulnerability results detected by VulArcher contain both third-party components and the App itself. At present, we regard these two aspects as all the vulnerabilities of the App. If we want to distinguish the vulnerability results, we can organize a third-party component library, which contains information such as the package name of the component. The vulnerability results detected by VulArcher contains the package name and class name of a vulnerability, so we use the package name and the class name to go back to the component library to check whether the vulnerability belongs to the App itself or third-party components.

# VII. RELATED WORK
The study of Android vulnerabilities can be divided into two aspects, one is about the Apps and the other is about the Android OS.