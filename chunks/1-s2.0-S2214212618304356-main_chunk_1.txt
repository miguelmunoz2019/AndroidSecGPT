# Dynamic privacy leakage analysis of Android third-party libraries
Yongzhong Hea, Xuejun Yangb, Binghui Hub, Wei Wanga,b,∗
a Beijing Key Laboratory of Security and Privacy in Intelligent Transportation, Beijing Jiaotong University, Beijing 100044, China
b School of Computer and Information Technology, Beijing Jiaotong University, Beijing 100044, China
Article history:
Available online 28 March 2019
Keywords:
Privacy leakage, Third-party library, Android Apps
Abstract:
The third-party libraries are reusable resources that are widely employed in Android Apps. While the third-party libraries provide a variety of functions, they bring serious security and privacy problems. The third-party libraries and the host Apps run in the same process and share the same permissions. Whether the third-party libraries are compliant with privacy policies is out of the control of App developers. In this work, we identify four types of privacy leakage paths inside Apps with case studies. Based on the Xposed framework, we propose a fine-grained and dynamic privacy-leakage analysis tool to analyze the privacy leakage behaviors of the third-party libraries in real time. Our tool can first identify the third-party libraries inside Apps, and then extracts call chains of the privacy source and sink functions during the execution of Apps, and finally evaluate the risks of privacy leaks of the third-party libraries according to the privacy leakage paths. We evaluate our tool over 150 popular Apps, collecting 1909 privacy data related call chains. We find that many third-party libraries access to private information. Moreover, they set up direct network connections to remote servers, which suggests that the third-party libraries pose a great privacy risk. The experiments results show that our tool can achieve real-time, fine-grained and dynamic privacy leakage analysis on Android Apps.

# 1. Introduction
Most smartphones are operating on the Android system. It is showed  that, as the first quarter of 2017, Android system shares up to 87% in the Chinese smartphone market. The large-scale use of Android phones has driven the rapid development of Android mobile applications. Most of the Apps leak users’ private information, but the users know nothing about where the privacy flows to and how it is used. Generally, an App is comprised of the host application and multiple third-party libraries. Third-party libraries provide common functionalities such as advertising push, location-based services, and social services. Accordingly, we classify them as advertising libraries, analysis libraries, location service libraries, social networking libraries. Some examples are listed in Table 1.

We read and analyzed the development guides and privacy policies of these third-party libraries, then summarized seven common privacy requirements of the advertising database and analysis library, as shown in Table 2. The privacy policies of the third-party libraries suggest that they usually require access to Android device information (IMEI, IMSI, MAC, etc.) to generate the Android-device identifier, read geographic information and establish network connectivity, which may expose users to unnoticeable privacy leakage risks.

Many third-party libraries are released in class or jar format without source codes so that even App developers might not be aware of risks involved in them. In the Android platform, the developers of the host Apps and third-party libraries have different interests. While an App is running, the host App and the third-party libraries run in the same process, enjoy the same permissions, and their boundaries are blurred. In essence, the security threat of Android third-party libraries derives from the abuse of permissions of the host Apps. However, existing access control mechanisms of Android system are coarse-grained, which cannot distinguish the subject of any privacy access request, whether it is the host App or a third-party library, therefore the privacy leakage risk is out of control for the App developers and users.

In order to distinguish between a host App and the third-party libraries, it is essential to detect and identify the third-party libraries first. There are two types of methods to detect third-party libraries in Android. The first is whitelisting. For example, AdRisk  uses a whitelist of 100 advertisement libraries to reveal potential risks in Apps. Chen et al.  has a list of 73 libraries in the whitelist to filter third-party libraries when detecting App clones. This type of methods is scalable to thousands of Apps because it only needs to compare the package names. However, it cannot...

∗ Corresponding author.

E-mail addresses: yzhhe@bjtu.edu.cn (Y. He), 16120440@bjtu.edu.cn (X. Yang), 15120360@bjtu.edu.cn (B. Hu), wangwei1@bjtu.edu.cn (W. Wang).

https://doi.org/10/j.jisa
2214-2126/© 2019 Elsevier Ltd. All rights reserved.

# Y. He, X. Yang and B. Hu et al. / Journal of Information Security and Applications 46 (2019) 259–270
# The taxonomy of third-party libraries.

pac  treats the third-party libraries and the host App as separate components and uses the application run-time information to make a decision for the privileged access request. However, all these solutions require modifying the Android system or repackaging the applications, so they are not user-friendly. Our tool does not need to modify the Android system or repackage the Apps. In our previous work, we detected malicious Android apps or anomalies with various kinds of features [22–24] and different methods [25–27]. We also discovered Android sensor usage behaviors with data flow analysis  and analyzed privacy of analytics libraries in Android ecosystem.

resist name obfuscation. The other approach is based on feature vector extraction and matching. LibRadar  uses the hash value of API call frequency, the percentage ratio of the total number of API calls to total categories of API calls, to define the fingerprint of a library package. LibD  takes advantage of the relationship between the classes and methods of java and the metadata in the App. OSSPOLICE  uses string literals, the exported function and control-flow graph in C/C++ source. In Java source, it chooses string constant, normalized class and function centroid. The second method is resistant to obfuscation but time-consuming.

There are some generic tools of privacy leakage analysis for Apps. FlowDroid  and TrustDroid  are based on static privacy leakage analysis, while TaintDroid  and NDroid  are dynamic tools and require modifying the Android platform. AppFence  is built upon TaintDroid and can block unwanted data transmission. APPIntent  is a combination of static and dynamic analysis methods to determine whether the acquisition of private information is consistent with the intention of users. However, these technologies focus on the granularity level of Apps, and they cannot directly analyze the privacy behaviors of third-party libraries inside Apps.

There have been many researches on analyzing privacy leakage of the advertising library, or other types of third-party libraries. Several papers [13–15] examine Android advertising libraries through static analysis and find that many in-app ad libraries collect privacy-sensitive information  even without declaring the use of privacy-related permissions in their documentation , and such behaviors may be growing over time . Livshits et al.  propose an automated approach to identify and place missing permission prompts where third-party libraries may potentially misuse permissions. A few studies employ dynamic analysis to disclose potential risks . Brahmastra  proposes an automation tool to test the potential vulnerability of third-party libraries embedded into mobile Apps, beyond the reach of GUI-based testing tools. MAdFraud  adopts a dynamic analysis approach to detect fake ad clicks by host Apps. In our previous work, some researchers have introduced protection mechanisms against permission abusing by third-party libraries. AdDroid  and PEDAL  separate the advertising library from the main function code and reduce the ad library’s authority to prevent the advertising library from leaking the privacy data. In order to refine the granularity of Android access control mechanism, Com-
# The privacy permissions of third-party libraries.

The rest of this paper is organized as follows. Section 2 describes fine-grained privacy leakage paths in Android platform. In Section 3, we outline the framework of our tool and describe the framework in details. In Section 4, we present the experiments and results. In Section 5, we discuss some potential issues and future research directions. We conclude this paper in Section 6.

# Y. He, X. Yang and B. Hu et al. / Journal of Information Security and Applications 46 (2019) 259–270
# 2. Fine-grained privacy leakage paths in Android
# 2. The method of finding privacy leakage paths
Firstly, we study how the host Apps and third-party libraries invoke methods to collect private information and analyze the privacy leakage paths of Android Apps. We use Tcpdump to get network traffic during the execution of an App. After extracting the network traffic flows, we find the request flow sending to the external server contains many privacy data. We define this kind of request flow as privacy flow. Fig. 1 shows the request flow of an APP that contains privacy data such as IMSI and UDID.