# 2 Software Updates
Several works investigate the delivery and installation of patches across devices. Nappa et al.  analyzed the life cycle of vulnerabilities in client applications by observing the deployment of patches on users’ devices. They used the Worldwide Intelligence Network Environment (WINE) as their data source and found that the patching rates differ among applications. Mathur and Chetty  studied the issue of semi-automatic updates in Android mobile devices and the impact of user experiences on update behavior. Taking a similar research focus, Edwards et al. reported that purely automatic updates are subject to failure . Considering the issues related to full security automation, human behavior and vendor policies (in our case, we mostly focus on Google) remain an integral part of the security decision-making process.

From the user perspective, there are several works that study the role of humans regarding software updates and upgrades. Vaniea and Rashidi  found six stages that users go through during their software updates. These six stages are awareness, deciding to update, preparation, installation, troubleshooting, post-state of the update. Farhang et al.  conducted a survey to better understand the relevant factors for upgrade decisions in Microsoft operating systems by recruiting 239 participants. They studied how users perceive privacy issues associated with OS upgrade decisions, and whether security constitutes a significant decision-making factor.

Frei et al.  also investigated the life cycle of Microsoft and Apple vulnerabilities by defining a new metric called 0-day patch rate. They defined it as the number of vulnerability patches that a vendor releases when the vulnerabilities are publicly disclosed. Using this metric, they compared Apple with Microsoft in terms of their security performance and concluded that while Apple shows an ascending trend, Microsoft is more stable than Apple with regard to the average number of unpatched vulnerabilities. Further, Li and Paxson  scraped 3,000 vulnerabilities that belong to 682 different open-source software projects and studied the patch development life cycle.

Shahzad et al.  conducted an exploratory measurement study of 46,310 vulnerabilities disclosed from 1988 to 2011 concerning different software vendors. Their main goals were to analyze disclosure trends, as well as the evolution of CVSS scores and so-called vector metrics such as confidentiality impact, access complexity, and availability impact. One of their findings was that the annual number of disclosed vulnerabilities has stopped increasing since 2008, which is opposite to what we are observing now in the Android context.

# 2 Economics of Software Updates and Android Security
Arora et al.  investigated the relation between software vulnerability disclosure and patch release time. They found that disclosure accelerates patch release, and open source vendors are quicker in releasing the patches. Alhazmi and Malaiya  focused on different vulnerability discovery models in operating systems and compared the results of the models with each other by performing statistical tests. One of the limitations of their model was that it did not differentiate among vulnerabilities with different severity levels.

Jo  proposed a model for examining competition intensity in the context of patching security vulnerabilities for free-of-charge software products. She found that an increase in market concentration improves vendor response in patching vulnerabilities. To test the model, she focused on the web browser market. Farhang et al.  studied the issue of competition in a different domain, i.e., the competition in the Android ecosystem and customization of different vendors’ offerings which may result in security issues. To solve that issue, they proposed a regulatory fine model, which incentivizes a certain level of investment in security while decreasing the price of products.

A set of studies also investigates the ecosystem around so-called bug bounty platforms, which host vulnerability discovery programs for different companies and offer (monetary) incentives for white hat hackers to participate . While a number of companies offering IoT and mobile services participate in bug bounty programs, Android is not a primary focus of these platforms.

# 3 Study Design
To have a better and systematic understanding of Android security vulnerabilities and patches from different perspectives, we focus on the following five research questions.

RQ1: How have severity distribution and root causes of patched Android vulnerabilities evolved over time? Google has published 42 monthly Android security bulletins since August 2015 until the time of data collection, January 2019. Each of these monthly security bulletins consists of several Android vulnerabilities and their patch details. To have a better understanding of these vulnerabilities, it is essential to investigate their overall distribution over time. To achieve this, we first investigate the severity levels of patched Android vulnerabilities. We also study the trend in the number of patched vulnerabilities. Next, we classify the vulnerabilities based on their Common Weakness Enumerations (CWE). This enables us to recognize what the common causes of vulnerabilities are. These results can help Android developers to identify problematic practices and areas that necessitate heightened attention to prevent such common causes of vulnerabilities.

# RQ2: Is the duration of security support equal for different AOSP versions?
Google has 28 Android API levels and has released 63 different AOSP versions since 2008 . Most of these versions are still used by consumers. For example, at the time of writing , the market shares of versions Froyo and Ginger are 0% and 0%, respectively . However, Google stops providing security updates for each version after some time. For instance, Google’s policy for Pixel devices is as follows: “Pixel phones get security updates for at least 3 years from when the device first became available on the Google Store, or at least 18 months from when the Google Store last sold the device, whichever is longer. After that, we cannot guarantee more updates” . In this question, we investigate how long each Android version receives security patch updates. As a result of this investigation, we observe that Google has provided security patch updates for some versions for shorter periods of time than for other versions. For example, the difference in introduction dates of version 4 and version 4 is about 8 months. However, version 4 stopped receiving updates 22 months earlier. We also investigate the patched AOSP versions and the affected AOSP versions over time. We can demonstrate that the Android security team does not provide security patch updates for all affected versions because older versions have reached their end-of-life. Considering that most AOSP versions are still used by consumers, this practice leaves many devices and consumers unprotected.

# RQ3: How long does it take for Google to patch vulnerabilities originating from other resources?
Besides vulnerabilities that are specific to Android, there are vulnerabilities that affect other related key software building blocks. For instance, kernel development is driven by the Linux community, which patches kernel-related vulnerabilities separately. Qualcomm components are used in Android and Qualcomm also patches their Qualcomm-related vulnerabilities by itself. In our Android dataset, we find 1092 Qualcomm-related and 213 kernel-related patched vulnerabilities, and they all have references that point to their corresponding repositories. These repositories provide detailed information about the patch including the fix-commit date. We investigate the time gaps between the last fix-commit date and the published date on Android security bulletins. Thus, we can calculate how long it takes for Google to publish Qualcomm and Linux patched vulnerabilities in Android security bulletins.

# RQ4: Are vulnerabilities in Android patched before their public disclosure?
Google publishes the patched vulnerabilities on its monthly security bulletins with an exact bulletin publication date. This date can also be considered as patch release date. For example, in the January 2019 security bulletin, it is remarked that “the Android security bulletin contains details of security vulnerabilities affecting Android devices. Security patch levels of 2019-01-05 or later address all of these issues” . As a result, we use a term called patch release date that indicates the publishing date of a patched vulnerability on its security bulletin as well as the patch release for that vulnerability. We also use public disclosure date to specify when vulnerability details are publicly available in public datasets like CVEDetails. Considering that some of the patched vulnerabilities have references that navigate to Git repositories, we also retrieve the last commit dates that fix the vulnerability and we refer to it as last commit date or short commit date. In an ideal and secure situation, the ordering of these three notions should typically be as follows. The last commit date should be first and the public disclosure time should not be earlier than the patch release date. We investigate the actual ordering of these three notions in Android and their respective frequencies. For example, we can evaluate whether a patch is released no later than the public disclosure date of the corresponding vulnerability.