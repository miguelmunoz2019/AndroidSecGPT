# Security Smells in Android
# Mohammad Ghafari, Pascal Gadient, Oscar Nierstrasz
# Software Composition Group, University of Bern
# Bern, Switzerland
# Abstract
The ubiquity of smartphones, and their very broad capabilities and usage, make the security of these devices tremendously important. Unfortunately, despite all progress in security and privacy mechanisms, vulnerabilities continue to proliferate.

Research has shown that many vulnerabilities are due to insecure programming practices. However, each study has often dealt with a specific issue, making the results less actionable for practitioners.

To promote secure programming practices, we have reviewed related research, and identified avoidable vulnerabilities in Android-run devices and the security code smells that indicate their presence. In particular, we explain the vulnerabilities, their corresponding smells, and we discuss how they could be eliminated or mitigated during development. Moreover, we develop a lightweight static analysis tool and discuss the extent to which it successfully detects several vulnerabilities in about 46,000 apps hosted by the official Android market.

# I. INTRODUCTION
Smartphones and tablets have recently overtaken the number of computers. They provide powerful features once offered only by computers, but the risk of vulnerability on these devices is not on a par with traditional desktop programs; smartphones are increasingly used for security sensitive services like e-commerce, e-banking, and personal healthcare, which make these multi-purpose devices an irresistible target of attack for criminals.

The recent survey on the Stackoverflow website shows that about 65% of mobile developers work with Android. This platform has captured over 80% of the smartphone market, and just its official app store contains more than 2 million apps. As a result, a security mistake in an in-house app may jeopardize the security and privacy of billions of users.

The security of smartphones has been studied from various perspectives such as the device manufacturer, its platform, and end users. Manifold security APIs, protocols, guidelines, and tools are proposed. Nevertheless, security concerns, in effect, are outweighed by other concerns. Many developers undermine their significant role in providing security. As a result, apps still suffer from serious proliferating security issues. For instance, the analysis of 100 popular apps downloaded at least 10M times, revealed that over 90% of them, due to development mistakes, are prone to SSL vulnerabilities that allow criminals to access credit card numbers, chat messages, contact list, files, and credentials.

Given these premises, the primary goal of this work is to shed light on the root causes of programming choices that compromise usersâ€™ security. In contrast to previous research that has often dealt with a specific issue, we study this phenomenon from a broad perspective. We introduce the notion of security code smells i.e., symptoms in the code that signal the prospect of a security vulnerability. We have identified avoidable vulnerabilities, their corresponding smells in the code; and discuss how they could be eliminated or mitigated during development. We have also developed a lightweight static analysis tool to look for several of the identified security smells in 46,000 apps. In particular, we answer the following three research questions:
- RQ1: What are the security code smells in Android apps? We have reviewed major related work, especially those appearing in top-tier conferences/journals, and identified 28 avoidable vulnerabilities and the smells that indicate their presence. We thoroughly discuss each smell, the risk associated with it, and its mitigation during app development.

- RQ2: How prevalent are security smells in benign apps? We have developed a lightweight tool that statically analyzes apps for the existence of ten security smells. We applied the tool to a repository of about 46,000 apps hosted by Google. We realized that despite the diversity of apps in popularity, size, and release date, the majority suffer from at least three different security smells.

- RQ3: To which extent identifying security smells facilitates detecting vulnerabilities? We manually inspected 160 apps, and compared our findings to the result of the tool. Our investigation showed that the identified smells are in fact a good indicator of security vulnerabilities.

To summarise, this work represents an initial effort to spread awareness about the impact of programming choices in making secure apps. We argue that this helps developers who develop security mechanisms to identify frequent problems, and also provides developers inexperienced in security with caveats about the prospect of security issues in their code.

The remainder of this paper is structured as follows. We present the identified vulnerabilities and corresponding security smells in section II. We study the prevalence of these smells and discuss the results in section III. We summarize the work closely related to this paper in section IV, and we conclude the paper in section V.

# II. SECURITY SMELLS
Although Android security is a fairly new field, it is very active, so researchers in this area have published a large number of articles in the past few years. We were essentially interested in any paper explaining an issue, or a countermeasure that involves the security of apps in Android. We used a keyword search over the title and abstract of papers in IEEE Xplore and ACM Digital Library, as well as those indexed by the Google Scholar search engine. We formulated a search query comprising Android and any other security-related keywords such as security, privacy, vulnerability, attack, exploit, breach, leak, threat, risk, compromise, malicious, adversary, defence, or protect. We read the title and, if necessary, skimmed the abstract of each paper and included security-related ones. We further read the introduction of these papers and excluded those whose concerns were not about app security. In order to extend the search, for each included paper we also recursively looked at both citations and cited papers. Finally, we carefully reviewed all remaining papers. During the whole process, we resolved any disagreement by discussion.

We identified 28 smells that may lead to vulnerabilities in Android-powered devices We group these smells into five categories. We explain each smell, its consequence i.e., potential risk, and its symptom i.e., an identifiable property in the code. We also mention any possible resolution i.e., a more secure practice to eliminate or mitigate the issue during app development.

# A. Insufficient Attack Protection
- Unreliable Information Sources
Developers acquire their programming knowledge from various sources such as official documentations, books, crowd sources, etc. Issue: According to recent research, developers increasingly resort to studying code examples provided by informal sources like StackOverflow, which are easy to access and integrate, but often lack security concerns. Consequently, vulnerabilities could make their way into apps in the absence of security expertise. Symptom: Existence of copy-pasted code from untrustworthy sources. Mitigation: Use official sources which are more reliable, and vet the security of any external code before and after integration in your code.

- Untrustworthy Libraries
Developers cope with the complexity of modern software systems and speed up the development process by relying on the functionalities provided by off-the-shelf libraries. Issue: Many third-party libraries are unsafe by design i.e., introduce vulnerabilities and compromise user data. Consequently, the ramification of adopting such libraries could be manifold. Symptom: The app utilises unsafe libraries such as advertising libraries that are known to be prone to data leakage. Mitigation: Solely use reliable libraries.

- Outdated Library
The risk of using third-party libraries is not resolved by only using trusted libraries per se. Issue: Libraries usually offer various bug fixes and improvements in newer releases, but often different developers maintain libraries and apps, and their update cycles generally do not coincide. Consequently, a security breach in an old library or a deprecated API could lead to serious issues. Symptom: An included library is behind the latest release, or the app exercises a deprecated API that is not maintained anymore (e.g., the SHA1 cryptographic hash function). Mitigation: Integrate the latest release of a library into your app and replace deprecated APIs with their newer counterparts. Publish an update not only when the app itself has some improvements but also when there is a new version of a library which the app uses.

- Native Code
Developers often incorporate native code in their apps to perform intensive computations or to use many third-party libraries which exist in this form. Issue: Native code is hard to analyze; there is no distinction between code and data at the native level, and attackers can load and execute code from native executables, in a variety of ways much easier than in Java. Consequently, native code is susceptible to severe vulnerabilities like buffer overflow, and an attacker could exploit such vulnerabilities, for instance, to execute malicious code. Symptom: Existence of native code or a native code library in the app. Mitigation: Use native code only when necessary, and only integrate trustworthy libraries into your code.