With the above attack techniques, we then run these 280 games to launch an in-app purchasing request. To minimize the damages to the developers, we immediately cancel the transaction while interacting with app store (basically at Step ❷ shown in Figure 2). Note that this cancelling process is through a pop-up dialog, which is transparent to the game (and handled by the Android framework). If we can “purchase” these virtual products for free, then we confirm the game is indeed vulnerable.

# Results.

When analyzing the 220 games to quantify FPs, we found that 30 games could not be tested. Some of them crashed when running in our test phone; some needed an
3104 31st USENIX Security Symposium USENIX Association
update that was not available in our Google Play (i.e., United States) due to region restriction. For the other 190 games, all of them were vulnerable and the attacks succeeded. We show the detailed information of the top games in Table 3. The “purchased” item and its price are reported in last two column of Table 3. Although the experiment shows that PAYMENTSCOPE has no FPs, theoretically it may still have FPs. For instance, the game may load additional code at runtime which will perform remote-verification, or the game uses reflection call to access receipt which is hard to detect, though we did not witness such cases in our manual analysis.

When analyzing the 60 games to quantify FNs, we found that 9 games cannot be tested due to the same reasons. Among the rest of the 51 games, 37 of them are secure. The attacks failed and some games show dialog, such as “invalid purchase”. Therefore, we confirmed that the games performed receipt verification at the server side. By intercepting the traffic of the tested games, we found that the response included both the verification result and the game state such as the number of coins. For the other 14 games, we were still able to purchase for free. Consequently, this eventually leads to the FNs of 29%. By performing manual reverse engineering on the games, we found that, in some games the receipts have indeed been sent to the servers but the responses do not indicate that the receipts are invalid. The servers may have just used the receipts for the logging purpose without any receipt verification, but PAYMENTSCOPE cannot confirm this automatically since the code of the server side is unavailable. Therefore, it has a high FN. However, on the other hand, this just indicates that the true rate of this vulnerability could be even higher, which further shows how prevalent this problem is.

(II) Top vulnerable game developers. After confirming the FPs and FNs of PAYMENTSCOPE, we next seek to understand why there are so many vulnerable games, who developed them, and how many total installs these vulnerable games have accumulated (to estimate potential losses for developers). To this end, we retrieve the developerName (as well as the email address used for responsible disclosure) from the metadata returned by Google Play when querying each vulnerable game. We then cluster the vulnerable games by developerName, and also accumulate the total number of downloads. Then we rank the developers based on the total number of vulnerable games they have developed, and also the total number downloads their vulnerable game have accumulated.

The top 10 developers who produced the most number of vulnerable games are listed in Table 4. We can see that the top developer has 91 vulnerable games. Also, except the 10th developer who has one game that is not vulnerable, all of mobile games developed by these developers are vulnerable to no-verification attack. The top 10 developers whose vulnerable games have gained the most downloads are presented in Table 5. We can see that the vulnerable games developed by the top 7 developers have more than 100 million downloads. Most of the vulnerabilities in these games are no-verification. Also, interestingly, by looking at all of the games from the corresponding developers, we found that not all of their games are vulnerable. It could be the reasons that these games are developed by different individuals or teams.

(III) Potential Financial Impact. To understand the financial impact, we would like to estimate, if the vulnerabilities were exploited, and if so, what the potential financial losses for developers could have been. To this end, we created a heat map in Figure 7 to show the distribution of product prices of the vulnerable games. Specifically, we group the games based on the number of downloads in the X-axis. Each item in the Y-axis represents a price range. The color of each cell indicates the percentage of the vulnerable games out of all of the vulnerable games that provide products whose prices fall into the corresponding price range in that specific downloading category. Also, for simplicity, for each game, we directly retrieve the minimum price and maximum price of the sold products for each game from Google Play, and use this price information to fill the corresponding cell. According to the result presented in Figure 7, we can see that less popular games usually sell cheaper products, and high price products are usually sold in extremely popular games. This result makes sense since it is more likely to have profit when having large.

# 31st USENIX Security Symposium
2rsrG? (6*% CJU CSMI VBI? (pJG EJ1G 2(9(G2 [V O(JJGL MOLq?" (pJG EJIJJG UGGq [0 [LJCK !2 bgAIJJGU( VbI 8ju62 rcp 92 nulGgI Eudjue (QEt) 9j2o bLOAlGG MLgbboq PGL OL GLOL? e rgA!uE pOt ! !2 9 IJOIJ-[HAS] [SJ2K [0 bLOrGcr (G&" [ss" 30*+s]) HOMGAGI: Evaig: rzg LEE bLOrGcr ESIJG? [JJJWUZ(LGIIJJ IJJOPIJG 20C?' KGCGUIjA' (JJGLG JLG dniG $ DJMIJJ- IJJOIG ETIJJG 2GLAGI? OL (JJG [OCS] (LI2[Gq GXGCTIIOIJ GIJAJLOIIJJGII SLG WJMbjG JAGUG? (pG (MI(MLG MOLK 2cp GXIGIqW8 [Lrzrgq bjscG 2cp '([JGLG GIJGL (pG LG - V? ?cp" $ ZGCMLG AGLIUCSIIODgbbLOscp !2 [0 bjscG (JJG (LSJI? - J3 EITLG MOLK (jG IJJOpIIG obGLQQE 2A2[GIJJ? 42 AGLA COUZGLASQIAG qGIGCQIOIJ bojick:JGIqWE [0 El? I2 mG]I" QULOL(TIUS(G]A- UGIEGL mp [OGS]-AGLIUGSQIOIJ bjscG? (JJG (LIi? [ OUJ (JJG IJJOpIJG [LOIJJ OAGL- 8J1JG JIA bgAIJGUI AGLIUCTQIOIJ COLG IU-8JIJJG IJJG 2GLAGL:HOMAGAGI (JJG 2GLAGL IJJFA 2T!II] IJOLbGLoL bgALJGUI J" KOOf C9I262 COU2IqGI? (JJG EJLG !2 UOf AnJUGLSPJG !( (JG IGCGIb !2 2GU{ {0 DI2cIz2ov !qGGq AMJUGLSPIG prir WO( qG(GCiGq pA BvXHEVLZCOBE" 2gcouq' g2 QOMIJ !U O. GxbGLIJGUt' OL (OO] cOnJq 9jzo 2100" JIq IJJOZ[ COIJJIJJOIJ bLcG? JLG [G22 [JJSIJ 22 (JGLG !? JC(TSI[A AJUGLSPIG @JIJG? 02Gz 21cp EISLG qWIOIJ? qsrJ bobgEJOU AlJ COIJ- 2300 2400 _ 2500 2700 22" MpICp CSU [SI !V ASJLIOTI? C2g? 2cp s2 MpJGU GUCOMIU- ZJOO 2500 280 280 _ 2j0 bfLCps2G2' EJzr" (jJG KGA ze0 220 220 - JU-EJWJG 208 MHIG BVAIEMLZCOBE pS? 238 _ Js TIJI(SHJOIJ? ZJJ - 218 - 2je ate L qGAGJObIJJGIJte" 213 - Z1V8 2DK bLOA!GGI? 2rIcpJ %2 QUIrA ?Orjq IGIJOAG (JJG [OCS] AGHUGS- 213 NqGq pA WICLOZOU [J] MpIcp OLGL? LGG BjII [OL EJIJJG? Q 2GLAGL21g6" (JJGLG JLG IJJJIA !UGXbGU?AG JUq GI2A [0 (12G TJJC QJbjGIJJGI(Gq (JJI? IJJGCESIJIZIJJ [OL (JJG brnbozg O[ CLO2?-(GNICG- (LM2rcq bjgcG? (Q [SCI WJSIA 2GLAGI-pszGq E9IJJG? [JSAG JJLGIGA
to initialize a transaction, and the APIs will perform call backs (e.g., On Success, On Failure) when the payment provider succeeded or not to process the transaction. Then the game can verify the transaction at the server side, or it can perform local verification or no verification at all, which will lead to payment bypass. To confirm this, we have downloaded the top 5 games that are developed based on UE4 and performed a manual study to check whether they are vulnerable to our payment bypass attacks. Through dynamic analysis of the games, we found two of them (i.e., games with MD5 6cd6314b084514647c8f067fe34dad32 and 6e260f7d5ba30cf2c78d61b2e007a6e0) are also vulnerable.

Our future work will aim to automate PAYMENTSCOPE for these games. Although PAYMENTSCOPE is targeting Unity based games, the key observation of abstracting the payment-bypassing vulnerability detection problem to a data flow analysis problem and solving it using taint analysis can be applied to other game engines. However, we anticipate there will be at least two game-engine specific challenges:
- Selecting a proper static analysis framework. Note that game engines are often language specific. For instance, Unity based games can be compiled to native binary or IL bytecode (older version), libGDX based game is in Java bytecode format, and Cocos2d based game may in Lua script format. For a particular file format, a proper static analysis framework is needed to parse the game and implement the analysis algorithm. There are some existing mature frameworks such as Ghidra for binary and Soot for Java bytecode. Therefore, we have to properly select the corresponding static analysis framework for each specific engine.