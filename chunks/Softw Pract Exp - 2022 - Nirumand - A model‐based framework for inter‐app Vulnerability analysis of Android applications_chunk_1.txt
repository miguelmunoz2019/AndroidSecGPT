# A model-based framework for inter-app Vulnerability analysis of Android applications
Atefeh Nirumand1 Bahman Zamani1 Behrouz Tork-Ladani1 Jacques Klein2 Tegawendé F. Bissyandé2
1MDSE Research Group, Department of Software Engineering, University of Isfahan, Isfahan, Iran
2Interdisciplinary Center for Security, Reliability and Trust, University of Luxembourg, Esch-sur-Alzette, Luxembourg
Correspondence: Bahman Zamani, Model-Driven Software Engineering Research Group, Department of Software Engineering, University of Isfahan, Isfahan, Iran. Email: zamani@eng.ui.ac.ir
Received: 30 September 2021     Revised: 24 October 2022    Accepted: 25 October 2022
DOI: 10/spe
# Abstract
Android users install various apps, such as banking apps, on their smart devices dealing with user-sensitive information. The Android framework, via Inter-Component Communication (ICC) mechanism, ensures that app components (inside the same app or on different apps) can communicate. The literature works have shown that this mechanism can cause security issues, such as app security policy violations, especially in the case of Inter-App Communication (IAC). Despite the plethora of research on detecting security issues in IAC, detection techniques face fundamental ICC challenges for improving the precision of static analysis. Challenges include providing comprehensive and scalable modeling of app specification, capturing all potential ICC paths, and enabling more effective IAC analysis. To overcome such challenges, in this paper, we propose a framework called VAnDroid2, as an extension of our previous work, to address the security issues in multiple components at both intra- and inter-app analysis levels. VAnDroid2, based on Model-Driven Reverse Engineering, has extended our previous work as per following: (1) providing a comprehensive Intermediate Representation (IR) of the app which supports extracting all the ICC information from the app, (2) extracting high-level representations of the apps and their interactions by omitting the details that are not relevant to inter-app security analysis, and (3) enabling more effective IAC security analysis. This framework is implemented as an Eclipse-based tool. The results of evaluating VAnDroid2 w.r.t. correctness, scalability, and run-time performance, and comparing with state-of-the-art analysis tools well indicate that VAnDroid2 is a promising framework in the field of Android inter-app security analysis.

# K E Y W O R D S
android, inter-app communication, inter-component communication, model-driven reverse engineering, security analysis
# 1 INTRODUCTION
Nowadays, smartphones have become an integral part of users’ daily life, because users are constantly installing various apps, such as banking and medical apps, on their devices. It is estimated that more than 2 billion Android apps have been installed.

Softw: Pract Exper. 2023;53:895–936. wileyonlinelibrary.com/journal/spe © 2022 John Wiley & Sons, Ltd. 895
1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
896 NIRUMAND et al.

been developed so far-3 As these apps can deal with user-sensitive information, the insecurity of apps will have serious consequences on users’ lives When developing an app, there are different aspects of security to be considered. Therefore, there is a basic need for Android app developers, app distributors, and app analysts to have easy-to-use automated techniques and tools for the security analysis of apps, including vulnerability analysis
Three types of program analysis are mostly used to check the security properties of Android applications: static, dynamic, or hybrid In static analysis, security checks are performed without the actual execution of the program code. Compared with dynamic analysis, static analysis is often more scalable and covers more execution paths of the program Therefore, this paper is focused on static analysis. In this context, several studies7-11 have been conducted to identify various security issues of Android applications, such as vulnerabilities and information leaks. However, several challenges can be enumerated for the Android static analysis methods. Following are the five most recurrent challenges.

1. Since Android apps are event-driven, and app components can interact with each other via the Inter-Component Communication (ICC) mechanism, mainly through Intent messages, the execution paths in these apps are unpredictable, hence, it is challenging to identify all ICC paths. As Android apps become more complex software, many potential execution paths must be considered in the analysis Therefore, one of the significant challenges in the static analysis of Android apps is capturing and analyzing all possible ICC paths to avoid losing potentially dangerous behavior while not introducing too many false alarms
2. According to recent studies,1,6,13 most of the current static analysis approaches suffer from low precision. Furthermore, it should be noted that identifying more security issues in Android applications highly depends on the ability of analytical methods to characterize the app specification accurately In this characterization, the entire Android specification related to the Android app structure must be considered. Therefore, there is a fundamental need for studies to improve the precision of static analysis techniques in characterizing the app specification. These techniques must be applicable to large and complex apps
3. The Android framework ensures that the apps produced by a wide variety of developers are able to interact when installed on a single mobile phone, as long as these interactions comply with the restrictions imposed by this framework While Google provides several best practices, many Android app developers fail to properly follow these practices for Android secure programming, allowing malicious apps designed to misuse the IAC mechanism to trick vulnerable Android apps into performing activities beyond their privilege. Investigating these features (i.e., the Android communication model) will reveal a new set of security issues The main reason for these issues is that the Android access control model operates at the level of individual apps and does not provide any mechanism to check the security status of the entire system (Inter-app communication [IAC] level) However, according to the literature review studies,6,13,15 most of the existing research are limited to the analysis of a single app. While today security issues such as vulnerabilities and information leaks through the incorrect implementation of the IAC mechanism are ubiquitous,2 it is necessary to identify security problems in communication between apps.

4. Fragmentation, evolution, and upgrading of the Android Application Programming Interfaces (APIs) often block the existing ICC analysis tools Therefore, when developing new approaches, researchers need to be able to adapt their work to new versions of Android APIs.

5. In unstable environments like Android, where apps are constantly added, removed, or updated, there is a fundamental need to conduct more scalable and practical ICC analysis, such as incremental ICC analysis that uses the results of previous analyses to optimize subsequent analyses and automatically updates ICC analysis to respond to the app changes
Given the above challenges, the field of security analysis of Android applications demands an automated framework for providing comprehensive and scalable modeling to enable more effective security analyses. Such a framework can be used to address the security issues in IAC.

One way to cope with the structural complexity of software systems is to create a high-level abstraction (i.e., characterization) of these systems and focus only on the specifications required for analysis Model-Driven Reverse Engineering (MDRE) is one of the approaches that benefit from this idea and uses models to decrease the heterogeneity of systems. We argue that using MDRE solutions in the field of security analysis of Android apps could be helpful and has several advantages, including extensibility, full coverage, (re)use, and integration Our earlier work19 proposed a framework called VAnDroid, which stands for “Vulnerability Analysis of Android Applications.” This framework takes advantage of MDRE to perform a more effective intracomponent analysis of Android apps. VAnDroid19 security issues in a single app component.

# NIRUMAND et al.

The positioning of the original VAnDroid framework19 and the VAnDroid2 framework (based on the taxonomy proposed by Sadeghi et al)
To overcome the challenges mentioned above, in this paper, an automated model-based framework called VAnDroid2 is proposed. This framework is an extension of the original VAnDroid framework19 to add the ability to take advantage of MDRE to conduct a more effective intercomponent analysis and improve the detection of security issues at intra- and inter-app levels. In this framework, technology-independent standards (i.e., metamodels) are used to extract models that have the required features for Android app security analysis. It is also possible to determine precisely how these features relate to security issues, such as the types of vulnerabilities. Furthermore, it is possible to enable inter-app security analysis by paying a one-time cost of generating model-based representations from Android applications.