# Automated, Dynamic Android App Vulnerability and Privacy Leak Analysis: Design Considerations, Required Components and Available Tools
# Kris Heid
# Jens Heider
# {kris.heid,jens.heider}@sit.fraunhofer.de
# Fraunhofer SIT
# Darmstadt, Germany
# ABSTRACT
Smartphones apps aid humans in plenty of situations. There exists an app for everything. However, without the user’s awareness, some apps contain vulnerabilities or leak private data. Static and dynamic app analysis are ways to find these software properties. Especially setting up a dynamic analysis environment is not a trivial task. Several peculiarities of Android have to be considered, existing tools for different aspects have to be evaluated, selected and setup to work together. Existing literature is often outdated and only covers tools for one aspect but doesn’t combine them together in a big picture. This paper presents a generic design for an automated dynamic app analysis environment and highlights the required components as well as functionality to reveal security and privacy issues. Available tools are listed, realizing different aspects of the proposed environment design. Tool features are evaluated and tool usability for an automated large scale dynamic app analysis is compared. This document should serve as a reference to all who need to implement dynamic analysis on Android (or some aspects) and require an overview of available and usable solutions.

ACM Reference Format: Kris Heid and Jens Heider. 2021. Automated, Dynamic Android App Vulnerability and Privacy Leak Analysis: Design Considerations, Required Components and Available Tools. In European Interdisciplinary Cybersecurity Conference (EICC), November 10–11, 2021, Virtual Event, Romania. ACM, New York, NY, USA, 6 pages. https://doi.org/10/3487405
# 1 INTRODUCTION
Google-Play, the largest Apps-Store for Android, currently accommodates ∼3 million apps. Apps sometimes leak personal data or unintentionally contain vulnerabilities. Vulnerabilities and privacy violations are mostly invisible to the users and can only be found by well-educated users and the use of additional tools. However, users should be informed about such undesired properties and possibly avoid those apps. Users should instead be able to choose apps without or with fewer privacy and security risks from the plenitude provided by the Apps-Store.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

EICC, November 10–11, 2021, Virtual Event, Romania © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-9049-1/21/11. . . $15 https://doi.org/10/3487405
# 2 RELATED WORK
There already exist surveys and overview papers of app stimulation (UI automation) as well as behavior monitoring tools for Android app analysis. However, we realized during our research that these are often outdated and proposed tools are not maintained anymore and are thus not well usable. Other publications describe tools, but the implementation is unavailable, thus not usable.

A good read to start with App stimulation is . Choudary et al. and Sapienz are dated back to 2015/2016 and even though they offer a good introduction into the topic as well as an evaluation of automation tool effectiveness, the information is not up to date. Vasquez et al. deliver in 2017 a slightly more up to date overview paper. It gives a very comprehensive tool overview and mentions pros and cons of the different possible methods. Luo et al. deliver in 2020 an updated overview of app stimulation tools. However, their objective is more functionality test oriented than security and privacy oriented. They focus on the simulation of a realistic sensor environment for testing the app.

# EICC, November 10–11, 2021, Virtual Event, Romania
# Heid and Heider
Lam et al. also provide an overview of UI automation tools, but only with the background of record and replay functionality. This provides the ability to record test sequences for known apps, but this concept doesn’t work in a fully automatic approach. Tramontana et al. provide in 2019 a systematic mapping study on automated functional testing. Due to the nature of such a study, it reveals hot research topics, current trends and popular papers in this area but lacks in giving recommendations on practically usable tools.

A good overview paper about app behavior monitoring is presented by Neuner et al. in 2019. Unfortunately, the paper is no more up to date and also mainly focuses on app sandboxing for malware analysis. In general, most papers in this area are focused on the needs of malware analysis which however is often not applicable for privacy or vulnerability analysis. A more comprehensive and up to date list of tools is provided on GithubWW.

In summary, we’ve found no overview paper or survey covering app stimulation (UI automation) as well as app behavior monitoring in the context of privacy and security. Thus, we want to propose an infrastructure model along with practically usable, up to date tools for large scale dynamic analysis environment for Android in this paper.

# 2 Contributions of this work
- Abstract design: We identify required tools types and aspects of Android apps for a wholesome dynamic security and privacy analysis. We propose an abstract design housing the required components for an analysis environment.

- Updated dynamic analysis tool overview: We give an updated combined overview of app stimulation (UI automation) and app behavior monitoring tools and maintain updated lists on GithubWW to not become obsolete.

- Identify essential tool features: We name necessary features in each area, and give suggestions on fitting tools containing these features and supporting current Android environments. Additionally, tool comparison tables offer a comprehensive, up to date summary of tool features for self evaluation.

# 3 DYNAMIC ANALYSIS ENVIRONMENT DESIGN
This section proposes an abstract dynamic analysis environment design (Figure 1). The following sections describe the required components, their capabilities and the required communication. The central element in the design is the device or the emulator, with the different software abstraction layers. On the one hand, there is an App Stimulation component, which remotely controls the device. On the other hand there is a Behavior Monitor and a Network Monitor which observe the app’s interaction with device. A separation is desirable to simplify network traffic analysis. All performed actions and monitored device interaction are provided to the control logic. It primarily logs the execution details for later analysis after the dynamic analysis run.

# 3 App Stimulation
Basic interactions are tap, swipe or textual input. These interactions are handed to the OS kernel by privileged system apps and are usually triggered through interaction with the device hardware.

To get an idea of necessary interactions, we manually interacted with the top 20 apps on Google Play. Besides basic UI events, such as tap or swipe actions, also more complex actions are required. An important first step for many apps is to overcome the sign in process. This mostly requires either a classic username/email and password login or they "Signin with Google" for authentication through Google. Alternatively, mostly messaging apps require a phone number to send authentication codes to, which need to be transferred to the app (SMS/email Service in Figure 1). Some apps also demand personal information like address, name, age, birthday. These fields need to be recognized and filled with appropriate information. Content hints are often provided on these input fields by the app programmer, they need to be evaluated and matched against predefined values in the credentials/personal info database. This information might later on be subject due to privacy leaks.

Another topic of interest is the settings menu. Menu items sometimes let one choose the used encryption and reveal default settings. The privacy terms and usage terms are also often found in this menu and changes in these terms from version to version are of interest for the user. There also exist extended UI events such as pinch to zoom or other two finger actions. On the one hand, these multi-touch actions are quite diverse and are not (yet) covered through the ADB protocol. On the other hand, they are besides from games not very common and if used, are often also represented as separate buttons. Thus, such interaction seems necessary to find software crashes but is not required for the described goal due to the often redundant interaction possibilities.