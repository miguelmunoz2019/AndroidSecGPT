- Offering app monetization. Another important promotion channel XLDH vendors take is to offer app vendors monetary incentives to integrate the libraries. For example, OneAudience offers app vendors 0 USD per app installation; Mobiburn offers 0 USD per app installation. Among those libraries offering app monetization, com.oneaudience and com.mobiburn do not provide any functionalities to the apps, except for data harvesting. Interestingly, the app vendors may not fully understand the risk such a library incurs in her app. For example, OneAudience claims in its privacy policy (dated in February 19, 2019, and accessed in our study in October, 2019) that it collects the user’s device ID, operating system type, device make and model, etc., which are albeit private but commonly considered acceptable if properly disclosed; however, behind the scene, it collects a full spectrum of Facebook and Twitter data via unauthorizedly using AccessToken.

- Offering appealing functionalities. Some libraries (com.sharesdk and com.umeng.socialize) offer app developers helpful functionalities, although behind the scene performing XLDH. The functionalities they offer include integration with social media (e.g., single-sign on, posting to Facebook/Twitter), analytics, crash reports, pushing messages, in-app purchases, etc.

# 6 Discussion
Impacts to privacy regulations. Our study complements the recent understandings to privacy compliance: a thread of recent works  assessed whether an app’s data practice (e.g., data collection and sharing with third-party) is consistent with what is disclosed in its privacy policy (a.k.a., flow-to-policy consistency analysis). These studies generally suggested that app vendors are at fault by not properly disclosing the data sharing with third-parties (e.g., advertisers, analytics providers, etc.), and correspondingly, app vendors have been charged by regulatory agencies (e.g., FTC) . To complement these studies, our study shows that app vendors can also be victims, since an in-app data flow to a malicious third-party by XLDH can be opaque to app vendors. In this regard, our work has serious implications to privacy compliance regulations; also, XFinder can be used by both regulators and app vendors to inspect in-app data practice with third-parties.

Responsible disclosure. We have reported the affected apps and XLDH libraries we found to the app vendors and app store (e.g., Facebook, Twitter, Google Play store) and helped them understand the threats since October, 2019. Google has
removed the affected apps from the Google Play or asked the app owners to remove those libraries. Facebook and Twitter have taken legal actions against the XLDH library providers. Future work. As discussed in Section 4, an automatic and sound detection of XLDH libraries in the wild is limited, at least in part, by today’s techniques for document analysis (ToS, privacy polices) and program analysis (e.g., tracking complicated data flows, resolving reflection-call targets). Note that, as we observed, reflection-based calls are widely used in XLDH activities, likely because they are more stealthy and difficult to detect than conventional calls (developers may also use reflection calls with less/none malicious motivations, such as maintaining backward compatibility when the target class may not exist ). Hence, better capability to resolve reflection calls in the future may contribute to a more sound detection of XLDH and more in-depth understanding of the XLDH activities. Further, although we focused on Android in this study, XLDH is completely feasible on iOS, which we plan to study in the future work. We indeed made a preliminary attempt by looking at the iOS version of an XLDH library OneAudience, and found it has the same XLDH behavior as on Android (harvesting data from Facebook and Twitter SDKs). We communicated XLDH risks to Apple in late 2019, who worked with us to analyze the iOS counterparts of XLDH libraries we found on Android and asked affected apps to remove the malicious libraries.

# 7 Related Work
Study on malicious mobile SDKs. Prior studies such as extensively explored the risks of malicious mobile SDKs. In particular, prior research showed that malicious SDKs could collect users’ sensitive data from the host apps and mobile devices, leading to serious privacy leakage due to their wide integration/adoption by popular mobile apps . The problem has been studied through large-scale measurements using both static  and dynamic  program analysis. The sensitive data studied include on-device data (e.g., IMEI, phone number, GPS coordinates), as well as user profiles (e.g., age, gender, preferences) from app server . To mitigate the problems, prior research proposed different fine-grained mechanisms to isolate third-party SDKs . Unfortunately, these mitigates are hard to be fully adopted by current ecosystem due to different deployment limitations (e.g., requiring app code instrumentation  or human-crafted policies ). Recent studies also studied malicious SDKs involved in the ad-fraud scheme, using techniques like click injection and click flooding . Different from prior research, our study sheds lights on a new type of privacy harvesting channel (i.e., the cross-library data harvesting) which is significantly different from prior studies in terms of the diversity of the private data and complexity of in determining their data sharing policies (specific to individual SDKs). In addition, our measurement covers 1M apps for a comprehensive understanding of the problem in the wild, the largest scale compared to all previous research for privacy leakage study.

Text analysis for mobile privacy. Our approach for identifying privacy in-compliance between cross-library invocations through their documentations (i.e, Terms-of-service) follows a history of proposed text analysis over mobile apps, using a mixed technique of NLP and machine learning. Topics within this range include identifying sensitive data items , their desired destinations , policy contradictions  as well as the benign usage contexts . In terms of mobile privacy compliance, Whyper  is among the first to use NLP techniques for automatically reasoning the permission usage in mobile apps through text analysis from app descriptions. Later, a thread of recent works  provide better understanding for the privacy policy and its compliance with mobile app’s data practice. Specifically, Polisis  proposes neural-network based classifiers to automatically annotating privacy policies with both high-level and fine-grained labels. Maps  performs large-scale measurement analysis to identify those privacy leakage of mobile apps which are not disclosed by their privacy policies. PolicyLint  investigates the internal contradictions of a given privacy policy, by identifying and analyzing the data collection and sharing statements at the sentence-level. However, these works are more focused on the privacy implications caused by app developers. Instead, our research look into the privacy compliance among different parties. This recalls a more in-depth analysis over a border range of privacy-related documents (i.e, Terms-of-service of third-party libraries). The sensitive data considered in our research among cross-library invocations rely on parsing the ToS statement, rather than a pre-defined list, as did in previous studies . In addition, identify such privacy violations requires more fine-grained rules (Section 3), which is not addressed by previous research.

# 8 Conclusion
In our paper, we report the first systematic research on XLDH libraries aiming at third-party SDKs to harvest private user data, based upon a suite of techniques that addresses the challenges in analyzing SDK ToSes to recover the semantics of data sharing policies and evaluating apps to find cross-library interactions. Our study demonstrates the significant privacy and social impacts of this new threat. Our research further uncovers a series of unique characteristics of the XLDH libraries, such as their distribution channels, hidden data exfiltration channels. We discussed the limitations of our current tool and the future research that is needed for a more in-depth understanding of XLDH activities.

4148 30th USENIX Security Symposium USENIX Association
# Appendix
# 30th USENIX Security Symposium
USENIX Association.