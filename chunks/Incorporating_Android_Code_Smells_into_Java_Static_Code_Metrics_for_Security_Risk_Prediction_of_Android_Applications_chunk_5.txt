Barrera et al.  used 27 function-level metrics to examine the correlation between software internal quality and security vulnerabilities. Rahman et. al.  evaluated how static code metrics such as the number of lines, functional complexity, and McCabeâ€™s complexity could be used to predict security risk for Android applications. Alenezi et al.  did an empirical study on the impact of static code metrics in predicting security vulnerabilities within Android applications. Unlike the above studies, we introduced a new kind of Android-specific code metrics, i.e., Android code smells, to predict security risk for Android applications. We combined Java code metrics and Android code smells to build prediction models, and further addressed some practical problems such as imbalanced classes. Various machine learning methods were also compared to each other during the evaluation process.

# VI. CONCLUSION
In this paper, we proposed to make use of Android-specific code smells to help predict security risk levels for Android applications. More specifically, we incorporated Android code smells into Java code metrics (aka. hybrid metrics) and applied a variety of learning methods upon those hybrid metrics to build relevant prediction models. A data set of 3,680 Android applications from GitHub was constructed to evaluate the effectiveness of our models. We found that the learning algorithm Random Forest outperformed other learning methods, achieving an AUC of 0. We further analyzed how helpful individual Android code smells were in identifying security risk levels of Android applications. We found that Android code smells such as member ignoring method (MIM) and leaking inner class (LIC) were more important in predicting security risk levels of Android applications.

In the future, we plan to further improve our approach by identifying and exploiting more types of Android code smells. We also plan to investigate how Android-specific code smells would affect other software tasks such as software maintenance like code refactoring..