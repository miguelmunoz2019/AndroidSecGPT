Consider, e.g., an online photo viewing application for an Android based phone. This application may have several components. There are activities for viewing the photos on the phone in the form of grid or list. There may be a service for downloading a photo in the background. There may be receivers for pausing an application when a call comes in, and for restarting the application when the call ends. The application should not affect the high priority functionality of the device like incoming call, incoming sms, battery low indication etc. Finally, there may be a provider for storing the photos and its details on the phone.

ISSN: 2231-2803 http://www.internationaljournalssrg.org Page 488
# International Journal of Computer Trends and Technology- volume3Issue3- 2012
# IV. ANDROID SECURITY FRAMEWORK
The Google Android mobile phone platform is one of the most anticipated smartphone operating systems. Smart phones can be used in place of Computers/Laptops. As mobile devices attain increasing capabilities, there are many more opportunities for novel applications development. Recent development of mobile application development has reached a high demand on today’s cellular market. Android defines a new component-based framework for developing mobile applications, where each application is comprised of different numbers and types of components. Activity components are the basis of the user interface; each screen presented to the user is a different Activity . Service components provide background processing that continues even after its application loses focus. Content Provider components share information in relational database form. SQLite is embedded into android which supports relational database. For instance, the system includes an application with a Content Provider devoted to sharing the user’s address book upon which other applications can query. Finally, Broadcast Receiver components act as an asynchronous mailbox for messages from the system and other applications. As a whole, this application framework supports a flexible degree of collaboration between applications, where dependencies can be as simple or complex as a situation requires.

# A. Android Application Sandbox
Sandboxes are often located within kernel space since access to critical parts of the OS can be realized . The kernel is a very essential part of a system because it acts as bridge between hardware and software. One approach of sandbox systems is to monitor system and library calls including their arguments. This is often done through system call redirecting, also known as system call hijacking. System calls, short system calls, are function invocations made from user space into the kernel in order to request some services or resources from the operating system.

# B. Static and Dynamic Analysis of Android Applications
Two common practices  for malware detection are Static Analysis and Dynamic analysis. Static analysis involves decompilation, decryption, pattern matching and system call analysis. In all these cases software is not being executed. Here, a common approach is filtering binaries by malicious patterns, called signatures. Another technique for malware detection is Dynamic analysis which involves running the system in controlled environment and monitoring its behavior. It involves monitoring file changes, network activity, processes and threads etc. A common approach to dynamic software analysis is Sandboxing. A sandbox can be defined as “an environment in which the actions of a process are restricted according to a security policy”. In practice, this means that a sandbox is an instance of the target OS, which is isolated in a way that prevents malware from performing harmful actions. Since both techniques have certain disadvantages, Thomas Bl¨asing et al.  proposed a novel two-step analysis of Android applications, consists of a full-fledged kernel-space sandbox, and a fast static pre-check. AASandbox executes automatically, without any need for human interaction, and saves the logs of system calls and static analysis for further inspection. As an input, the AASandbox takes an Android application archive, which is packaged in a *.apk file and is therefore referred to as APK. Applications are written in Java and run in a Dalvik virtual machine. Application source code is first compiled to standard Java bytecode, and then optimized and converted to Dalvik executable format for being interpreted Dalvik VM. Byte code is then packaged together with other application resources, including UI layouts, localization and a manifest file which defines the structure of the application. The AASandbox first performs a static pre-check, followed by a full-blown dynamic analysis as shown in Fig 4.

# V. SECURITY ISSUES RELATED TO ANDROID PLATFORM
The integrity of the Android platform is maintained through a variety of security measures.

# A. Applications as Operating System User
Each and every application is a user using the operating system. When an application is installed, the operating system
ISSN: 2231-2803 http://www.internationaljournalssrg.org Page 489
# International Journal of Computer Trends and Technology- volume3Issue3- 2012
creates a new user profile associated with the application. Each application runs as a different user, with its own private files on the file system, a user ID, and a secure operating environment. The application executes in its own process with its own instance of the Dalvik VM and under its own user ID on the operating system.

# B. Explicitly Defined Application Permissions
When an Android requires explicitly defined application permissions in the manifest file. To access shared resources on the system, Android applications register for the specific privileges they require. While developing the application required permissions should be specified in Android manifest file. For example if the phone vibration functionality is required then it must be specified in the android manifest file. While installing the application it shows the list of resources that the application is going to access. Some of these privileges enable the application to use phone functionality to make calls, access the network, and control the camera and other hardware sensors. Applications also require permission to access shared data containing private and personal information such as user preferences, user’s location, and contact information. Applications might also enforce their own permissions by declaring them for other applications to use. The application can declare any number of different permission types, such as read-only or read-write permissions, for finer control over the application.

# C. Limited Ad-Hoc Permissions
Content providers might want to provide some on-the-fly permissions to other applications for specific information they want to share openly. This is done using ad-hoc granting and revoking of access to specific resources using Uniform Resource Identifiers (URIs). URIs points to specific data assets on the system, such as MediaStore, Contacts, CallLog etc. Here is an example of a URI that provides the phone numbers of all contacts: content://contacts/phones.

# D. Application Signing for Trust Relationships
All Android applications packages are signed with a certificate, so users know that the application is authentic. The private key for the certificate is held by the developer. This helps establish a trust relationship between the developer and the user. It also allows the developer to control which applications can grant access to one another on the system. No certificate authority is necessary; self-signed certificates are acceptable.

# VI. CONCLUSION
With the vigorous development through Android, mobile applications have been widely used on the various mobile devices. Android mobile applications are evolving at a meteor pace to give a rich and fast user experience. The maturity of the hardware and software platforms of mobile devices and the promotion of the Mobile Internet have brought a great opportunity to the migration of the web applications to mobile platforms. In case of the security, Static analysis scans the software for malicious patterns without installing it. Dynamic analysis executes the application in a fully isolated environment, i.e. sandbox, which intervenes and logs low-level interactions with the system for further analysis. Both the sandbox and the detection algorithms can be deployed in the cloud, providing a fast and distributed detection of suspicious software in a mobile software store akin to Google’s Android Market. The ultimate goal is to protect the mobile applications from the malicious attributes and safeguard the interests of Android mobile users. With the mobile capabilities, the Internet connection capabilities and complete software platforms available, the future of mobile web application appear limitless.

# VII. FUTURE WORK
The era of mobile web application has just started, and there is a long way for it to march. Development of mobile web application will be emphasized on following aspects:
1. More and more sensors will be added to mobile phones, so new APIs to use those capabilities will bring brand new applications to users.

2. Multimedia capabilities will be enhanced and engine will support more types of multimedia such as flash and svg.

3. The dedicated Integrated Development Environment (IDE) will be improved to accelerate the applications’ development. Visualization programming and JavaScript debugging will be the most important functions of the IDE..