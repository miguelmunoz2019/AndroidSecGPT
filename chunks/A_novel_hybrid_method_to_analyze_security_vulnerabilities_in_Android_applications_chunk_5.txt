Liu et al. pointed out that current Android applications widely apply a deep link, that is, clicking a link can directly jump to a certain content page in the application; however, this technology faces the risk of being hijacked. To resist hijacking attacks and navigate to the right target content page of the Android application, we need to correctly use the legitimately validated deep link technology. Aonzo et al. pointed out that the problem of phishing attacks is far from being solved. Existing Android password manager app and instant apps may run the risk of phishing attacks. Phishing attacks essentially exploit a vulnerability in the password manager application, and Aonzo et al. offered a solution. However, the solution is only limited to this category of problems and cannot analyze the situation of multiple types of vulnerabilities in Android applications. Clickshield indicates that existing solutions from academia and industry do not solve click-hijacking on mobile devices. Muslukhov et al. reported that numerous Android applications use Java encryption methods incorrectly, resulting in security vulnerabilities in Android applications. Experiments showed that the third party library is the main source of this situation. Pariwono et al. indicated that the discarded internet resources of Android applications can be used as the raw material for attackers to analyze and exploit vulnerabilities in Android applications. Uipicker can automatically detect sensitive input operations, identify semantic information through layout information and program code, and further analyze the location where security-related information will appear.

Several studies are also based on dynamic analysis. Zhang et al. proposed a kind of attack called “transplantation attack”, which enables a malicious app to secretly capture private photos and bypass the API audit process of the Android system. Zhang et al. were the first to put forward the runtime-information-gathering problem, which refers to the application’s continuous collection of users’ private information when running. TaintDroid adds a taint mark to the source of privacy data and then dynamically tracks the spread of taint data through program variables, files, and inter-process communication messages. Finally, when the taint data leak out of the system through the network, they will generate a log record and remind users that the privacy data are leaked by the application. Considerable dynamic taint analysis work is based on this tool.

Instead of directly detecting the component vulnerabilities of Android applications, Ma et al. determined whether there is a component hijacking attack by detecting the sensitive behavior of the applications. They transformed the problem of detecting component hijacking into a problem of determining whether the inter-component communication graph contains a given path. The effectiveness of this method was proven by analyzing 57 real-world applications. Several malicious applications are targeted because of important security vulnerabilities. In addition to traditional machine learning methods for detecting malicious applications, Droiddetector takes advantage of deep learning technology to detect Android malwares. The extracted features include static and dynamic features, and the results show that the method can achieve high accuracy. Yan et al. extracted the abstract syntax tree features of the Javascript code in applications and used the deep learning classification model for training. This method detects code injection attacks from Android hybrid applications with an accuracy of 97%. Maier et al. pointed out that many malicious applications adopt a split-personality
602 Tsinghua Science and Technology, October 2020, 25(5): 589–603
behavior to hide malicious codes to avoid detection of antivirus software. Malicious applications use more dynamic code loading techniques than benign ones. In a summary, the existing methods described above do not comprehensively consider the overall vulnerability analysis of the entire Android application, and the scope of their influence is limited.

# 7 Conclusion
We propose a novel hybrid approach for analyzing security vulnerabilities in Android applications. Our hybrid approach takes advantage of both static and dynamic analyses, and performs better than running two independent analyses. Our static analysis combines metadata and data flow analyses, whereas dynamic analysis consists of executable scripts and API hooks.

We can obtain useful security vulnerability information of target application after our static analysis. Then, through dynamic executable script and hook API technology, we can further verify whether this type of vulnerability exists. In addition, our dynamic executable scripts can analyze vulnerabilities that are difficult to be detected by static analysis. We evaluate our system in detail both on Drebin and real-world applications. The system can effectively detect nine categories of important security vulnerabilities in Android applications, and dynamic executable scripts can avoid most manual operations. In the future, the detection of our system can also be extended to other vulnerability types.

# A Novel Hybrid Method to Analyze Security Vulnerabilities in Android Applications
# Authors
# Junwei Tang
Junwei Tang received the bachelor’s degree from Huazhong University of Science and Technology in 2013. He is a PhD student in the School of Computer Science and Technology at Huazhong University of Science and Technology. His research interests include Android security and mobile internet security.

# Ruixuan Li
Ruixuan Li received the BS, MS, and PhD degrees in computer science from Huazhong University of Science and Technology, China in 1997, 2000, and 2004, respectively. He was a visiting researcher in Department of Electrical and Computer Engineering at University of Toronto from 2009 to 2010. He is a professor in the School of Computer Science and Technology at Huazhong University of Science and Technology. His research interests include cloud computing, big data management, and system security. He is a member of IEEE and ACM.

# Xiwu Gu
Xiwu Gu received the PhD degree in computer science from Huazhong University of Science and Technology in 2007. He is an associate professor of School of Computer Science and Technology at Huazhong University of Science and Technology. His research interests include distributed system, big data, and middleware.

# Zhiyong Xu
Zhiyong Xu received the BS and MS degrees in computer science and engineering from Huazhong University of Science and Technology, China in 1994 and 1997, respectively, and PhD degree in computer engineering from University of Cincinnati in 2003. He is currently an associate professor in the Department of Mathematics and Computer Science at Suffolk University. His research interests include cloud computing, cloud security, high performance I/O and file systems, parallel and distributed computing. He is a member of IEEE.

# Kaipeng Wang
Kaipeng Wang received the bachelor’s degree from Ocean University of China in 2018. He is currently studying for a master’s degree in Huazhong University of Science and Technology. His research interests include android security and web security..