# 2 Vulnerabilities in mobile apps
In the mobile domain, software vulnerabilities have been extensively studied in prior research. Most of these studies were aimed at (i) identifying new types of flaws that could expose mobile users to security risks, and (ii) proposing approaches or tools for detecting such kinds of flaws. As a result, a non-exhaustive list of some of these issues targeted (i) inter-application communication vulnerabilities , (ii) misuses of SSL/TLS protocols , (iii) component hijacking vulnerabilities , (iv) security risks related to file browsing (Wu and Chang 2014), (v) WebView vulnerabilities (Chin and Wagner 2013), (vi) security flaws related to input validation , and the major types of privacy policy violations.

Besides, several empirical investigations concerning different aspects related to the vulnerabilities occurring in mobile apps and systems have been carried out. In this context, Jimenez et al. (2016) studied Android vulnerabilities reported in the National Vulnerability Database (NVD) between 2008 and 2014 and characterized the corresponding fixes. Linares Vásquez et al. (2017) conducted a large-scale empirical study on Android OS-related vulnerabilities aimed at (i) characterizing the types of Android-related vulnerabilities, (ii) exploring the layers and subsystems from the Android OS affected by vulnerabilities, and (iii) investigating the survivability of vulnerabilities, as the number of days between the vulnerability introduction and its fixing. Similarly, Thomas et al. (2015a) explored API vulnerabilities in Android and quantified the rate at which these flaws are fixed on real devices. In a subsequent work, Thomas et al. (2015b) studied the different players in the Android ecosystem who must collaborate to provide updates aimed at fixing security flaws and showed that the bottleneck is represented by the manufacturers, who often fail to provide updates to fix critical vulnerabilities. More recently, Watanabe et al. (2017) used automated vulnerability scanners to conduct a large-scale study aimed at understanding whether app vulnerabilities depend on software libraries and revealed that approximately 70% of vulnerabilities of free apps and 50% of vulnerabilities of paid apps stem from software libraries, particularly from third-party libraries. Also, Gao et al. (2019) relied on vulnerability-finding tools and observed for the first time certain security flaws (e.g. vulnerability reintroduction) that are strictly related to the app’s evolutionary perspective.

Similarly to prior research we use a state-of-the-art tool for detecting potential vulnerabilities in Android applications concerning, among others, (i) SSL-related issues, (ii) sandbox mechanism, and (iii) code injection.

# 2 Factors affecting app success
Several studies have investigated the relationships between the rating of an app and different app characteristics (Bavota et al. 2015; Chia et al. 2012; Harman et al. 2012; Ruiz et al. 2014; Taba et al. 2014; Tian et al. 2015; Vásquez et al. 2013; Guerrouj et al. 2015; Corral and Fronza 2015; Khalid et al. 2016). For example, Harman et al. (2012) examined the existing relations between description, download count, and average user rating of BlackBerry apps, while Tian et al. (2015) have demonstrated that marketing effort, app size and the target SDK version of Android apps are the most relevant factors impacting their success. Complementary to these works, recent studies investigated the reasons behind the removal of Android apps from Google Play , and demonstrated that several security and privacy approaches do not take advantage of the whole range of features of an appified.

ecosystem, which could be exploited to design mechanisms less disruptively , as the one proposed in our paper.

Some studies explored the types of software libraries used in mobile apps that can impact user satisfaction. In this context, Linares Vásquez et al. (2013) and Bavota et al. (2015) demonstrated that change- and fault-proneness of APIs used in apps could represent a threat to mobile app success. Other researchers  have analyzed the impact of ad libraries on app ratings. On the one hand, they found no evidence that the number of ad libraries in apps is related to their rating. On the other hand, they demonstrated that the integration of certain ad libraries can negatively affect app rating.

Further research efforts focused on analyzing features specifically related to app development and source code quality. Corral and Fronza (2015) showed that source code metrics only marginally relate to market success. Taba et al. (2014) explored the relationships between the complexity of user interfaces used in Android apps and the user-perceived quality, measured by the number of downloads and app rating. They found that simpler user interfaces may result in a better perceived quality by users.

A close work to ours is the one by Chia et al. (2012), who demonstrated that community ratings used in app markets are not reliable indicators of privacy risks of an app. In particular, they quantified privacy risks in terms of permissions requested by an app and found that popular Android applications typically tend to request more permissions than new apps, while no negative relations have been found between the rating of an app and the number of permissions requested.

Consistently to these previous studies, we estimate the app success in terms of app average rating and the number of app downloads. In addition, as done in previous work , we also focus on investigating whether average app rating is reflected in the level of security and privacy risks of apps. Differently from prior work, we (i) define the vulnerability-proneness of an app as the number of different types of potential security flaws (and, thus, that attackers could exploit) exposed by the app, (ii) study the different vulnerability-proneness levels exposed by apps belonging to different categories, (iii) explore the eventual relationships that could exist between the vulnerability-proneness of an app and its success, and, finally, (iv) investigate the extent to which an app’s contextual information could be used to predict its vulnerability-proneness level. Concerning the last point, Tao et al. (2020) recently proposed to identify security issues for mobile applications based on user review summarization. Differently from this work, we use more structured app store metadata to achieve our goal. App store metadata is information the users typically consult before downloading and installing an app, providing information about app functionalities or permissions that the app requires. We believe that this information could be useful for estimating security risks related to the download and usage of an app. However, for future work, we envision the usage of both sources of information to improve the accuracy of our approach.

# 3 Study Design
The goal of this study is two-fold: (i) to assess the vulnerability-proneness of mobile apps belonging to different categories from the official Google Play app store, as well as (ii) to estimate the extent to which vulnerability-proneness can affect app success. To pursue this goal, we formulated three research questions:
# Empir Software Eng (2021) 26: 78
# Research Questions
- RQ1: Which are the different vulnerabilities exhibited by Google market apps belonging to different app categories? The first research question has the purpose of studying (i) whether different categories of apps expose different types of vulnerability warnings, and (ii) if the vulnerability-proneness levels of apps generally vary according to app categories. We conjecture that the types of vulnerabilities exposed by an app can be somehow related to the functionalities the app provides. Indeed, (i) many vulnerabilities stem from software libraries , and (ii) developers can use similar APIs for implementing similar app functionalities (Vásquez et al. 2016). Thus we use the standard Google Play app categories to verify our conjecture, as these categories could be indicative of the functionalities provided by a software application (Vásquez et al. 2014).

- RQ2: Does the vulnerability-proneness of Google market apps affect app success? This research question aims at investigating if Google Play apps having lower market success (i.e., lower ratings and/or lower number of downloads) are more vulnerability-prone. The underlying hypothesis is that a major amount of vulnerabilities may increase the probability of attacks and user experiencing attacks would provide low ratings or negative posts/feedback to discourage other users from installing the app, thus impacting the apps popularity.

- RQ3: Is it possible to predict the level of vulnerability-proneness of an app by using the app’s contextual information? This research question is aimed at understanding whether (or not) the contextual information that users examine before installing an app is useful (or not) for estimating its level of vulnerability-proneness.

# 3 Context selection and Dataset construction
To answer our research questions, we collected a dataset comprising 1,002 mobile applications downloaded from the Google Play market. We focused our attention on free apps for practical reasons (paid apps would clearly require a fee) and decided to target Google Play as users of devices running Android OS generally choose their apps from this app store  that represents the official Android market. It is worth pointing out that in several prior studies  investigating Android vulnerabilities and security defects, the number of samples analyzed is similar to ours.