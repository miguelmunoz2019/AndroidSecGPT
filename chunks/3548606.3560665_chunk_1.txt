# Hidden in Plain Sight: Exploring Encrypted Channels in Android Apps
# Sajjad Pourali
# Nayanamana Samarasinghe
# Mohammad Mannan
# Concordia University
# Canada
s_poural@ciise.concordia.ca
n_samara@ciise.concordia.ca
mmannan@ciise.concordia.ca
# ABSTRACT
As privacy features in Android operating system improve, privacy-invasive apps may gradually shift their focus to non-standard and covert channels for leaking private user/device information. Such leaks also remain largely undetected by state-of-the-art privacy analysis tools, which are very effective in uncovering privacy exposures via regular HTTP and HTTPS channels. In this study, we design and implement, ThirdEye, to significantly extend the visibility of current privacy analysis tools, in terms of the exposures that happen across various non-standard and covert channels, i.e., via any protocol over TCP/UDP (beyond HTTP/S), and using multi-layer custom encryption over HTTP/S and non-HTTP protocols. Besides network exposures, we also consider covert channels via storage media that also leverage custom encryption layers. Using ThirdEye, we analyzed 12,598 top-apps in various categories from Androidrank, and found that 2887/12,598 (22%) apps used custom encryption/decryption for network transmission and storing content in shared device storage, and 2465/2887 (85%) of those apps sent device information (e.g., advertising ID, list of installed apps) over the network that can fingerprint users. Besides, 299 apps transmitted insecure encrypted content over HTTP/non-HTTP protocols; 22 apps that used authentication tokens over HTTPS, happen to expose them over insecure (albeit custom encrypted) HTTP/non-HTTP channels. We found non-standard and covert channels with multiple levels of obfuscation (e.g., encrypted data over HTTPS, encryption at nested levels), and the use of vulnerable keys and cryptographic algorithms. Our findings can provide valuable insights into the evolving field of non-standard and covert channels, and help spur new countermeasures against such privacy leakage and security issues.

# 1 INTRODUCTION
Many Android apps collect a lot of privacy-sensitive information from users and share it with multiple parties, e.g., app servers, ad/tracking companies. Such data collection and sharing, leading to privacy breaches, has been extensively studied . However, these studies mostly deal with information exposure via insecure channels (e.g., incorrect deployment of HTTPS, or using HTTP), or via the standard HTTPS channel. On the other hand, some apps use additional side/covert channels, standard and non-standard protocols, with/without additional encryption layers (custom encryption), for data transmission. The privacy profile of these apps (some of which are very popular) remains largely unscrutinized, even though some prominent examples exist (e.g., deceptive location-tracking by the ad company InMobi, fined by the US FTC ). Challenges of studying these channels include dealing with non-standard protocols (e.g., custom implementations over TCP/UDP), and detecting and decrypting custom encryption layers. Several studies  have focused on the design, detection, and prevention of side and covert channels. Continella et al.  designed a framework to detect privacy leaks that is resilient to various obfuscation techniques (e.g., encoding, formatting). Reardon et al.  looked into network traffic collected from apps/libraries to identify side and covert channels used to send sensitive information. Spreitzer et al.  developed an automated framework to detect side channel leaks (e.g., transmitted/received bytes, free/used space, CPU time) from Android APIs. Limitations of these studies include: lack of (or insufficient) support for non-HTTP protocols, custom encryption layers (beyond HTTPS), and modern anti-reverse engineering evasion techniques; handling only a few fixed privacy-sensitive items (e.g., Android ID, contacts, IMEI, location, and phone number) sent over custom encrypted channels; shallow interaction with the apps (e.g., lack of sign-in/up support); and dependence on old/obsolete versions of Android.

By addressing the above limitations of state-of-the-art privacy analysis tools, we design and implement ThirdEye that can effectively and automatically detect privacy exposures in non-standard channels over HTTP/HTTPS and non-HTTP protocols, where apps transmit sensitive information. In addition to permission checks and network flow monitoring, we add a third perspective to observe app behaviors. In many Asian legends, the third eye is meant to provide “perception beyond ordinary sight” – see https://en.wikipedia.org/wiki/Third_eye.

# ACM Reference Format:
Sajjad Pourali, Nayanamana Samarasinghe, and Mohammad Mannan. 2022. Hidden in Plain Sight: Exploring Encrypted Channels in Android Apps. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (CCS ’22), November 7–11, 2022, Los Angeles, CA, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10/3548606
# KEYWORDS
Privacy; Security; Android; Non-standard channels
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS ’22, November 7–11, 2022, Los Angeles, CA, USA © 2022 Association for Computing Machinery. ACM ISBN 978-1-4503-9450-5/22/11. . . $15
# CCS ’22, November 7–11, 2022, Los Angeles, CA, USA
# Sajjad Pourali, Nayanamana Samarasinghe, & Mohammad Mannan
use one or more layers of custom encryption. We also consider custom encryption use and covert channels over storage media. ThirdEye is designed for efficient and large-scale automated analysis, with real Android devices. With ThirdEye, we target the following goals in regards to the use of non-standard custom encryption channels: (i) to effectively and efficiently detect privacy leaks that occur through these channels; (ii) to identify security weaknesses introduced by these channels; (iii) to perform a measurement study of the prevalence of privacy leakage and security weaknesses in commonly used Android apps, due to these channels.

ThirdEye is powered by four main components: the device manager orchestrates app installs/launches/uninstalls on real Android devices, while maintaining the connection with a test desktop; the UI interactor systematically traverses menus and UI items for comprehensive functionality coverage of an app; the operations logger performs network/cryptographic/file API instrumentations using Frida API hooking for capturing all inputs/outputs from these APIs; the data flow inspector detects privacy and security issues in the collected network traffic/files. Besides privacy breaches, we also identify several security weaknesses in these non-standard channels, including: the use of fixed keys and weak/broken algorithms for encryption/decryption in files and network communication.

We implement ThirdEye on Android 12, which significantly extends privacy and security features compared to older versions; note that several past tools (designed for standard protocols primarily HTTP/S) are becoming much less effective or even incompatible on the newer versions of Android. Our UI interactor is more comprehensive and systematic than Android Monkey; we explore all UI elements based on their parameters and avoid visiting duplicate elements and pop-up advertisements/in-app purchases. The ability to handle automated sign-up and sign-in support (where possible) helps us cover app functionalities beyond the login prompt (where most tools stop). For improved automation on real Android devices, we provide comprehensive recovery from app crashing/freezing, and phone states that impede effective analysis (e.g., apps that can change WiFi settings). We address common anti-evasion techniques (e.g., bypass root/package installer/mock location detection) to increase our app coverage. However, our implementation is currently unable to decode complex obfuscation, and protocols such as QUIC, DTLS; we also do not support app code in Android NDK.

Our implementation requires significant engineering efforts (approx. 5K and 1K LOC of Python and JavaScript code) to realize our design goals. We also leverage several existing tools including Frida, Androguard, mitmproxy, tcpdump, AndroidViewClient, Python Translators Library (for Google translation), adb and Android internal commands. We mainly use Frida to collect cryptographic parameters, trace shared storage and app-generated network traffic, and evade anti-reverse engineering mitigations. Additionally, we integrate Frida and Androguard to create a rule-based API logger that allows us to detect and collect non-SDK encryption/decryption APIs parameters. We use mitmproxy and tcpdump to capture HTTP/S and non-HTTP/S traffic, respectively. Our UI interactor is built on top of AndroidViewClient to traverse different objects, including buttons and inputs. We use the Google Translate API to enable support of non-English apps.

# Our contributions and notable findings include:
1. We design ThirdEye to find privacy and security exposures from various non-standard and covert channels. Unlike past work, ThirdEye can uncover privacy exposures and security issues in both HTTP/HTTPS and non-HTTP protocols (i.e., protocols over TCP/UDP), and shared storage (on-device).

2. Our implementation of ThirdEye enables efficient, large-scale automated analysis of thousands of apps on real Android devices. We used two Android devices (Pixel 4 and Pixel 6) running factory images with Android 12, to evaluate 15,522 top-apps from various categories in Androidrank; 12,598 (out of 15,522, 81%) apps were successfully analyzed (others failed for various download/compatibility issues). ThirdEye successfully uncovered numerous novel privacy leakages and security issues.