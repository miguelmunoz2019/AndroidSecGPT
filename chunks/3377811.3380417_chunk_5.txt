# 3 RQ5: Weakness Fixing and Feedback
Our study has uncovered 2,157 weaknesses in total from 693 banking apps, most of which have been reported to the corresponding banks. As shown in Table 7, 21 banks have replied and confirmed these weaknesses, and 16 apps have been patched Furthermore, we approached the major stakeholders across the global, such as HSBC (UK/Hong Kong/Shanghai), OCBC (Singapore), DBS (Singapore), and BHIM (India), to understand their security practice and policies. Through in-depth discussions with 7 banks, we find they hold different mindsets toward assessing severity of weaknesses and setting security goals. Note that, on average, the 7 banks take 41 days to fix their security weaknesses we reported. We elaborate this gap and provide our insights on how to close it.

Lack of effective criteria for rating security weaknesses. An effective severity criterion of weaknesses is crucial for banks to prioritize security patching. However, such a criterion is still missing for banking apps. As a result, some banks use CVSS  to determine the severity of the identified weaknesses. However, this3 We do not disclose any concrete weakness types or details in these banking apps to avoid security threats.

# An Empirical Assessment of Security Risks of Global Android Banking Apps
# ICSE ’20, May 23–29, 2020, Seoul, Republic of Korea
Outdated versions remain in effect in the wild. Banks usually hold the assumption that customers always keep their apps updated, and thus concentrate more on the weaknesses of latest versions than those of outdated versions. However, this assumption is not true, considering the device fragmentation problem — Android apps have to be compatible with more than 10 major versions of Android OS running on over 24,000 distinct device models; and it is also dangerous, considering attackers can leverage the weaknesses of outdated versions to mount specific attacks. We find that most banking apps across multiple versions still remain in effect in the wild (e.g., Apkmonk ). On average, these apps have 7 different versions, and the most fragmented app has 25 versions. Thus, we strongly recommend banks push compulsory app updates to the customers or block access to outdated apps, especially when high-severity weaknesses were patched.

The flow width indicates the number of weaknesses originating and terminating between two corresponding banks. Different types of banks are encoded by different colors.

Risks from third-party libraries. Our study finds the third-party libraries, e.g., com.google.android.gms.* and com.facebook.*, are widely used in banking apps. Ausera detects BHIM (v2) and MyAadhar (v1) use insecure third-party hash functions, such as MD5 and SHA-1, to produce message digests, which have already been accepted as insecure . Banks still use these insecure functions despite being aware of the insecure, as they assume that ordinary attackers are not capable of breaking them. However, it is still possible for experienced attackers to mount a large-scale attack by exploiting these weaknesses. Banks are liable if they use security-weakened or poisoned third-party libraries without careful inspection. To avoid an “amplification effect” caused by the weaknesses in third-party libraries , we strongly recommend banks to carefully inspect third-party libraries in use.

# Answer to RQ5.

Incomplete security criterion provides banks wide leeway to use one-sided judgment about specific security practices. We also observe that outdated versions and weaknesses from third-party libraries are all likely to be exploited. They remain unfixed for weeks to months post-disclosure. This gap provides opportunities for attackers to strike. Understanding the gap between industrial practitioners and academic researchers helps illuminate the nature of the patching process.

# 3 Case Studies of Weaknesses
To showcase the exploitability of these weaknesses, we introduce 4 vulnerable apps reported by Ausera.

Screenshot weakness. A* Bank (v3) employs two-factor authentication, i.e., the user first inputs the username and password, and then enters verification code sent by the bank server. It can be attacked if the login page is not protected (without setting the flag WindowManager.LayoutParams.FLAG_SECURE to prohibit taking screenshots).

# ICSE ’20, May 23–29, 2020, Seoul, Republic of Korea
S. Chen, L. Fan, G. Meng, T. Su, M. Xue, Y. Xue, Y. Liu, and L. Xu
# Weaknesses tracking of 21 banking apps
16 banks have already patched their banking apps, and the rest have confirmed the weaknesses in their replies and will fix them soon in new versions.

“#W”: The number of detected weaknesses. “#Patched”: the number of patched weaknesses in update versions. “#New”: The number of newly-introduced weaknesses in update versions.

“∗”: The HSBC Cybersecurity team has reviewed and responded that the remaining three reported “weaknesses” in v2 are not vulnerabilities. These features have been purposely retained to support market-specific customer requirements.

# Lessons Learned and Limitations
Lessons learned. (1) According to the security assessment of global banking apps in Table 5, banking apps are not as secure as we expected in the real world. Meanwhile, the results of the global status and longitudinal studies unveil many security threats and unreasonable phenomena. Stockholders such as security teams in banks should pay more attention on these security issues. (2) The processes of weakness reporting and patches tracking reveal the gaps between academic researchers, banks, and third-party security companies. (3) The processes of meeting and discussions between corresponding banks bring useful recommendations, and some of
# An Empirical Assessment of Security Risks of Global Android Banking Apps
# ICSE ’20, May 23–29, 2020, Seoul, Republic of Korea
them have been used to improve the banking app security. (4) From the perspective of banks, they should pay more attention to secu- rity issues compared with functional bugs. Meanwhile, they should provide various channels to respond to the reported vulnerabilities, to make the patching process more efficient. (5) Fortunately, some of banks have accepted our reported vulnerabilities and actively collaborated with us to improve their app security by using Ausera before releasing new app versions.

# Limitations
(1) The proposed data-related baseline is integrated by many channels based on our depth understanding and knowl- edge, thus might be incomplete. However, we can investigate the global ecosystem of banking apps based on the baseline. Meanwhile, according to the communications with real banks, they are highly concerned about the security weaknesses we proposed in Table 1.

(2) The keyword database is constructed first with manual selection of keywords, and then extended with the help of NLP techniques. However, some of keywords may be ignored in the manual analysis process. Actually, the database can be further extended with the increasing banking apps.

(3) Ausera is built on the top of the static analysis framework (i.e. Soot), thus inherits the limitation of Soot that it may fail and lose some data flows, creating false negatives.

# 5 RELATED WORK
# Security assessment of banking apps
In 2015, Reaves et al. [ 64 ] realized the severe weaknesses of branchless banking apps. They reverse engineered and then manually analyzed 7 apps from devel- oping countries, and last found 28 significant weaknesses. Most of these weaknesses remained unresolved after one year [63 ]. Chana- jitt et al. [31 ] also manually analyzed 7 banking apps, and inves- tigated three types of weaknesses, including how much sensitive data is stored on device, whether the original apps can be substi- tuted, and whether communication with the remote server can be intercepted. Our study differs from [ 31, 63 , 64] with regards to the scope of the study. Whereas [31 , 63 , 64] mainly leverage case studies to study banking apps, the focus of our paper is to conduct a large-scale empirical study on security weaknesses of banking apps. Furthermore, we also incorporate multidisciplinary expertise (e.g., code comprehension, regulations, economics) to interpret the po- tential causes of occurrence of security weaknesses. Our work also differs from alternative topics, such as functional bugs [47, 48, 67 ], performance [56 ] and fragmentation [ 74 ]. For the concrete security weaknesses, for example, SSL issues have been widely discussed in [46 ], which suggests revisiting the SSL handling in applied plat- forms ( e.g. , iOS and Android). Followed by recent reports [53 , 61 ] and our observation, we find that many banking apps have fairly weak or even no authentication and encryption mechanisms. Soun- thiraraj et al. [65 ] proposed to combine static and dynamic analysis to identify security problems in SSL/TLS for Android apps. Georgiev et al. [51 ] focused on SSL connection authentication of non-browser software, indicating that SSL certificate validation is defective and vulnerabilities are logical errors, due to the poor design of APIs to SSL libraries and misuse of such APIs. Egele et al.  checked for violations of 6 cryptographic rules (using cryptographic APIs) in real-world Android apps. They applied static analysis to extract necessary information to evaluate the properties and showed that about 88% of the apps violate the security rules. For our research, we also integrate these aforementioned weaknesses as vulnerable security points, and examine whether banking apps contain these vulnerabilities.