# Overprivileged Permission Detection for Android Applications
# Sha Wu, Jiajia Liu
# School of Cyber Engineering
# Xidian University
# Xi’an, China
# Email: liujiajia@xidian.edu.cn
# Abstract
Android applications (Apps) have penetrated almost every aspect of our lives, bringing users great convenience as well as security concerns. Even though the Android system adopts a permission mechanism to restrict Apps from accessing important resources of a smartphone, such as telephony, camera, and GPS location, users still face significant risks of privacy leakage due to overprivileged permissions. The overprivileged permission means the extra permission declared by the App but has nothing to do with its function. Unfortunately, there doesn’t exist any tool for ordinary users to detect the overprivileged permission of an App; hence most users grant any permission declared by the App, intensifying the risk of private information leakage. Although some previous studies tried to solve the problem of permission overprivilege, their methods are not applicable nowadays because of the progress of App protection technology and the update of the Android system. Towards this end, we develop a user-friendly tool based on frequent item set mining for the detection of overprivileged permissions of Android Apps, which is named Droidtector. Droidtector can operate in online or offline mode, and users can choose any mode according to their situation. Finally, we run Droidtector on 1000 Apps crawled from Google Play and find that 479 of them are overprivileged, accounting for about 48% of all the sample Apps.

# Index Terms
Android application, overprivileged permission, frequent item set mining, detection tool
# I. Introduction
With the expansion of the coverage of smartphones in daily life, a smartphone has almost become a personal computer, bringing great convenience to users. According to the latest research from Gartner, Google’s Android further extended its lead over Apple’s iOS in the second quarter of 2018, occupying 88 percent market share. The rapid development of the Android system naturally leads to a great boom of Android applications. The open-source feature of the Android system has made it a popular platform for third-party applications. Since the smartphone contains user’s private information, the Android system exploits a permission mechanism to regulate how applications access certain resources. However, security concerns still arise because applications usually declare extra permissions sensitive to user’s privacy while having nothing to do with their functions. In previous studies, authors find that the permissions declared by the majority of mobile applications are not in accordance with their actual requirements. The problem that an App declares extra permission is called permission overprivilege. The reason for the phenomenon of permission overprivilege is the absence of strict development specifications and effective supervision. Besides, users have little knowledge of App’s permissions and there is not any detection tool in the market; thus, most users grant any permission declared by the App. All the above facts make users suffer from a high risk of privacy leakage.

There have been some pioneering works studying the Apps’ permissions. In one study, authors built a tool named Stowaway to detect overprivileged permission of an App. Stowaway determines the set of API (Application Programming Interface) calls that an application uses and then maps those API calls to permissions. They applied Stowaway to a set of 940 applications and found that about one-third of them were overprivileged. In another study, a tool named PScout was built to extract the permission specification from the Android source code using static analysis and take the first steps to answer some key questions about Android’s permission system. The authors used PScout to analyze the source code of Android 2 to Android 4 and obtained a more complete mapping between API calls and permissions. Using PScout static analysis tools, they found that 543 out of 1260 applications declared at least one extra permission that was not in the list produced by PScout. Other researchers presented an advanced class-hierarchy and field-sensitive set of analyses to extract the mapping between API methods and permissions. By running their tool Spark-Android on the 679 applications downloaded from the official Android market, they found 124 declared one or more permissions which they did not use. Another detection tool named M-perm combines static and dynamic analysis in a computationally efficient manner compared to previous tools. It’s a pity that the authors tested only 50 Apps, so there are no convincing results.

With the enhancement of App protection technology and the update of the Android system, there are several limitations in previous studies. First, static analysis methods used by the previous works are hardly realizable since code encryption technology develops rapidly. Nowadays, most
# Application Developers and Code Encryption
Application developers adopt code encryption to prevent the App from being decompiled. Code encryption technology confuses the source code, which makes people fail to decompile it or obtain obfuscated code hard to understand. Second, the previous works are based on specific Android versions and will be useless if the Android version changed.

Google continuously updates Android system, which also has an influence on the App development. In this case, the previous tools are invalid. Finally, all the previous works did not provide a publicly-available and user-friendly tool for ordinary users.

In view of the limitations of previous studies, we develop a tool named Droidtector for users to detect overprivileged permission of an application. The tool has two work modes: online mode and offline mode, and user can choose any mode according to the situation. The major differences between our work and previous studies are summarized as follows:
- The work of this paper is based on frequent item set mining. Running FP-growth algorithm on the permission files of many Apps under a certain category, we can get the permission set related to the function of the App of the category.

- Our research doesn’t need the analysis of the source code of Apps or Android system. What we need is just the App’s AndroidManifest.xml file, of which the code is not confused by encryption technology. Any App’s AndroidManifest.xml file can be dumped expediently.

- The methods and tool in this paper have nothing to do with Android version, hence the tool is applicable no matter which Android version the App is compatible with.

The rest of this paper is organized as follows: in Section II, we introduce permission mechanism and dangerous permissions of Android. In Section III, we present the methodologies of our work. The modules design and the effectiveness verification of the tool are thoroughly described in Section IV. The test results on 1000 Apps and the analysis of the results are showed in Section V. Finally, we conclude the whole paper in Section VI.

# II. Overview
# A. Permission Mechanism
The most notable feature of Android is open source, which enables that any people can release the App developed by himself. Open source brings people advantages along with disadvantages. Due to the absence of effective control in the process of developing and releasing Apps, smartphone users usually face the risk of privacy leakage. In order to solve this security problem, Android executes permission mechanism . Android security architecture consists of the following parts:
1. Application components: An Android application contains four components: activity, service, content provider and broadcast receiver. Activity is responsible for the real-time interaction between user and device. Service operates in the background without user interface. Content provider supports data sharing between different applications. Broadcast receiver is applied in the interaction between different components.

2. AndroidManifest.xml file: AndroidManifest.xml file is the entry of an application, including the following authentication information: version, package name, components, permissions and other basic information. When an App is installed, some permissions registered in the AndroidManifest.xml file need user’s authorization. An application must register the permission it wants in AndroidManifest.xml file, or the relevant functions cannot operate normally. In AndroidManifest.xml file, &lt;uses-permission&gt;, &lt;permission&gt; and &lt;permission-group&gt; are the tags related to permission. Tag &lt;permission&gt; is used to register the permission defined by developers while &lt;uses-permission&gt; tag declares system permission. Our research focuses on the permissions under &lt;uses-permission&gt; tag.

3. Protection layer: Protection layer refers to the attribute of permission, which determines authorization method. Some permissions are authorized automatically by system, and some need user’s grant while installing the App. Besides, there are some permissions need to verify the certificate signed with secret key by developers. Only when the App that attempts to use a permission is signed by the same certificate as the App that defines the permission can the permission be granted.

# TABLE I
# Dangerous Permissions
# Transactions
# Frequent item sets
# Normative approach
Normative approach can help developers to identify whether the permission is indispensable for the App. Permission mechanism restricts the permission usage of Apps. However, this restriction is decided by developers but not users. As a consequence, the security of an App depends on the users’ trust in developers.