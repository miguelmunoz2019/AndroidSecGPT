# 2022 IEEE/ACM 3rd International Workshop on Engineering and Cybersecurity of Critical Systems (EnCyCriS)
# A Survey of Security Vulnerabilities in Android Automotive Apps
Abdul Moiz, Manar H. Alalfi
a1moiz,manar.alalfi@ryerson.ca
Department of Computer Science, Ryerson University, Toronto, ON, Canada
ACM Reference Format: Abdul Moiz, Manar H. Alalfi. 2022. A Survey of Security Vulnerabilities in Android Automotive Apps. In The 3rd International Workshop on Engineering and Cybersecurity of Critical Systems (EnCyCriS’22), May 16, 2022, Pittsburgh, PA, USA. ACM, New York, NY, USA, 8 pages. https://doi.org/10/3524489
# 1 ABSTRACT
In this study, we conduct an experiment to reproduce some of the existing vulnerabilities of Android platform in Android Auto and Android Automotive platform. Some vulnerabilities specific to automotive were also examined and verified in Android Automotive platform. In total, we examined 14 vulnerabilities out of which 11 were reproducible in Android Auto as these apps are basically Android mobile apps and run directly in user’s smartphone device. Whereas for Android Automotive 9 vulnerabilities were reproducible, remaining 5 were not reproducible either due to permission restrictions or due to API deprecation in Android 9 (Pie). We also categorize these vulnerabilities as per their type and provided their severity levels. For some of the vulnerabilities we provided the compliant solution which can be useful to mitigate some vulnerabilities while others, like accessing precise location information and deriving speed from it, varies from app to app usage of that information.

# 2 INTRODUCTION
Android Operating System (OS) is designed for mobile devices but with time adopted for tablets, wearable, Internet of Things (IoT) devices, Android TV, and now it has been extended to support automotive infotainment systems. These infotainment systems are tightly coupled with automotive hardware and can listen to vehicle properties like speed, gear, driving state and more. They will also allow users to install third party apps of their choice. Therefore, it’s important that these apps are properly analyzed for security vulnerabilities.

Several researchers shows the severity of vulnerabilities in automotive software. In 2011, Stephen et al. demonstrated an example of remote code execution through CD player, bluetooth and telematic units. In 2015, Valasek and Miller showed how they were able to remotely take over of 2014 Jeep Cherokee by exploiting their infotainment system.

# 3 BACKGROUND
Android is Google’s mobile operating system based on Linux Kernel and other open source software. It’s designed specifically for smartphone and tablet devices which is now powering million of devices around the globe. Due to its popularity and wide adoption it has been enhanced and extended to work with wearables, Android TV, IoT devices, vehicle’s infotainment systems by plugging in Android smartphone devices (Android Auto), and finally it’s been extended to work directly with vehicle’s infotainment system (Android Automotive OS).

# 3 Android Automotive
Android Automotive OS is an extension of Android operating system to work directly with IVI systems. It links the vehicle hardware with Android software with the implementation of Hardware Abstraction Layer (HAL) by Original Equipment Manufacturer (OEM) manufacturer. It will allow users to use pre-installed first and second party Android apps along with third party Android apps. Since, it’s an extension of Android OS, Android Automotive source code lives in same repository as Android, it offers same features for scalability, robustness, security models, developer tools, same infrastructure as.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

EnCyCriS’22, May 16, 2022, Pittsburgh, PA, USA © 2022 Association for Computing Machinery. ACM ISBN 978-1-4503-9290-7/22/05. . . $15 https://doi.org/10/3524489
# 3 Android Automotive Architecture
Android Automotive architecture can be broken into four layers. As seen in figure 1, First layer consist of system apps, OEM apps and third party apps. Second layer includes the Android framework API and Car API which interact with the Android Car and Vehicle network services, the third layer. Fourth layer is HAL which allows car manufacturer to implement these HAL to connect Android Automotive OS with vehicle and at the same time provide consistent interface to Android Automotive framework and app developers regardless of physical implementations. Android Automotive system and OEM apps will have more access to Car API and services as compared to third party apps and their connection to internet will allow users to access these apps and features remotely. They will be able to control Heating, Ventilation and Air Conditioning (HVAC), manage audio, remote engine start, lock/unlock doors and other sensors information. OEM apps will be able to communicate to vehicle HAL whereas third party apps have limited capabilities.

When we tested Android Automotive Apps via the emulator, we have verified that third party apps can only listen to some of the information but can not access services to control vehicle features. Third party apps will be able to access limited vehicle information such as user’s location, contacts, vehicle information, driving state which makes security analysis of these apps an important task as third party apps can observe these properties and can send this information to malicious servers.

# 3 Accessing Android Automotive Software Development Kit (SDK)
As of now, Android Automotive SDK is not publicly available to third party developers and current Android 9 (Pie) and 10 (Q) SDK allows for media or messaging apps development only. To access Car APIs, developers need to custom build their own Android Open Source Project (AOSP) by cloning AOSP repository and making sure it contains Car APIs. After the build process, developers can include compiled jar file into their Android project and explore Car APIs. The APIs that works with third party apps are mostly for observing vehicle information such as driving state, vehicle make, model and year. While using APIs that can controls vehicle features results in app termination which indicates that third party apps will not be able to control vehicle features.

# 3 Android App Structure
Android apps (Mobile, Auto and Automotive) unlike any typical desktop or program launchers which contains a single entry point have a complex structure. Each app is composed of Activities, Services, Content Providers and Broadcast Receivers. Each of these component serves a different entry point in an Android app. It’s Android OS responsibility to decide and integrate the app into device’s overall user experience. From security aspect, having multiple entry point in an app also increases the attack surfaces.

# 3 Permission Model
In Android each app need to declare permissions in order to access certain features of the platform. For example: accessing internet requires an app to declare Internet permission in it’s manifest file. These permissions can be of four different types normal, dangerous, signature and signature_Or_System. Normal permissions can be granted by the system and are most commonly used. Dangerous permissions require user’s explicit approval before they can be accessed by an app. Signature permissions will only be granted access when both the apps, one which declares the permission and other one which is requesting for permission are signed with same certificates. Signature_Or_System permissions will be granted access if they satisfy signature condition or if an app requesting permission came pre-installed on the device.

# 3 Broadcast Receivers
The broadcast receivers in Android serves as a publish-subscribe design pattern. Apps can send or receive messages to or from Android system and other apps. Apps can register these broadcast receivers to receive specific broadcasts and it’s system responsibility to route these messages to the subscribed receivers. Since, broadcast receiver’s communication does not trigger any user interface changes they are perfect mechanism to leak sensitive information.

# 3 Inter Component Communication
In Android (Mobile, Auto and Automotive), each app exists in it’s own sandbox environment which can not be accessed by other apps this ensures app security with respect to any modification done outside of it’s sandbox. However, to communicate with app’s components, within the same or between different app, programmers rely on Inter-Component Communication (ICC) communication. ICC provides a communication mechanism that can send or broadcast a message.

component called intent which can be received by activities, services or broadcast receivers. In case of a broadcast, intent is sent to all broadcast receivers in all the app’s components installed on the device. Intent message must contain an action and data. Action defines a unique string which defines event that is happening and data can be any thing that other component requires to work on.

Intent communication in an app requires great security consideration as it can lead to possible threats, discusses in our previous paper.