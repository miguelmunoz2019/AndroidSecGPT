# 5 Attack-Based Techniques
Instead of using any rules/templates, some approaches launch attacks to locate vulnerabilities . AUTHScope  targets the vulnerabilities at the server side. Since it is difficult to extract the source code running on the remote servers, AUTHScope sends various network requests to the server and applies differential traffic analysis to identify when the server does not provide proper token verification. Instead of launching one attack, six different attack scenarios are launched by AndroSSL , which provides an environment for developers to test their apps against connection security flaws. The environment has an actual server that accepts authentication requests and static and dynamic URLs without verifying the hostnames and certificates.

# 5 Machine Learning Techniques
Manual effort involving is tedious, inefficient, and expensive. To address this drawback, machine learning is proposed to construct a fully automated detection approach.

# Finding Flaws from Password Authentication Code in Android Apps
VulDeePecker  and SySeVr  detect vulnerabilities by using deep learning, which can replace human expert effort while learning. By extracting library/API function calls, VulDeePecker generates training vectors to represent the invocations of these function calls. It then trains a BLSTM neural network model with the training vectors. To improve the detection accuracy, SySeVr collects more features, including function calls, array usage, pointer usage, and arithmetic expressions for training. Although VulDeePecker and SySeVr can detect many types of vulnerabilities without any manual effort, one important requirement for the training dataset is that each code segment may include only one vulnerability.

The above detection approaches that use machine learning algorithms have the desirable property of working automatically and we investigated their application to our problem. We extracted control flow graphs and used different machine learning algorithms (i.e., CNN, decision tree, naive Bayes, SVM, and logistic regression) to build detection models. However the detection results were found to be poor.

# 6 Conclusion
In this paper, we proposed a novel end-to-end approach for the automatic detection of flaws in the implementation of authentication in mobile apps. The detection tool, GLACIATE, analyzes whether the secure password authentication protocols are correctly implemented in apps. GLACIATE first uses clustering and pattern mining techniques to learn rules automatically from a small training dataset, followed by a program analysis technique which uses these rules to detect flaws. GLACIATE automates the whole process so that it only needs few manual efforts to build a small labeled dataset and achieves a better detection accuracy. We assessed the detection accuracy of GLACIATE on a dataset of 16,387 real world Android apps. GLACIATE identifies 5,667 apps with secure password authentication protocols, but only 28% of them implemented the protocols correctly. We intend to make GLACIATE available as an open source tool that can contribute to the development of secure Android apps.

# Finding Flaws from Password Authentication Code in Android Apps.