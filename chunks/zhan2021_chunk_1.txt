# ATVHUNTER: Reliable Version Detection of Third-Party Libraries for Vulnerability Identification in Android Applications
# Xian Zhan1, Lingling Fan2, Sen Chen3, Feng Wu4, Tianming Liu5, Xiapu Luo1, Yang Liu4
1Department of Computing, The Hong Kong Polytechnic University, Hong Kong, China
2College of Cyber Science, Nankai University, China
3College of Intelligence and Computing, Tianjin University, China
4School of Computer Science and Engineering, Nanyang Technological University, Singapore
5Faculty of Information Technology, Monash University, Australia
# Abstract
Third-party libraries (TPLs) as essential parts in the mobile ecosystem have become one of the most significant contributors to the huge success of Android, which facilitate the fast development of Android applications. Detecting TPLs in Android apps is also important for downstream tasks, such as malware and repackaged apps identification. To identify in-app TPLs, we need to solve several challenges, such as TPL dependency, code obfuscation, and precise version representation. Unfortunately, existing TPL detection tools have been proved that they have not solved these challenges very well, let alone specify the exact TPL versions. To this end, we propose a system, named ATVHUNTER, which can pinpoint the precise vulnerable in-app TPL versions and provide detailed information about the vulnerabilities and TPLs. We propose a two-phase detection approach to identify specific TPL versions. Specifically, we extract the Control Flow Graphs as the coarse-grained feature to match potential TPLs in the predefined TPL database, and then extract opcode in each basic block of CFG as the fine-grained feature to identify the exact TPL versions. We build a comprehensive TPL database (189,545 unique TPLs with 3,006,676 versions) as the reference database. Meanwhile, to identify the vulnerable in-app TPL versions, we also construct a comprehensive and known vulnerable TPL database containing 1,180 CVEs and 224 security bugs. Experimental results show ATVHUNTER outperforms state-of-the-art TPL detection tools, achieving 90% precision and 88% recall with high efficiency, and is also resilient to widely-used obfuscation techniques and scalable for large-scale TPL detection. Furthermore, to investigate the ecosystem of the vulnerable TPLs used by apps, we exploit ATVHUNTER to conduct a large-scale analysis on 104,446 apps and find that 9,050 apps include vulnerable TPL versions with 53,337 vulnerabilities and 7,480 security bugs, most of which are with high risks and are not recognized by app developers.

# I. INTRODUCTION
Nowadays, over 3 million Android applications (apps) are available in the official Google Play Store. One reason contributing to the huge success of Android could be the massive presence of third-party libraries (TPLs) that provide reusable functionalities that can be leveraged by developers to facilitate the development of Android apps (to avoid reinventing the wheels). However, extensive TPL usage attracts attackers to exploit the vulnerabilities or inject backdoors in the popular TPLs, which poses severe security threats to app users. Previous research pointed out that many apps contain vulnerable TPLs, and some of them have been reported with severe vulnerabilities (e.g., Facebook SDK) that can be exploited by adversaries. Attackers can exploit the vulnerabilities in some Ad libraries (e.g., Airpush, MoPub) to get privacy-sensitive information from the infected devices. Even worse, various TPLs are scattered in different apps but the information of TPL components in apps is not transparent. Many developers may not know how many and which TPLs are used in their apps, due to many direct and transitive dependencies. Additionally, about 78% of the vulnerabilities are detected in indirect dependencies, making the potential risks hard to spot. Thus, vulnerable TPL identification has become an urgent and high-demand task and TPL version detection has become a standard industry product named as Software Composition Analysis (SCA). Existing TPL detection techniques use either clustering-based methods or similarity comparison methods to identify TPLs used by the apps. However, according to our analysis and previous study, we conclude the following deficiencies in existing approaches: 1) Low recall. Clustering-based methods only can identify commonly-used TPLs and may miss some niche and new TPLs, whose recall depends on the number of input apps and the reuse rate of TPLs. Besides, the code similarity of different versions and TPL could be various, which makes it difficult to choose appropriate parameters of the clustering algorithm to perfectly distinguish different TPLs or even versions. Verifying the clustering results is also labor-intensive and error-prone. Similarity comparison methods construct a predefined TPL database as the reference database. However, current published size of TPL database is far smaller than the number of TPLs in the actual market, thus cannot be used to identify a complete set of in-app TPLs. Apart from that, existing techniques more or less depend on the package structure, especially using package structure to construct the in-app library candidates. Whereas, the package structure/name of the same TPL in different versions could vary.

# II. Related Work
be mutant or easily obfuscated. Therefore, using packages as unreliable.

2) Inability of precise version identification. A supplementary feature to generate TPL signatures is also needed.

To find the vulnerabilities of the in-app TPLs, we need to precisely pinpoint the exact TPL versions because not all TPL versions are vulnerable. Even though there are many TPL detection tools, none of them can meet our requirements.

AdDetect  just can distinguish the ad and non-ad libraries. ORLIS  just provides the matching class. The tools based on clustering (e.g., LibRadar , LibD ) do not claim they can pinpoint the exact TPL versions. Besides, current tools  usually report many false positives at version-level identification . Thus, existing tools are not suitable for vulnerable TPL detection.

Apart from the aforementioned weaknesses of existing tools, we still face some challenges in this research direction:
1. Lack of vulnerable TPL version (TPL-V) identification; to enable vulnerable TPL version identification, we need a comprehensive set of known vulnerable TPL-Vs. Ideally, for each vulnerable TPL, it includes TPL names, versions, types, vulnerability severity, etc. However, to the best of our knowledge, no such dataset is publicly available.

2. Precise version representation. We need to distinguish TPLs at version level, however, it is challenging to extract appropriate code features to represent different versions of the same TPL, especially when the code difference of different versions is tiny.

3. Interference from code obfuscation. Many code obfuscation tools (e.g., DashO , Proguard , and Allatori ) can be used to obfuscate apps and TPLs. For example, dead code removal can delete the code without invocation by host apps. These techniques can change the code similarity between in-app TPLs and the original TPLs. Undoubtedly, obfuscation techniques increase the difficulty of TPL identification.

To fill the aforementioned research gap, we propose a system, named ATVHUNTER (Android in-app Third-party library Vulnerability Hunter), which is an obfuscation-resilient TPL-V detection tool and can report detailed information about vulnerabilities of in-app TPLs. ATVHUNTER first uses class dependency relations to split the independent candidate TPL modules from the host app and adopts a two-phase strategy to identify in-app TPLs. It extracts CFGs as the coarse-grained features to locate the potential TPLs in the feature database to achieve high efficiency. It then extracts the opcode sequence in each basic block of CFG as the fine-grained feature to identify the precise version by employing the similarity comparison method. To ensure the recall, we constructed our TPL feature database by collecting comprehensive and large-scale Java libraries from the maven repository . We use the fuzzy hash method to generate the signature, which can alleviate the effects from code obfuscation.

Compared with previous methods, ATVHUNTER does not depend on the package structure. The main contributions of this work are as follows:
- An effective TPL version detection tool: We propose ATVHUNTER, an obfuscation-resilient TPL-V detection tool with high accuracy that can find vulnerable in-app TPL-Vs and provide detailed vulnerabilities and components.

# III. ARCHITECTURE
We design a system, ATVHUNTER, which takes an Android app as input, and automatically identify the used vulnerable TPL-Vs (if any) according to the constructed database. Fig. 1 shows the system design which is divided into two parts: (1) TPL-V detection, which identifies the specific versions of TPLs used by apps; and (2) vulnerable TPL-V identification, which can identify the vulnerable in-app TPL-Vs based on our collected known vulnerabilities from NVD  and Github.

TPL dependencies are very common, about 47% of Android TPLs in maven repository depend on others based on our rough statistics. To overcome it, we adopt the Class Dependency Graph (CDG) as the features to split up the TPL candidates because CDG does not depend on the package structure, it is resilient to package flattening.

# A. TPL Detection
The TPL detection part of ATVHUNTER includes four key phases: (1) Preprocessing, (2) Module decoupling, (3) Feature generation, and (4) TPL identification.