Our study also sheds light on the challenges in eliminating the XLDH risk. We found that although VirusTotal and Google Play are able to detect the libraries collecting data from mobile devices (such as IMEI, contact), they all failed to detect XLDH libraries and the apps integrating them, possibly due to the challenges in determining third-party data sharing policies and non-compliance with the policies. This has been addressed by XFinder. We reported our findings to affected parties, including Facebook, Twitter, Google Play and others, who are all serious about this new risk and expressed gratitude for our help with bounty programs. Google asked the developers of affected apps to remove the malicious libraries, or drop these apps to control the risk. Facebook and Twitter have taken legal actions to take down OneAudience, a XLDH library owned by Bridge, a digital marketing company.

# Contributions
We summarize the contributions as follows.

- Our study brings to light a new attack vector that has long been ignored, yet with serious privacy implications: malicious libraries aiming at third-party SDKs integrated in the same
apps to harvest private user data. Our findings demonstrate the significant privacy and social impacts of this new threat. Our works also help better understand the underground ecosystem behind it, and the challenges in controlling the risk.

- Our study has been made possible by a novel methodology that automatically identifies XLDH from over a million Android apps, through semantic analysis on ToS and code analysis on cross-library interactions.

- We release the dataset used in this research and our source code for the automatic ToS analysis online.

# 2 Background
Cross-library API calls. Like an app that calls functions of a library, libraries in an app naturally can invoke the functions of another library. On Android, this is typically done through first explicitly importing the package name of the callee class (in Java), and then invoking the target function through the callee class’ instance. Further, Java features a technique called reflection . that allows function invocation in a more flexible manner. As illustrated in Figure 4a, to invoke a function getCurrentAccessToken in the Facebook library, one can first obtain a class object through Java reflection API Class.forName, by providing the class name (com.facebook.AccessToken); then through another reflection API getDeclaredMethod, one can obtain a method object using the name of the target function getCurrentAccessToken; last, calling reflection API invoke on the method object, one can invoke the target function. In our research, we observed that XLDH libraries often leverage reflection to call victim libraries, likely for making the behaviors more stealthy. Note that Android provides a coarse-grained sandbox and permission model to regulate third-party libraries, allowing them to operate with the same permissions as their host apps . In particular, there is no security boundary between libraries within the same app, allowing one library to access another (e.g., invoking functions) without restrictions.

SDK terms of service. Term of service (ToS) is an SDK developer document that lays out terms, conditions, requirements, and clauses associated with the use of a mobile SDK, e.g. copyright protection, accounts termination in the cases of abuses, data usage and management, etc. Note that in addition to the ToS for developers, an SDK vendor (e.g., Facebook and Twitter) may also have a ToS for regular users, such as , which is outside the scope of our study. In our research, we manually collected 40 ToSes from SDK vendors’ developer websites to investigate the XLDH risks.

Unlike privacy policy, which aims at informing end-users about collection and use of personal data (e.g., name, email address, mailing address, birthday, IP address), ToS specifies rules and guidelines for developers who uses an SDK, as illustrated in Figure 2. Also, data protected under privacy policy is different from that covered by ToS. The former is usually “personal information” (e.g., name, email address, mailing address), as guided by laws (e.g., GDPR, CalOPPA ). The latter also prevents the abuse of security-critical data (e.g., password and token) and SDK-specific data (e.g., API keys, access credentials). Table 1 shows the data items protected by the ToS of Twitter, Facebook and Google. We can see that 21 data items in the ToSes are SDK-specific and not mentioned by the privacy policies.

In our research, we found that the state-of-the-art privacy policy analyzer (e.g., Polisis ) cannot effectively analyze ToS to recover the content about sensitive data sharing policy (see Section 3), possibly due to the different grammatical structures of ToS (for addressing to different audience and describing different data items and rules) than those appearing in common privacy policy corpora.

# Natural language processing
In our research, we leverage Natural language process (NLP) to automatically extract third-party sharing policies for sensitive data from SDK ToS. Below we briefly introduce the NLP techniques used in our research.

- Named entity recognition. Named entity recognition (NER) is a technique that locates named entities mentioned in unstructured text and classifies them into pre-defined categories such as person names, organizations, locations. The state-of-the-art NER tools such as Stanford NER and Spacy NER can achieve a 95% accuracy on open-domain corpora to recognize person names, organizations, locations. However, NER systems are known to be brittle, highly domain-specific — those designed for one domain hardly work well on the other domain . A direct use of the state-of-the-art tools like Stanford NER  does not work, because the common pre-defined categories (names, organizations, locations) are not suitable for our task. In our study, we tailor named entity recognition techniques to identify sensitive data, which is protected by third-party sharing policies.

• Constituency parsing and dependency parsing. Constituency parsing and dependency parsing are NLP techniques to analyze a sentence’s syntactic structure. Constituency parsing breaks a sentence into sub-phrases and displays its syntactic structure using context-free grammar, while dependency parsing analyzes the grammatical relations between words such as subject-verb (SBV), verb-object (VOB), attribute (ATT), adverbial (ADV), coordinate (COO) and others . Figure 2 illustrates the constituency parsing tree and dependency parsing tree of a sentence. In the constituency parsing tree, non-terminals are types of phrases and the terminals are the words in the sentence. For instance, as shown in the figure 2b, NP is a non-terminal node that represents a noun phrase and connects three child nodes (the (DT), advertising (NNP), ID (NNP)). Here, DT means determiner and NNP means a noun in a singular phrase . By comparison, the dependency parsing tree is represented as a rooted parsing tree (see Figure 2a). At the center of the tree is the verb of a clause structure, which is linked, directly or indirectly, by other linguistic units. This unit can either be a single word or a noun phase that merged by the parser’s built-in phase merge API phrase.merge . The state-of-the-art dependency and constituency parser (e.g., Stanford parser , AllenNLP ) can achieve over 90% accuracy in syntactic structure discovery from a sentence. In our study, we leverage both dependency and constituency parsing trees generated from sentences in ToS to recover the semantics of third-party sharing policies in SDK ToS.

• word2vec. Word2vec  is a word embedding technique that maps text (words or phrases) to numerical vectors. Such a mapping can be done in different ways, e.g., using the continual bag-of-words model  or the skip-gram technique  to analyze the context in which the words show up. Such a vector representation ensures that synonyms are given similar vectors and antonyms are mapped to different vectors. In our study, we build a customized word embedding model for data sharing policies to measure the similarity of words in this domain, as elaborated in Section 3.

# Threat model
We consider an adversary who spreads malicious libraries that harvests private user data from third-party SDKs hosted by the same mobile apps. For this purpose, the adversary often offers appealing functionalities or monetary incentives to app developers for integrating a malicious library into their apps. In our study, victim SDKs in an app are those neither owned by the app vendor, nor provided by AOSP (Android Open Source Project)  – the official Android version not customized by original equipment manufacturers (OEMs). In this regard and for the best understanding of the threats, libraries developed by Google but not on AOSP are also studied in our research.

# 3 Methodology
In this section, we elaborate on the design and implementation of XFinder, a methodology for discovering XLDH from real-world Android apps.