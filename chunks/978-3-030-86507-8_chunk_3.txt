System Analysis and reconfiguration approaches that mainly consider the weaknesses that reside on the system on one side, and the user knowledge limitations with regards to Android permission granting on the other side. The goal is to make the system environment safer by putting the malware applications apart from the system. In  a formal model of the Android permission framework using high level Petri nets is presented. It defines the complex relationships among different levels of permissions such as overall application-level permissions and component level permissions. In the same line, many other works are based on formal models and analysis  to verify the security mechanisms.

# Assisting Developers in Preventing Permissions Related Security Issues
of Android. These works generally differ on the analysed Android version:  before version 6 where the permission granting occurs always at install time, and  after version 6 where permissions could be granted dynamically at run-time.

Other solutions basically require modification of the Android framework or apps’ implementation logic. As an example we can cite  and  which change the permission management mechanism, and propose a new Android security model and isolation strategy respectively. These modifications will impose to a developer to change the usual way of manipulating the manifest configuration file, which makes this solutions too hard to be adopted by developers. As we can see, most of the research related solutions are proposed from end users perspective. We conduct our research from a different design methodology. We tackle developers perspective because detecting permission security issues in an early stage will evade unnecessary vulnerabilities, and prevent the potential for abuse by SDKs.

Developer’s perspective approaches aim to automate the assistance to developers who are almost not aware about security issues introduced during the development stage. There are few related works aiming to assist developers identifying permission related security issues. A big parts of these works focuses on over-privilege permissions issue; they propose integrated IDE solutions to help developers make better decision about the permission use. The goal is to help the developer in building apps with the least required permissions, like works in  that statically analyse the manifest and the Java code, and separate between two sets of permissions: (1) the declared permissions set and (2) the used permission set. The idea is that to reach least privilege principle, the application should not declare more permissions than those used. In the same line  gives a more accurate analysis and adds analysis capacities to cover underprivileged permissions and unprotected APIs in addition to over-privileged ones. The main limitations of these tools are that the used permission-function pairs are generated for only specific Android API levels (2 for  and 5 for ). Furthermore, all of them are static analysis tools, while the big part of used permissions will be granted during run-time. This limitation will reduce the accuracy of used permission set content.

Our approach belongs to this class of solutions. We benefit from formal methods to perform high level analysis for developers. We follow a similar methodology as done by , where they benefit from system analysis studies like  to provide to developers an automatic solution helping them detecting if their code does not respect the least privilege principle.

# 8 Conclusion and Future Work
This work constitutes a basis for the development of a well-defined formal framework called PermDroid that assists developers in preventing permission security related-issues. The starting point was to define a formal specification that covers the minimum number of concepts related to permissions used in the context of a
single application. This formalization helped us to define some security properties that are verified using an automated approach based on MDRE. We finally experimented the implemented architecture through a simple case study.

Ongoing and future works consider the extension of studied security properties, and the integration of dynamic analysis to our approach. This will contribute to handle dynamic loading of classes and Java reflection. The expected final outcome of our work is a flexible integrated tool that implements our approach and can be integrated in several IDEs. Finally, we aim to experiment our approach on a large data set, and evaluate its usability through organizing controlled practical dev sessions.

# Assisting Developers in Preventing Permissions Related Security Issues
1. He, X.: Modeling and analyzing the Android permission framework using high level Petri Nets. In: 2017 IEEE International Conference on Software Quality, Reliability and Security (QRS), pp. 232–239. IEEE (2017)
2. Hoffmann, J., Ussath, M., Holz, T., Spreitzenbarth, M.: Slicing droids: program slicing for smali code. In: Proceedings of the 28th Annual ACM Symposium on Applied Computing, pp. 1844–1851 (2013)
3. Jha, A.K., Lee, S., Lee, W.J.: Developer mistakes in writing Android manifests: an empirical study of configuration errors. In: 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), pp. 25–36. IEEE (2017)
4. Saaltink, M.: The Z/EVES system. In: Bowen, J.P., Hinchey, M.G., Till, D. (eds.) ZUM 1997. LNCS, vol. 1212, pp. 72–85. Springer, Heidelberg (1997). https://doi.org/10/BFb0027284
5. Sadeghi, A., Jabbarvand, R., Ghorbani, N., Bagheri, H., Malek, S.: A temporal permission analysis and enforcement framework for Android. In: Proceedings of the 40th International Conference on Software Engineering, ICSE 2018, pp. 846–857. ACM, New York (2018)
6. Scoccia, G.L., Peruma, A., Pujols, V., Malavolta, I., Krutz, D.E.: Permission issues in open-source Android apps: an exploratory study. In: 2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 238–249. IEEE (2019)
7. Seo, J., Kim, D., Cho, D., Shin, I., Kim, T.: FLEXDROID: enforcing in-app privilege separation in Android. In: NDSS (2016)
8. Spivey, J.M.: Z Notation - A Reference Manual, 2nd edn. Prentice Hall International Series in Computer Science. Prentice Hall (1992)
9. Vidas, T., Christin, N., Cranor, L.: Curbing Android permission creep. In: Proceedings of the Web, vol. 2, pp. 91–96 (2011)
10. Wu, S., Liu, J.: Overprivileged permission detection for Android applications. In: ICC 2019–2019 IEEE International Conference on Communications (ICC), pp. 1–6. IEEE (2019)
11. Xu, G., Xu, S., Gao, C., Wang, B., Xu, G.: PerHelper: helping developers make better decisions on permission uses in Android apps. Appl. Sci. 9(18), 3699 (2019).