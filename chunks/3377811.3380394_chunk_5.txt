The correlation between how participants set up their development environment and what sources they go to for help may reflect some ways of working we found in Study I. For example, participants who deem it important to set up their IDE carefully, e.g., by incorporating static analysis and bug spotters, may do so because they trust in authoritative sources and communities which set out best practices for secure coding and thereby ensure the security of their apps. This needs to be validated through further research.

# 7 THREATS TO VALIDITY
# Construct Validity.

We based the items in Studies I and II directly on activities found in recent literature summarizing the wide spectrum of activities in software development . Moreover, for Study I we took care to ground the definitions of security solutions in relevant literature showing the effect of insecure decisions in licensing , incorporation of advertisement SDKs , seeking out of testers , and use of different sources for help . We do not claim to exhaust the security challenges faced by developers through these tasks, but rather, sample a diverse variety of challenges they must face.

# Internal Validity.

We do not claim to infer actual behavior from the self-reported data elicited in Studies I and II. Moreover, in Study I we explicitly only investigated estimated correlation between solutions prioritizing security and any kind of rationale indicating security. We do not claim that this lack of secure action and rationale implies a lack of knowledge, which requires further psychological work.

Moreover, given the nature of the tasks and their stand-alone design, it necessarily means that participants’ decision-making is done in a hypothetical context. This may affect the way in which participants prioritize particular answers over others as, for example, time pressure from managing concurrent tasks and activities in a real-world scenario could lead to different prioritization. This was, however, a necessary compromise in order to reveal the heterogeneity of reasoning that developers hold for different kinds of tasks.

Notably, therefore, the thematic analysis of participants’ rationales did not expose any evidence that: they considered real-world contexts differently; their decisions were driven by prior security knowledge; or some choices were taken to be much more likely or ‘obvious’ than others.

# External & Ecological Validity.

We used purposive sampling complemented with snowballing for both Studies I and II – specifically wanting to include only those with experience of the variety of activities encountered in app development. While this proved no problem for Study II due to the minimum time investment required of participants, we couldn’t recruit as many developers willing to invest the required average half hour into Study I. Nonetheless, a comparison of the personal and professional demographics detailed in Sec. 4 indicates significant overlap with demographics established in earlier research . Given that Study I’s findings among a much wider sample of the mobile developer population is in line with our key findings of Study II: a security focus on code-related tasks and under-appreciation of security impact of other activities, we feel confident that the samples of both studies show a valid picture of the typical developers encountered in mobile app development.

Moreover, the lack of security knowledge of participants in Study I may limit the generalization of the findings, as we cannot confirm whether security knowledge is normally distributed across participants, or skewed towards a particular extreme. However, eliciting self-reported experience has its limitations as discussed before, and would not necessarily enrich the findings. Thus, further studies may attempt to use objective measures of security knowledge (rather than self-reported experience) in focused task studies to assess whether the level of security knowledge has an effect on different tasks. This was not deemed feasible in the present study due to the need to incorporate a wider variety of tasks, which already led to a study with significant duration, limiting the potential of recruiting willing participants.

# 8 DISCUSSION: FILLING THE BOX WITH SECURITY
As we mentioned in Sec. 2, we need to understand developers’ rationales in order to begin conceptualizing interventions to mitigate vulnerabilities stemming from these rationales. Without a holistic focus on app development–looking beyond solely the act of writing code–we cannot effectively support developers in producing secure apps, rather than ‘just’ writing secure code. We discuss some key insights leading to takeaways on how app developers can be supported to do so.

# 8 Be social, but also be critical
Studies I and II both indicated that developers lack a critical attitude towards security in activities that involve (the need for) social interaction with others. In particular, the seeking help and seeking out testers tasks of Study I which required participants to consider third parties and whether they can be trusted showed the lowest amount of security rationalization. This may indicate that developers do not make the leap of thinking of people and sources they use to aid in their app’s development as potentially misguided, or even adversarial.

These kinds of social interactions are vitally important for independent and small scale developers, as they need to reach out to external support networks, rather than rely on existing organizational structure. In reality, this will often come down to considering whether libraries and friendly advice or useful code fragments posted on forums such as StackOverflow can be inherently trusted to be provided in good faith, let alone competence. To avoid the risk of incorporating vulnerable code, promoting a more critical attitude.

# Schrödinger’s Security: Opening the Box on App Developers’ Security Rationale
# 8 Flowing towards a secure environment
Most of the rationales in task 1 (Study I) – in which participants had to reason about setting up their development environment – focused on setting up the environment enabling them to work in a particular way. So it should not be a surprise that the solutions expressing security considerations would mention so similarly. For example, P9 made their selection because “it’d help fix issues I create which is important as a lone dev with no code review” (P9), and P24 did so because the “static analyzer helps prevent non-obvious security issues.” This can be interpreted as the basis for developers getting into a state of ‘flow’ – they prepare to work in a way where they can be entirely absorbed in that work . The key link between the flow rationale and the security mindset seems to be a realization of those participants who work as solo developers that they cannot expect themselves to catch everything, but that they are still responsible for everything at the end of the day.

Takeaway—to ensure a more critical attitude towards security among developers, we need to promote critical reflection on the trusting of people and resources on which they rely.

# 8 Thinking about users, thinking about security
Some participants’ rationale explicitly showed that they were anticipating the way their users would behave: “I never rely on just myself for testing, since I cannot always know how people are going to use the app beforehand” (P1). Others mentioned considering whom to involve based on their relationships, and how it might then affect their users: “Friends and family are terrible testers, because they don’t want to hurt your feelings. You yourself are even worse, and relying on your users will find you all the bugs, but might lose you your reputation” (P20). This hints that explicit consideration of how users are affected by the software they develop leads them to more carefully consider the decisions they make. We find further evidence of this especially in task 5, in which participants had to seek help on incorporating an advertisement library. Here considerations of the users came through in terms of the potential impact of vulnerabilities on users, for example, (P19) noting that they “[...] would not want my users to experience any negative side effects from the ad library,” and (P13) mentioning that “it is important to grant minimal privacy impact to users.”
Takeaway—to reason about security, and to act upon it, developers should be encouraged to take a user-centric view – understanding the consequences vulnerabilities have for their users.

# 9 CONCLUSION AND FUTURE WORK
We investigated the rationale of app developers during different activities in the app development process, performing an in-depth task-based study with 44 app developers assessing the extent to which they prioritize security and how they rationalize their choices. We followed this up with a larger survey of 274 app developers assessing their perception towards the impact of the different activities on the security of their produced apps.

Our analysis highlights that app developers rarely prioritize secure ways of working for reasons of security unless it directly affects the writing or the functionality of their code. In social (seeking help or testers), economic (monetization) and legal (licensing) aspects of app development, there were no prevalent security rationales underpinning their choices.