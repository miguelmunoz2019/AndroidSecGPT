# A Novel Hybrid Method to Analyze Security Vulnerabilities in Android Applications
Junwei Tang, Ruixuan Li, Kaipeng Wang, Xiwu Gu, and Zhiyong Xu
Abstract: We propose a novel hybrid method to analyze the security vulnerabilities in Android applications. Our method combines static analysis, which consists of metadata and data flow analyses with dynamic analysis, which includes dynamic executable scripts and application program interface hooks. Our hybrid method can effectively analyze nine major categories of important security vulnerabilities in Android applications. We design dynamic executable scripts that record and perform manual operations to customize the execution path of the target application. Our dynamic executable scripts can replace most manual operations, simplify the analysis process, and further verify the corresponding security vulnerabilities. We successfully statically analyze 5547 malwares in Drebin and 10 151 real-world applications. The average analysis time of each application in Drebin is 4 s, whereas it reaches 92 s for real-word applications. Our system can detect all the labeled vulnerabilities among 56 labeled applications. Further dynamic verification shows that our static analysis accuracy approximates 95% for real-world applications. Experiments show that our dynamic analysis can effectively detect the vulnerability named input unverified, which is difficult to be detected by other methods. In addition, our dynamic analysis can be extended to detect more types of vulnerabilities.

Key words: Android security; vulnerability analysis; static analysis; dynamic analysis
# 1 Introduction
Android devices have accounted for more than 80% of the world’s smartphone market in recent years. The number of Android apps is also reaching millions. Various types of applications substantially enrich our daily life but could also bring new security concerns regarding sensitive information. Given that mobile phones contain substantial users’ private information, private data may be leaked by malicious applications or applications with security vulnerabilities.

The analysis of application vulnerability is normally applied to detect the security vulnerabilities incurred by poor development or other reasons. These vulnerabilities may be used by attackers to achieve denial of service attacks, privilege promotion, application data, and user privacy disclosure, resulting in huge losses to ordinary users. Compared with traditional desktop applications, Android applications carry more private information of individual users and are more easily targeted by attackers. With such a large number of Android devices and applications, how to accurately detect various types of security vulnerabilities in Android applications remains a valuable research topic.

Several existing approaches can analyze certain categories of vulnerabilities in detail, but cannot be applied to other types of vulnerabilities. Certain approaches can only detect industry-specific application.

C The author(s) 2020. The articles published in this open access journal are distributed under the terms of the Creative Commons Attribution 4 International License (http://creativecommons.org/licenses/by/4/).

# 590
# Tsinghua Science and Technology, October 2020, 25(5): 589–603
vulnerabilities, whereas others are based on a specific kind of single static code analysis, which may feature low accuracy and high false positives. Currently, several dynamic analysis methods have been proposed to detect Android application’s vulnerabilities based on fuzzy test and sandbox, which also exhibit their own disadvantages. Specific dynamic analysis methods are limited to a small category of vulnerabilities and cannot be extended to the detection of more common vulnerability categories. Other methods require operating system modification, their configuration environment is very complex and the results are inconvenient to analyze. In addition, the system overhead would be notably large.

To solve the above problems, we propose a novel hybrid approach to conveniently and accurately detect important types of security vulnerabilities in Android applications. We take advantage of static and dynamic analyses. We combine metadata analysis with data flow analysis during our static analysis process. Our dynamic detection engine is based on automated executable scripts and Application Program Interface (API) hooks. Our dynamic executable scripts can improve the efficiency of dynamic analysis and increase the types of detected vulnerabilities. In addition, these dynamic executable scripts can customize the execution path of the target application instead of the fuzzy test and complete the runtime state analysis of the target application in accordance with its real-time response in collaboration with API hooks.

On the basis of the defined vulnerability judgment rules, the above analysis processes generate vulnerability analysis results for the target application. Then, we can systematically analyze the important security risks of Android applications.

The main contributions of this paper are as follows:
1. We propose a novel hybrid method, which combines static and dynamic analysis approaches, to analyze security vulnerabilities in Android applications. The static analysis consists of metadata and data flow analyses, whereas the dynamic analysis is based on dynamic executable scripts and API hooks.

2. The dynamic executable scripts can avoid most manual operations, simplify the vulnerability detection process, and further verify the existence of corresponding security vulnerabilities. The script generation module generates a corresponding executable script based on manual operations. After updating the basic script, it is convenient to verify and detect the vulnerabilities.

3. We perform successful static analysis on 15,698 applications, including 5,547 malwares in Drebin and 10,151 real-world applications. The average analysis time of each application in Drebin is 4 s, whereas that of each real-world application is 92 s. In addition, we show the relationship between application vulnerabilities and size.

4. We implement a system using static and dynamic analysis approaches. Among the nine types of vulnerabilities analyzed by our system, eight are detected by static analysis, and one is handled by dynamic analysis. Our system can correctly detect all the labeled vulnerabilities in 56 test applications, and further dynamic verification shows that the accuracy of our static analysis approximates 95% for real-world applications. Our dynamic analysis can detect the vulnerability named input unverified, which is hard to be analyzed by static analysis. The types of the detected vulnerabilities can be enriched and extended in the future.

The rest of the paper is organized as follows. Section 2 describes the background. Section 3 introduces our system design and implementation. Section 4 presents the evaluation. Section 5 discusses the limitations of the study. Section 6 introduces the related work. Section 7 concludes the whole paper.

# 2 Background
# 2 Security vulnerabilities in Android applications
In Android platform, the situation of application security vulnerability is as extremely serious as that of the traditional software. Security vulnerabilities in Android applications could lead to serious security consequences as smartphones carry substantial sensitive user information. Several features of security vulnerabilities in Android applications are similar to those of traditional desktop applications, but they show more difference because of the new features of Android applications themselves. For example, an Android application may incorrectly or not use an encryption function at all to directly transmit and process sensitive information in plaintext. This condition can easily lead to privacy leaks. In addition, if the components of an Android application are exposed to other applications without proper permission restrictions, a privilege attack caused by unrestricted component vulnerability may occur. Several of these vulnerabilities are related to the unique structure of Android applications. Other vulnerabilities
# Junwei Tang et al.: A Novel Hybrid Method to Analyze Security Vulnerabilities in Android Applications
are due to the incorrect usage of APIs.

# 2 Instrumentation and Android test project
The Android test project is based on the instrumentation framework, where the test application can precisely control the target application. Using instrumentation, we can create instrumentation of system objects such as context before the target application is started and control multiple life cycles of components within the target application. We can also send User Interface (UI) events to the application, check application status information during execution, and so on. The instrumentation framework enables this functionality by allowing target and test programs to run in the same process, similar to the hook mechanisms. We can use this mechanism to dynamically analyze target applications.

where V represents the security vulnerability in Android applications, v1 denotes the security vulnerability type, v2 refers to the number of security vulnerability of this type in the application, v3 indicates specific vulnerability information or vulnerability evidence, and v4 corresponds to the specific method for detecting this vulnerability.