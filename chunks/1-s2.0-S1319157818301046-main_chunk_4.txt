# Android Data Storage Threat Model
# H. Altuwaijri, S. Ghouzali / Journal of King Saud University – Computer and Information Sciences 32 (2020) 543–552
# 3. Evil maid attack
Any software-based encryption needs a part of the disk unencrypted; in Android, this is the entire system partition. A study in (Müller et al., 2013) proved that evil maid attacks could be made against smartphones because Android leaves the Master Boot Record and entire system partition unencrypted. In Evil maid attack, the attacker who has physical access can substitute the entire Android system with a modified Android that includes keystroke logging. Authors present an EvilDroid tool that shows that even with an encrypted device, the Android system partition can be altered with keylogging. The tool previews a modified PIN request interface that stores the PIN in unencrypted cache partition, thus, all data on the device can be accessed after acquiring the PIN. Researchers affirm that performing evil maid attacks against Android devices is possible. Additionally, the study shows that countermeasures are seemingly tricky. Manufacturers should consider this issue. The bootloaders need to be locked and wipe the user partition before unlocking.

# 3. RowHammer attack
RowHammer attacks rely on memory management weakness in the deep layers. It allows flipping memory bits by repeated access (hammers) memory cells causing unauthorized changes and corrupting sensitive memory regions (Götzfried and Müller, 2014). This complex vulnerability has been exploited in Android by implementing Drammer, a deterministic RowHammer-based attack (Götzfried and Müller, 2014). Authors showed that Drammer could obtain a privilege escalation to acquire root privileges and can be launched by any Android app with no special permission and without relying on any software vulnerability. Moreover, the authors highlighted that this type of attack could not be mitigated by current defenses.

# 3. Software threats
This section illustrates some software-based threats that include malware attack, poor application development, and rooting the device.

# 3. Malware attack
A study in (van der Veen et al., 2016) underlined the problem of stealing personal information from memory in Android devices. They analyzed 26 Android applications to check how these applications handle data in memory that is currently or has recently been manipulated. In the analysis, a full memory dump of the system is done both while using the application and after its termination, and the result showed that most of the applications analyzed keep sensitive and personal data in clear text within the memory. This analysis motivated the researchers to build Trojan horse that would hide behind a legitimate app that just let the user take pictures and share them, while in the background, it will monitor active processes, and dump the memory sectors when the process is running. The malware app was able to exploit vulnerabilities in the targeted apps and retrieve login credentials. The user behavior and the poor practices when developing mobile applications are the causes of introducing vulnerabilities. Moreover, the user did not notice this attack, both regarding visibility and mobile phone performance. This study presents a memory attack that doesn’t require physical access.

# 3. Poor application development Exploitation
Developers influence the security of the data by building vulnerable apps such as building over-privileged applications, misuse of cryptographic application programming interface (API), and saving non-sensitive but non-shared data on public storage.

# 3. Over-privileged applications
Android permissions system is a way of ensuring a level of security and privacy by restricting application access to resources unless the user accepts the access permission. The app developers identify the required permission in the code, and when installing the app, there is no control if the permission is related to the app or not . Android permissions are criticized as coarse-grained , many applications gain more permissions than necessary; for example, if Flipkart shopping app requests internet permission, it can send and receive files from any other websites, not just Flipkart.com . Because of coarse-grained permissions, the poor practices of Android developers, incompetent permission administration, and insufficient permission documentation provided by Google, there are many apps with unnecessary permissions. These apps violate the principle of least privilege  and may be used to access sensitive resources. A systematic review of Android permissions issues and countermeasures have been done in . The study stated that the over-privileged applications is probably the most severe threat to Android security, which violates user privacy and security, and leads to personal information disclosure. The main reasons for building over-privileged apps are as following: developers may copy the code and apply it without understanding it, may request permissions that they thought it is mandatory and related to the functionalities they design but it is not.

# 3. Misuse of cryptographic API
Android Provides Cryptographic APIs that allow developers to secure sensitive data such as passwords and personal information on mobile devices. Researchers in  investigated whether developers correctly use these cryptographic APIs to achieve the required level of security. Following static analysis approach, researchers build a lightweight tool called “CryptoLint” to measure cryptographic misuse. This tool analyzes the application’s code and checks for common flaws. A large-scale experiment was done by analyzing 11,748 Android applications and found that 88% of them misuse cryptography. The evaluation of applications was based on a set of defined rules that affect the required security, and if any application violates one of the rules, it is then considered as insecure. In the end, the final result shows that there are more than 10,000 vulnerable apps that are considered as secure apps since they are using cryptographic API, but actually, they are not using it appropriately.

# 3. Saving non-sensitive but non-shared data on public storage
General data can be classified into three groups: sensitive data such as passwords, public data to be shared with other apps such as date and time, and non-sensitive data not to be shared with others such as user’s virtual-world identifiers, including the account name and profile photos. In Android, the first two types
# H. Altuwaijri, S. Ghouzali / Journal of King Saud University – Computer and Information Sciences 32 (2020) 543–552
# 3. Attacks based on device public information
Device public information in Android refers to any information that can be accessed by apps after obtaining the required permission. This information includes Android_ID, Google account email, phone number, Wi-Fi MAC address, etc. and is used by the app to identify users . Currently, many apps rely on communication with a remote backend service to perform functions, which require authentication mechanism. A study in  investigated vulnerabilities of using device public information in apps for user authentication. Authors successfully exploited this vulnerability and performed identity-transfer attack since all the information needed to authenticate the user was available and could be accessed by any app. The offense consists of a malicious app which steals all device public information from victim’s device and then sends it to the attacker device without any user interaction. Afterward, the attacker installs the vulnerable app, in which it will log into the victim’s account directly since the needed information is available. This type of attack can be applied to any app that depends on device public information to authenticate users. Besides, the authors presented a comprehensive dynamic analysis to assess 1000 of the most favorite apps available in Google Play. The result shows that 41 of them was categorized as vulnerable. Two of them was the top-rated messaging apps, WhatsApp and Viber.

# 3. Rooting the device
The risk of insecure data storage increases more if the device has been ‘‘rooted”. Rooting the device bypasses the confinements and limitations that are placed by the producer and gives the Android user privileged access to the device’s subsystems to install unapproved (by Google) apps, to update the OS to the latest version of Android if the device is outdated and no longer updated by the manufacturer, to use custom themes, and so on . The result is that the device is left vulnerable to attacks and other security issues such as data leakage flaws . The process of gaining root access breaks most of the Android’s security layers and requires to switch the device from Security-On to Security-Off (Casati and Visconti, 2018).