# 3 Program analysis of Android apps for security
Over the past decade, significant studies have been made to improve the security of Android applications. These studies have resulted in the development of tools for analyzing Android applications. In the following, an overview of the tools in light of our research is explained.

CHEX is a static analysis tool that automatically analyzes a single Android app to detect component hijacking vulnerability. CHEX identifies this type of vulnerability through data flow modeling. This modeling is done by analyzing the Android application to identify the data stream being hijacked. CHEX is based on Dalysis, as a framework proposed by Lu et al. for performing various static analyses of Android bytecode.

Epicc is an Android static analysis tool that detects security issues related to the Android communication model and analyzes the app components that can interact with each other. This tool converts the Dalvik bytecode to Java bytecode via Dare and then creates an ICC call graph for Android app analysis. The approach used in this tool is flow-sensitive, inter-procedural, and content-sensitive.

FlowDroid is an Android taint analysis tool. This tool implements an analysis that is object, context, field, and flow-sensitive. FlowDroid models the complete lifecycle of an Android app. This tool evaluates the configuration files and bytecode to detect existing privacy leaks.

1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
NIRUMAND et al. 903
# 3 ICC analysis of Android apps for vulnerability detection
Since our work focuses on ICC analysis to detect inter-app vulnerabilities, in the following, an overview of some of the researches that considered ICC analysis and vulnerability detection is described.

Chin et al studied the Android communication model to identify ICC attacks that can occur through intent messages. They also developed the ComDroid tool to detect two types of vulnerabilities called Intent Spoofing and Unauthorized Intent Reception through static analysis of Android applications. Android app developers can conduct this tool to analyze their apps before release.

DidFail39 performs a static analysis of Android applications. This tool combines Epicc7 and FlowDroid8 analyses to accurately track data flow in the app bundles at intercomponent and intracomponent levels. DidFail identifies data flows in each app separately. It then identifies potentially dangerous flows that may occur.

IccTA9 is an Android static analysis tool for performing ICC analysis. This tool identifies privacy leaks between components by constructing a highly precise control-flow graph. In this tool, the APK file is received as input, and the bytecode of the Android application is transformed into Jimple, as a Soot’s† internal representation. Then, the ICC links are extracted, and based on these links, Soot-based representations are modified to analyze the data flow between components. It also extracts a complete control-flow graph from the whole Android application.

Jha et al proposed a conceptual model to display ICC in Android apps at a higher abstraction level from the code. They also developed an automated tool called ICCMATT to perform ICC modeling and testing of Android apps. This tool extracts an ICC graph from the source code to specify intra- and ICCs within the Android app. Android app developers and analysts can use this call graph to identify ICC vulnerabilities.

COVERT10 has been developed to address IAC, in which a combination of static analysis with formal methods is applied. The main purpose of this tool is to detect permission-induced issues in Android apps, namely permission-induced security attacks and permission-induced compatibility defects.

Amandroid11 is a tool that addresses the security problems such as data leaks, data injection, and API abuse. Initially, this tool converts the app’s Dalvik bytecode to an IR. Amandroid creates an environment model that emulates communications of the Android system with the app. This environment is similar to the environment created by the FlowDroid,8 but unlike an app-level environment model used in FlowDroid, it is a component-level environment model. Amandroid performs the component-based analysis. For this purpose, for each app component, a Data Flow Graph (DFG) is generated, and the component-level data dependence graph (DDG) is created based on the DFG. In fact, this tool creates an abstraction of the app behavior using a DFG and a DDG at the component level.

Based on the review of related studies, we realized that (1) most of the solutions are proposed to address the detection of sensitive information leaks in Android apps, (2) the majority of related studies are limited to consider ICC analysis at the intra-app level (i.e., a single Android app), and (3) Most static analysis methods have used Soot framework, as an IR of the code. We will later, in Section 7 (Discussion), compare the proposed approach with the related works.

# 4 MOTIVATING EXAMPLE
In this section, we illustrate an inter-app vulnerability where a malicious app component performs an inter-app Intent Spoofing attack. In this example, a bundle from the Ghera repository1 is considered. The Broadcast Receiver component in Android apps can be dynamically registered in the Java code (i.e., at runtime) This type of component is automatically considered as an exported component without any access restriction. Therefore, any app can access this component via the ICC mechanism, even malicious apps. As a result, unintended operations may be triggered by this component.

†https://github.com/soot-oss
# NIRUMAND et al.

Consider the bundle shown in Figure 3. This bundle contains a benign app and a malicious app (i.e., Benign and Malicious). Benign has a component called MainActivity. The code excerpt of this component is shown in Listing 1. As can be seen, in line 3, there is an implicit intent with an action edu.ksu.cs.action.EMAIL. Benign registers a Broadcast Receiver that can dynamically receive the intent. The Java code snippet related to registering this Broadcast Receiver is shown in Listing 2. This Broadcast Receiver has an intent filter with an action edu.ksu.cs.action.EMAIL (line 6) and can be triggered by any app via the intent, even a malicious app.

# Listing 1: Code excerpt of MainActivity of Benign
1  @Override
2  public void onClick(View v) {
3      Intent intent = new Intent("edu.ksu.cs.action.EMAIL");
4      intent.putExtra("email", "diagnostics@startup.com");
5      intent.putExtra("text", "I am " + username);
6      sendBroadcast(intent);
7  }
# Listing 2: Code excerpt of register the dynamic Broadcast Receiver in Benign
1  @Override
2  protected void onCreate(Bundle savedInstanceState) {
3      super.onCreate(savedInstanceState);
4      setContentView(R.layout.activity_main);
5      emailBroadcastRecv = new EmailBroadcastRecv();
6      registerReceiver(emailBroadcastRecv, new IntentFilter("edu.ksu.cs.action.EMAIL"));
7  }
# Listing 3: Code excerpt of MalActivity of Malicious
1  @Override
2  public void onClick(View v) {
3      Intent intent = new Intent("edu.ksu.cs.action.EMAIL");
4      intent.putExtra("email", "rookie@malicious.com");
5      intent.putExtra("text", "I can send email without any permissions");
6      sendBroadcast(intent);
7  }
The second app is a malicious app. This app has an Activity called MalActivity. This component has a filter with an action android.intent.action.MAIN. The code excerpt of MalActivity is shown in Listing 3. In line 3, this component has an implicit intent with an action edu.ksu.cs.action.EMAIL. Malicious can invoke the Broadcast Receiver in Benign and exploit it to send the email, although Malicious is not allowed to send an email.

# NIRUMAND et al.

# Androldemlto NVD 5351
1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by -member@javeriana.edu.co">Shibboleth-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
The scenario of Malicious attacking Benign is shown in Figure 4. As can be seen, after running Malicious, Benign receives the intent from Malicious and then sends it through an email, and the message specified by Malicious is displayed. While sending emails is not very dangerous, the Broadcast Receiver registered dynamically can very well be exploited by a malicious app component to perform more dangerous operations. This is a common practice (i.e., anti-pattern) among the developers of Android applications
The above example is one of the most important vulnerabilities in IAC called Intent Spoofing, which we consider as an example of an inter-app vulnerability throughout this paper.

# 5 THE PROPOSED APPROACH
This section overviews the proposed approach to enable a more effective ICC analysis and detection of security issues at both intra- and inter-app levels. As explained earlier, this approach addresses two prominent ICC vulnerabilities called Intent Spoofing and Unauthorized Intent Receipt. The proposed approach starts with receiving a bundle of Android apps. The comprehensive IR of each app is first created. Then, the security information from each app is extracted and integrated into a single domain-specific model. By collecting this model from each app, the comprehension of the Android system is facilitated and all potential ICCs (inside the same app or among different apps) are extracted in the form of an analyzable domain-specific model. Finally, two prominent ICC vulnerabilities, Intent Spoofing and Unauthorized Intent Receipt, are identified by performing formal analysis operations (i.e., queries and model manipulation techniques).