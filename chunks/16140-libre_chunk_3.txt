# 3. Mobile application development affected by access control vulnerabilities
A cornerstone to access control in Android applications is permission-based access. Although most applications redirect permissions to the OS, some applications require select permissions which grant them access to additional users’ information. This has the possibility of being exploited by having applications communicate therefore expanding permissions and allowing user data to be more easily accessible. The challenges to current permission-based access have mostly to do with user and developer permission comprehension . If the stakeholders of a mobile app do not comprehend when permission access to resources on a mobile device is suitable, then it can be an opening for malicious behaviour. The vulnerabilities of access control may not be acknowledged by most users of popular applications -, however, this can impede development in mobile applications that require the security of confidential information such as medical records. Having a metric for access control security could help developers have a better understanding of appropriate permissions while minimizing the risk of possible malicious behaviour.

# 3. Metrics for access control security
Access control security is essential in some industries such as the medical field due to the importance of private medical information. For mobile applications to be used in sharing critical information it is important to have a model or framework to assess data security risks. Although there are a few standards in place to help secure private information, there is ongoing research on creating a set of metrics to best assess the risk of access control functionality in mobile applications. Below are three recently proposed access control metrics and frameworks that developers can use to moderate data access, some of which are inspired by securing private medical information.

- Socio-technical risk-adaptable access control (SoTRAACE). Model of risk assessment: health care professionals rely heavily on role-based access control. Due to access control vulnerabilities in mobile Android applications, it can be a great security risk if roles could obtain permission to unauthorized medical information. To reduce security risk a new hybrid risk assessment to the access control model called SoTRAACE has been proposed.

- The risk assessment metric is calculated using risk ranking with a respective risk factor, and the weight of the risk which was determined by experts in a New Delphi study . The prototype app that is used to implement SoTRAACE handles risk-adaptable decisions by utilizing the user’s location and connections . This permission-based access control can be largely customizable based on quantitative and qualitative data provided by its users. However, there is little available research to compare the hybrid-risk assessment procedures of this model to others. Also, the risk factors used to calculate risk assessment are small and could include more context to the data being assessed.

- OWASP Top 10 Mobile Risks: Another healthcare inspired access control framework for developers is open web access security project (OWASP) Top 10 Mobile Risks. The framework consists of 10 metrics that allows a technical auditor to identify the security vulnerabilities of their application as demonstrated in Figure 6 . The metrics were used to evaluate WebMD Allergy and Track My Medical Records mobile applications. Using the OWASP Top 10 Mobile Risks checklist a security risk of Track My Medical Records was discovered . Although the risk checklist proved that track my medical records had a security vulnerability, the effectiveness of the framework needs to be tested on additional samples.

- HybridGuard permission and policy framework: There has been a rise in web-based mobile applications that have proven to be a security risk factor for data access. Since most web-based mobile applications rely on JavaScript it can be hard to deduce where the requested data access is coming from and if exposed APIs are being taken advantage of. HybridGuard is a framework that uses principle-based, stateful policies, to provide access control to web-based mobile applications without modifying hybrid frameworks or mobile applications . When an API invocation is received it will be tested by the stateful policies within a policy manager acting as a monitor. If the API invocation is permitted, then access will be granted as elucidated in Figure 7 . The HybridGuard framework can be useful for developers in the creation of access control policies and metrics to assess security by recording instances of unauthorized access, what data was trying to be accessed, and data exposure by authorized API invocations. Although HybridGuard has been tested only on 6 mobile applications more testing needs to be done with promises of HybridGuard allowing users to download the framework as an app and set their policies.

An investigation study for risk calculation of security vulnerabilities on … (Radhwan M. Abdullah)
# 4. RESULTS AND DISCUSSION
As mentioned before security vulnerabilities in Android applications can affect the user of the application or the device itself. As engineers, it is a necessity to consider various measures to ensure the security of your app. We will always start with the measures that have worked in the past for millions of applications, but we must also consider new solutions that could provide more advanced security. We chose to take a deep dive into how engineers have one would assume that if a threat can be detected long before it reaches the application that it would be highly effective, predictive analysis and machine learning techniques explore this assumption deeply.

The first report we looked at addressed the following: During the study, about 200 open-source applications that were available on the Android app store were considered. This experiment necessitated the use of an application's source code. FBReader was the application of choice (free e-book reader). The application had about 39K lines of code and had received over 3700 updates in the code shop. Classes that were discovered in the vault and had a position with outside libraries were ignored. The application has been downloaded more than a million once and has received positive feedback. For more information, see Figure 1.

We downloaded several copies of the source code from the FBReader source code databases.

We found vulnerabilities for each edition by utilizing fortify's source code analyzer (SCA), a robotized static code review platform that tests program source code then produces a report containing all of the vulnerabilities discovered, along with areas and portrayals . For each iteration, we have calculated a comprehensive collection of object-oriented code metrics. The JHawk 5 tool was used , which gathers about 40 separate measurements for each level. Finally, we created a categorization model using support vector machines (SVM) that uses code measurements to predict when a Java class is vulnerable (result).

# Indonesian J Elec Eng & Comp Sci
ISSN: 2502-4752
Since 2008, the number of Android flaws has risen. As a result, it is reasonable to assume that the Android ecosystem's security status is deteriorating year after year. One potential explanation is that, as the mobile Internet evolves, the number of software available for consumption grows, but the majority of developers are inexperienced . Static analysis tools are used to figure out the number of vulnerabilities an application might have for numerous reasons. The first reason is that thousands of applications are added to the google play store with only a small number of vulnerabilities reports. Furthermore, the vulnerabilities that are reported are not complete and lack the historical data related to the vulnerabilities that are needed to build the predicting model. The second most important reason is that the static analysis tool can calculate the vulnerabilities repeatedly. The static analysis tool provides the ability to get plenty of vulnerabilities for thorough analysis. However, some of the source code analyser (SCA) vulnerabilities are false positives that we further discuss in the following sections.

The fortify source analyser was used as a static analysis tool to scan Android mobile applications. This tool reports the location of the vulnerabilities along with the criticality and the category of vulnerabilities. The vulnerabilities are computed using the following: for every java class if the variable is equal to zero its mean there were no vulnerabilities reported for this java class. On the other side, if the value is equal to one it means that vulnerabilities are reported for this java class. Table 3 represents the results of the predicted vulnerable components of classes. The results have been characterized into the following five sections: type of prediction features used, the foundation of the vulnerability data, the kind of prediction technique, the applications used for the validation, and the available performance meters , . For the training data collection, we use the 0 variant of the FBReader and the SVM vector machine to construct the model for predicting the vulnerable classes and components. The radical base function (RBF) is utilized to build the classifier. We set the parameters for the RBF function such as COST 100 and the value of gamma is 0. The total number of the components or java class is 215 for the training from which 59 is labelled as vulnerable.