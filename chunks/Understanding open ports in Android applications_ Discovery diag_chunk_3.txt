With this definition of the occurrence, we perform port clustering where fixed ports are those with a high occurrence and random ports are those with low ones. As shown in Fig. 3, Netflix’s UDP port 39798 in our dataset is certainly a random port because its occurrence is only 3% among the 84 Netflix users in the UDP4 group, whereas TCP port 9080 is a fixed port because its occurrence has reached 100% in the TCP4 group. In practice, we use 50% as the upper bound for the low-occurrence scenario, which is based on the assumption that fixed ports should cover at least more than half of the users in the group. We consider those with occurrences higher than 80% as fixed ports. However, the threshold-based occurrence strategy tends to be unreliable when group sizes are small because a random port exhibiting a number of different observations may have one or several of them show up with high occurrences. In these cases (and others with occurrences between 50% and 80%), we apply a heuristics approach, to be described next, to get a more accurate inference.

# Step 3: Clustering by heuristics
For observations that cannot be reliably determined by occurrences, we further leverage three heuristics to handle them. We first separate port numbers into the “random” range (for port numbers between 32,768 and 61,000, i.e., those randomly assigned by the OS or the so-called ephemeral ports) and the “fixed” range (for other port numbers). For each group, we count the numbers of unique port numbers within these two ranges, and denote them by Nr and Nf, respectively. We then have the following three port distribution patterns and their corresponding heuristics:
- All ports are in the random range (Nr > 0 and Nf = 0). We simply mark them as one random port based on the conservative principle that we can tolerate misclassifying a fixed port to be a random one but not the opposite.

- Ports are in both ranges (Nr > 0 and Nf > 0). We first consider all ports in the random range as presenting one random port. If Nr is significantly bigger than Nf (e.g., ten times) and Nf is relatively small (e.g., less than 3), we mark ports in the fixed range as fixed ports.

- All ports are in the fixed range (Nr = 0 and Nf > 0). We conservatively output just one random port if Nf is not small (e.g., larger than 3); otherwise, we consider them as fixed ports.

# C. Crowdsourcing Results
We have deployed NetMon to Google Play for an IRB-approved crowdsourcing study since 18 October 2016. In this paper, we base our analysis on the data collected till the end of July 2017 (a period of around ten months when most of our evaluations were performed and security findings were confirmed), which involves 3,293 user phones from 136 different.

IRB approval was obtained from Singapore Management University on 14 October 2016. Under this study, we do not collect personally identifiable information (PII) or IMEI. We use only the anonymized ANDROID ID (hashed with a salt) for device identification. Users are also explicitly informed about all the information we collect through a pop-up confirmation dialog.

# Apps with Open Ports in Different Types of Socket Addresses
In our dataset, we collect 40,129,929 port monitoring records and discover 2,778 open-port apps (2,284 apps with TCP open ports and 1,092 apps with UDP ones) and a total of 4,954 open ports (3,327 TCP ports and 1,627 UDP ports). Note that with the help of our analytic engine, we can classify UDP random ports bound to the host IP address as client UDP ports. We find that both TCP and UDP open ports have their fair share in these apps, and many of these ports expose them to potential network attacks (e.g., bound to non-local IP addresses). In addition, we find that 1,390 apps use long-lasting (more than 5 minutes) client UDP ports to communicate with servers. To the best of our knowledge, this work constitutes the first report of crowdsourcing Android apps with open ports and their IP address and port number information.

# 1) Open Ports in Popular Apps
With the help of Selenium, a web browser automation tool, we obtain the number of installs of the 1,769 open-port apps on Google Play, and find that 925 apps (52%) have over one million installs. Among them, 100 apps even have over 100M installs each. We thus take a closer look at these 100 highly popular apps and present 28 representatives of them in Table I. We can see that popular apps such as Facebook, Instagram, Skype, WeChat, YouTube, Spotify, Netflix, and Plants vs. Zombies are surprisingly not free of open ports.

An interesting observation is that 89 out of the 925 popular apps (9%), including Firefox and Google Play Music as listed in Table I, use UDP port 1900 and/or 5353 for the UPnP and mDNS services, respectively. Furthermore, the open-port timeline analysis shows that both ports cumulatively last for over a month for each of their top ten apps, which provides enough time window for adversaries to launch attacks. In particular, Bai et al. has demonstrated that such ports in iOS and OSX apps could suffer from Man-in-the-Middle attacks.

# TABLE I: Representative Apps that Have Open Ports
† “L” is for the local IP address and “H” is for the host IP, as termed in Sec. II.

Compared to UDP, TCP open ports have more diverse usages. The top five open TCP port numbers, port 8080, 30102, 1082, 8888, and 29009, have no well-defined fixed usage (unlike the UDP port 1900 and 5353 above) and appear in only 14 to 64 apps. Despite this diversity, it is interesting to see some uncommon TCP port numbers (e.g., 30102 and 29009) appearing in multiple apps. To gain a better understanding of these open ports, we perform static analysis and find that many of them are introduced by SDKs. As the most interesting example, Facebook SDK is the major contributor to 997 apps (of the entire dataset) for their random TCP ports bound to the local IP address (i.e., the fourth sector in Fig. 4). Such local random TCP ports appear in 62% of the 925 popular apps, and the percentage goes up to 78% in the 100 highly popular apps. As shown in Table I, even anti-virus apps, 360 Security, and Avast, are also affected.

# 2) Open Ports in Built-in Apps
Besides the popular apps on Google Play, we also identify 755 built-in apps (apps pre-installed by phone manufacturers) containing open ports (excluding those that also appear as standalone apps on Google Play, such as Facebook and Skype). We recognize them by collecting user devices’ system app package names (via the SYSTEM flags of the ApplicationInfo class).

# TABLE II: Top smartphone vendors that include open-port apps.

With vendor-specific package keywords, we identify over 20 vendors that include open ports in their built-in apps. Table II lists the top ten according to the number of built-in apps with open ports. We can see that Samsung, LG, and Sony are the top three vendors, with 186, 75, and 69 open-port apps, respectively. Considering the huge numbers of phones sold by these vendors, their built-in open ports are expected to exist in a significant portion of the entire smartphone market. By analyzing each vendor’s top five open ports, we identify three major reasons for including these open ports in these built-in apps.

First, more than half (489 apps, 64%) of these apps contain UDP open port 68, which is for receiving DHCP broadcasts and updating the host IP address. As shown in Table II, UDP port 68 appears in all top ten device vendors, and it often affects the largest number of built-in apps in each vendor. Furthermore, we find that opening UDP port 68 is often long-lasting, with the median value of cumulative port-opening time being 32 hours per app. This port can leak the host name of the phone, which was fixed only in the latest Android 8.

Second, about one quarter (175 apps, 23%) have TCP/UDP port 5060 open, which is for VoIP SIP connection setup. These built-in apps are from five device vendors: Samsung, LG, Lenovo, Qualcomm, and MediaTek. By inspecting these apps, we find that quite a number of them do not seem to require the SIP capability, e.g., com.lenovo.powersetting, com.sec.knox.bridge, com.sec.automation, and com.qualcomm.location, to name a few.

Moreover, we surprisingly find that some 41 Samsung models and 16 LG models modify Android AOSP apps (e.g., com.android.settings and com.android.keychain) to introduce the open port 5060. Other cases where Android AOSP apps are customized to introduce open ports include TCP port 6000 in Xiaomi’s com.android.browser app, and UDP port 19529 opened by LG’s 18 system apps. Most of these apps, e.g., com.lge.shutdownmonitor and com.lge.keepscreenon, generally have no networking.

3Note that 175 of them also contain other ports.