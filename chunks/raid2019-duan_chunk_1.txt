# Automatic Generation of Non-intrusive Updates for Third-Party Libraries in Android Applications
# Yue Duan∗, Lian Gao2, Jie Hu2, and Heng Yin21
1Cornell University 2University of California, Riverside
1yd375@cornell.edu 2{lgao027, jhu066}@ucr.edu 2heng@cs.ucr.edu
# Abstract
Third-Party libraries, which are ubiquitous in Android apps, have exposed great security threats to end users as they rarely get timely updates from the app developers, leaving many security vulnerabilities unpatched. This issue is due to the fact that manually updating libraries can be technically non-trivial and time-consuming for app developers. In this paper, we propose a technique that performs automatic generation of non-intrusive updates for third-party libraries in Android apps. Given an Android app with an outdated library and a newer version of the library, we automatically update the old library in a way that is guaranteed to be fully backward compatible and imposes zero impact to the library’s interactions with other components. To understand the potential impact of code changes, we propose a novel Value-sensitive Differential Slicing algorithm that leverages the diffing information between two versions of a library. The new slicing algorithm greatly reduces the over-conservativeness of the traditional slicing while still preserving the soundness with respect to update generation. We have implemented a prototype called LIBBANDAID. We further evaluated its efficacy on 9 popular libraries with 173 security commits across 83 different versions and 100 real-world open-source apps. The experimental results show that LIBBANDAID can achieve a high average successful updating rate of 80% for security vulnerabilities and an even higher rate of 94% when further combined with potentially patchable vulnerabilities.

# 1 Introduction
Third-party libraries (TPL) have been used extensively in Android to provide rich complementary functionalities for Android apps and ease the app development. This trend becomes more obvious as Android apps get increasingly complicated. Prior research has shown that every app contains 8 distinct TPLs on average , and 42% of apps even have more code in TPLs than in their real logic.

∗This work was conducted while Yue Duan was a PhD student at University of California, Riverside, advised by Prof. Heng Yin.

Despite the benefits, TPLs can bring serious security problems for Android app. It has been revealed  that 70% of Android apps include at least one outdated TPL and 77% of the app developers only update at most a strict subset of their included TPLs, leaving many known and easy-to-exploit security vulnerabilities unpatched. In fact, updating TPLs in Android apps can be so time-consuming and tedious that developers are often forced to leave them outdated. First, updating libraries to the latest version is likely to involve considerable manual efforts to solve backward incompatibility issues . Second, although 97% of actively used library versions with a known vulnerability could be fixed via a drop-in replacement with a specific version , it is impractical for app developers to manually find suitable versions for every TPL.

# Existing Research
Prior efforts have been made to study and mitigate the problems with TPLs in Android apps. A variety of library detection techniques are proposed  to detect TPLs in apps and conduct measurement study. Further, techniques are proposed to isolate TPLs from the Android app. TPLs can be transformed into new processes , new apps , or new services . Other works enforce in-app privilege separations  in order to keep the apps’ privileges from TPLs. However, these techniques do not fix security issues per se but merely limit the harmfulness of potential problems in TPLs from the apps.

To alleviate the issues, Android patching techniques are proposed to prevent component hijacking attacks , detect information leakage , fix cryptographic-misuses  and detect runtime crashes . Nonetheless, these techniques only aim to fix specific types of security issues and do not deal with the outdatedness problem on TPLs. Hence, no existing patching techniques on Android can keep TPLs updated and fix security issues in a generic fashion.

# Our Approach
To solve the problem, we aim to automatically generate updates for TPLs in Android apps such that it does not require any code modification on the app side and more importantly, introduces no impact to the library.

USENIX Association 22nd International Symposium on Research in Attacks, Intrusions and Defenses 277
interactions with other components locally and remotely as we call it non-intrusive. The advantages of non-intrusiveness are two-fold: 1). it requires zero change to the code for the given Android app so that the full backward compatibility and maintainability of the apps are ensured; 2). the internal state consistency of the app is secured since the updates guarantee no impact to the program logic of the updated library.

To achieve this goal, we need to understand the impact of the code changes between the outdated libraries and the latest versions. LIBBANDAID utilizes forward program slicing algorithm to perform Impact Analysis . Traditional slicing algorithm  is extremely conservative and often generates unwieldy slices . In our case, these slices will very likely to violate the non-intrusiveness. Techniques  have been proposed to prune the slices. However, they either consider only data-flow  or calculate relevance scores  and remove the less relevant codes. Obviously, none of them can meet our need of soundness. As a result, we propose a novel slicing algorithm called Value-sensitive Differential Slicing that fully leverages the diffing information between the two versions and eliminates the over-conservativeness of the traditional slicing by keeping track of value set changes for all variables. Then, we are able to produce much smaller slices while still preserving the soundness for the purpose of updates generation.

We implement a prototype called LIBBANDAID. Our system first extracts the outdated libraries from a given Android app, compares each outdated library with its latest version counterpart and generates diffing information that precisely characterizes the code changes at code statement level. Then it uses our new slicing algorithm to analyze the impact of each code change and group related changes together to form a set of candidate updates based on control and data dependencies. Finally, our system carries out a selective updating process to apply only the non-intrusive updates to the Android app.

We then conduct a comprehensive evaluation on LIBBANDAID by collecting 9 popular TPLs with 173 security related commits across 83 versions and 100 real world apps. The results show that LIBBANDAID can effectively patch the security vulnerabilities with a high success rate.

# Contributions
In summary, this paper has made the following contributions:
- We propose an automatic non-intrusive patch generation technique and implement a prototype system called LIBBANDAID, which is the first of its kind to solve the outdatedness problem for TPLs in Android apps.

- A novel slicing algorithm called Value-sensitive Differential Slicing is proposed to utilize the diffing information between old and new versions of the code and reduce the over-conservativeness of the traditional forward slicing while still preserving the soundness.

- We evaluate LIBBANDAID with 9 popular TPLs with 173 security related commits across 83 different versions and 100 real world apps. The experimental results show that LIBBANDAID can effectively fix security vulnerabilities with an average success rate of 80% and even higher rate of 94% when combined with potentially patchable vulnerabilities. We demonstrate the correctness of the updated apps with automatic program testing.

# 2 Problem Statement
# Deployment Model
Our proposed technique is anticipated to be deployed as a service for Android app developers (other than app markets or end users). Developers can feed their app that contains an outdated TPL as well as the latest version of that TPL into LIBBANDAID. It will automatically generate and apply non-intrusive updates to the TPL within the submitted app without any modification to the app’s code. Our approach is designed to be conservative to guarantee a maximal updating in a non-intrusive manner. As a result, security related updates as well as other updates (e.g., new features and optimizations) can be applied to the outdated library.

It is noteworthy that the trade-off for non-intrusiveness is the completeness. LIBBANDAID avoids applying updates that could change the interactions among the TPL and other components. As a result, our approach makes a reasonable underlying assumption so that LIBBANDAID is designed to cover most of the security related updates.

# Assumption
LIBBANDAID updates the outdated TPLs as much as possible with a high coverage for security related updates without violating the non-intrusiveness. The underlying assumption is that a security patch (e.g., insert a new condition check) is unlikely to introduce backward incompatibility or change how the TPL interacts with other components locally (e.g., with the app) and remotely (e.g., with TPL server). Hence, most of the security related issues can be fixed by our technique as they are very unlikely to be filtered out by the pre-defined rules that are designed to ensure the non-intrusiveness. This assumption is demonstrated by our evaluation with 9 most popular TPLs in Section 7.