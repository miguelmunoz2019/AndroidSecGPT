the likes of blocking text and calls from specific phone numbers or sharing features through SMS or email. installs, have the highest number of embedded tracking libraries: 11 and 14 respectively. Figure 3 ranks the top-25 popular trackers in all analyzed VPN apps. Google Ads and Google Analytics are the most popular trackers among our corpus of VPN apps. A closer examination at the long-tail of the distribution reveals however that the least popular third-party tracking libraries in our reference set of 1000 apps are instead more common in VPN apps. For instance, VPN apps like SurfEasy  and Ip-Shield VPN  integrate libraries like NativeX5 and Appflood6 for monetizing their apps with targeted ads.

38% of the analyzed VPN apps have at least one positive malware report according to VirusTotal but only 4% of them have an “AV-rank” higher than 5. For each app, we include their Google Play rating and the number of installs for reference. The malware signatures for those apps correspond to 5 different types of malware: Adware (43%), Trojan (29%), Malvertising (17%), Riskware (6%) and Spyware (5%).

# User Awareness Analysis
The previous subsection identified instances of VPN apps with malware presence. This section takes a user-centric perspective to understand if they publicly report on their Google Play reviews any of the privacy and security issues which could be present on VPN apps.

Our analysis reveals that VPN apps receive high user ratings: 37% of the VPN apps have more than 500K installs and 25% of them have at least a 4-star rating as shown in Figure 4. We cannot distinguish whether Google Play’s positive installs and reviews are organic or if they were acquired using paid services to promote app installs.

The increasing number of popular VPN apps available on Google Play and the apparent lack of user-awareness of the potential maliciousness of these apps is concerning.

Security and privacy risks associated with the VPN permission indicate the urge to analyze in depth this unexplored type of mobile apps. The average mobile user rates VPN apps positively even when they have malware presence. According to our study, only a handful of users has raised any type of security and privacy concern in their reviews. In Section 5 we will complement the insights provided by our static analysis with a comprehensive set of active tests that aim to reveal behavioral aspects of the VPN apps during runtime at the network level.

# 5. NETWORK MEASUREMENTS
In this section, we investigate the runtime and network behavior of 150 VPN apps. In particular we are interested in understanding how VPN apps handle user’s traffic.

We structure our analysis to illuminate the following aspects: (i) the traffic interception mechanisms implemented by each app (i.e., whether the app uses the VPN permission to implement localhost proxies or to forward the traffic through a terminating end-point or another peer); (ii) the tunneling protocols implemented by each app as well as developer-induced misconfigurations which may cause traffic leaks; (iii) the presence of proxies and traffic manipulation techniques such as ad-blocking, JavaScript injection and traffic-redirection; and (iv) identify any possible occurrence of TLS interception.

We use a dedicated testbed, depicted in Figure 5, composed of a smartphone that connects to the Internet via a computer configured as a WiFi access point (AP) with dual-stack support. The WiFi AP runs tcpdump to intercept all the traffic being transmitted between the mobile device and the Internet. This allows us to observe the traffic generated by each VPN app as seen by an in-path observer.

We test individually each one of the 150 VPN apps under consideration. We could not fully automate our measurement efforts as one of the goals of our study is to understand and test the options offered by each VPN app in their GUI (e.g., egress point diversity and supported VPN protocols). Prior to each test, we also ensure that the previous app we experimented with has not modified the root certificate store and we reboot the device to enforce the complete renewal of the virtual interface.

We run a set of purpose-built scripts (not only between the device and a server under our control but also to popular websites) and the ICSI Netalyzr tool for Android  to generate traffic and to analyze the different network- and traffic-related aspects of VPN apps. All the tests were conducted over a proxy-free link at Data61/CSIRO (Australia), thus the observed traffic manipulations and middleboxes can only be attributed to the VPN apps and their online infrastructure. Each subsection will describe in detail the tests used for each aforementioned analysis. The number of tests that we run per app varies with the configurability of the app (e.g., whether the user can select a server in a given country) and the diversity of IP addresses that we observe. Two people executed a total of 5,340 tests manually for three months and connected to all end-points mentioned in the GUI of a given VPN app.

# 5 Interception and Forwarding Mechanisms
App developers can leverage the VPN permission to implement localhost proxies (Case 1 in Figure 5) or to forward user’s traffic to an external machine. In the latter case, the egress point could be either a remote server hosted in the cloud (Case 2) or another participating node in a peer-forwarding fashion (Case 3). In this analysis we investigate the forwarding mechanism implemented by each VPN app according to the possible scenarios.

Our detection method relies on the client opening TCP connections to a remote dual-stack server under our control after enabling the traffic interception mode for each app. Our server records the public IP address for each TCP connection (i.e., the egress point) and obtains its associated complete domain name (FQDN). We leverage MaxMind’s GeoIP services  to identify the geographical location of the egress point. Our geo-location analysis is therefore limited to MaxMind’s accuracy . We also use Spamhaus Policy Block List (PBL)  records to identify which IP addresses are associated with residential ISPs . Note that Spamhaus’ PBL records are populated directly by ISPs.

# Current Page Analysis
To improve spam detection so they can be considered as an accurate proxy to identify IP addresses associated with residential end-users.

After introducing the different datasets that we will leverage to illuminate the forwarding mechanisms for each VPN app, we now define each forwarding mechanism as depicted in Figure 5. An app performs local interception if it operates as a localhost proxy without forwarding user’s traffic to a terminating VPN server (i.e., if the observed public IP address for all the TCP connections generated by our script matches the public IP address of our experimental setup). Otherwise, the VPN app implements external forwarding. For the latter case, we define two sub-categories: cloud forwarding if the VPN app uses a cloud provider to host their “terminating” VPN servers; and peer forwarding if the app leverages other participating users as egress points.

# Local-Interception
Only 4% of the analyzed VPN apps use the VPN permission to intercept user’s traffic in localhost or to implement transparent localhost proxies. These VPN apps include antivirus software (e.g., Dr.Web Security Space), tcpdump-like tools that operate on user-space (e.g., tPacketCapture) and privacy and connection firewalls that allow users to generate connection logs or to block traffic at the flow- or app-level (e.g., NoRoot Firewall). Given that the traffic is intercepted locally and not forwarded through a VPN tunnel, our WiFi AP can identify side-connections generated by such apps. Notably, we observed that Dr. Web Security Space (an AV app) opens side-channel HTTPS flows to drweb.com and to 1lt.su. To determine whether they are used to forward a copy of user’s traffic, we correlate the exogenous flow sizes to the flow size (9KB) to our local web server. We observe that for 11KB and 4KB of traffic to 1lt.su and drweb.com, respectively. Unfortunately, given that these flows are encrypted, we could not investigate their payload to identify whether they are legitimate or not. For the remaining apps implementing local interception, we only observe traffic associated with their embedded third-party libraries for analytics and advertisement services.

# External Forwarding
# Hosting Provider
# Premium Apps
The US hosts egress points for 77% of free and 90% of premium VPN apps respectively. France and the Netherlands are in second and third position for free VPN apps (31% and 27% respectively) whereas the U.K and Germany are second and third for premium VPN apps. Notably, the top 3 countries contribute to 41% and 52% of the total number of VPN end-points for free and premium VPN apps respectively. A significant fraction of VPN apps concentrate all of their egress points in a single country: 16% of free VPN apps locate all of their end-points concentrated in the U.S., whereas 10% of the premium VPN apps have all their egress points concentrated in The Netherlands.