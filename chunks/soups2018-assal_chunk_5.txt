Code review can be as simple as a sanity check, or a walk-through, where developers explain their code to other developers in their team. Some reviewers are thorough, while others consider reviews a secondary task, and are more inclined to accept the code and return to their own tasks. P-T10 explained, “Sometimes they just accept the code because maybe they are busy and they don’t want to sit around and criticize or critically think through everything.” Moreover, reviewers in T9 examine vulnerabilities to assess their impact on performance. P-T9 explained, “[Security in code review is] minimum, I’d say less than 5%. So, yeah you might have like buffer overflow, but then for us, that’s more of the stability than security issue.” We grouped participants’ descriptions of the code review stage into four distinct approaches.

Code review is a formal process that includes security. (SA) All security adopters mentioned that their teams include security in this stage. For some teams, it is a structured process informed by security activities in previous stages. For example, security-related warnings flagged during the code analysis phase are re-examined during code reviews. Reviewers can be senior developers, or an independent team. Being independent, reviewers bring in a new perspective, without being influenced by prior knowledge, such as expected user input. P-T5 said, “We do require that all the code goes through a security code review that’s disconnected from the developing team, so that they’re not suffered by that burden of knowledge of ‘no one will do this’, uh, they will.” Sometimes reviewers might not have adequate knowledge of the applications. In such cases, T1 requires developers to explain the requirements and their implementation to the reviewers. P-T1 said, “You have to explain what you have done and why. [...] so that they need not invest so much time to understand what is the problem [...] Then they will do a comparative study and they will take some time to go over every line and think whether it is required or not, or can it be done in some other way.” Although cooperation between different teams is a healthy attitude, there might be a risk of developers influencing the reviewers by their explanation. P-T13 indicated the possibility of creating a bias when reviewers are walked-through the code rather than looking at it with a fresh set of eyes. He said, “umm, I have not really thought about [the possibility of influencing the reviewers.] [...] Maybe. Maybe there is a bit.”
Preliminary code review is done as a checkpoint before the formal review. (SA) This is an interesting example of developers collaborating with reviewers. P-T1 mentioned that reviewers sometimes quickly inspect the code prior to the formal review process and in case of a potential issue, they provide the developer with specific testing to do before the code proceeds to the review stage. This saves reviewers time and effort during the formal code review, and it could help focus the formal process on intricate issues, rather than being overwhelmed with simple ones.

Security is not considered during code review. (SI) The majority of the security inattentive participants explained that their teams’ main focus for code review is assessing code efficiency and style, and verifying how well new features fulfill functional requirements and fit within the rest of the application. In fact, some participants indicated that their teams pay no attention to security during this stage. It is either not the reviewers’ responsibility, or is not an overall priority for the team. P-T7 explained that because reviewers are developers, they are not required to focus on security. In addition to not being mandated, our participants explained that most developers in their teams do not have the necessary expertise to comment on security. P-T7 said, “Probably in the two years that I’ve been working, I never got feedback [on] the security of my code [...] [Developers] don’t pay attention to the security aspect and they can’t basically make a comment about the security of your code.”
Security consideration in code review is minimal. (SI) According to developers from the security inattentive group, some of their teams pay little attention to security during code review only by looking for obvious vulnerabilities. Additionally, this may only be performed if the feature is security-sensitive. In either case, teams do not have a formal method or plan, and reviewers do not necessarily have the expertise to identify vulnerabilities . Our participants explained that reviewers are either assigned or chosen.

USENIX Association Fourteenth Symposium on Usable Privacy and Security 287
by the developer, based on the reviewer’s qualifications and familiarity with the application. However, this can have serious implications, e.g., those who have security expertise will carry the burden of security reviews in addition to their regular development tasks. P-T12 explained that this caused the individuals who had security knowledge to become “overloaded”. Although our data does not allow us to make such explorations, it is important to investigate the effect of workload on the quality of code reviews, and whether it has an effect on developers’ willingness to gain security knowledge. For example, does being the person designated to do security code reviews motivate developers to gain security knowledge? Or would they rather avoid being assigned extra reviewing workload?
# 4 Post-development testing stage
Security is a priority during post-development testing. (SA) Three participants from the security adopters group mentioned that their project teams have their own testers that evaluate different aspects, including security. The general expectation is that the testers would have some security knowledge. Additionally, P-T12 mentioned that his company hires external security consultants for further security testing of their applications. However, because the testing process by such experts is usually “more expensive and more thorough,” (P-T12), they usually postpone this step until just before releasing the application. We identified two distinct motivations for performing security testing at this stage: Post-development testing is used to discover security vulnerabilities, or for final verification. (SA) Unsurprisingly, the majority of security adopters rely on post-development testing as an additional opportunity to identify and discover security vulnerabilities before their applications are put out to production. T1, on the other hand, expects security post-development testing to reveal zero vulnerabilities. P-T1 explained, “If they find a security issue, then you will be in trouble. Everybody will be at your back, and you have to fix it as soon as possible.” Thus, this stage is used as a final verification that security practices in the previous stages were indeed successful in producing a vulnerability-free application.

Similar to the code review stage, we found evidence of collaboration between the development and the testing team, however, Testers have the final approval. (SA). Testers would usually discuss with developers to verify that they understand the requirements properly, since they do not have the same familiarity with the application as developers. However, P-T5 explained that although developers can challenge the testing team’s analysis, they cannot dismiss their comments without justification. Addressing security issues is consistently a priority. P-T5 said, “[The testing team will] talk to the development teams and say, ‘here’s what we think of this’, and the development team will sometimes point out and say, ‘oh, you missed this section over here’ [...] but one of the things is, we don’t let the development teams just say, ‘oh, you can’t do that because we don’t want you to’. So the security teams can do whatever they want.” Cooperation between developers and testers could help clear ambiguities or misunderstandings. In T5 testers have some privilege over developers; issues raised by testers have to be addressed by developers, either by solving them or justifying why they can be ignored. P-T5 hinted that disagreements may arise between different teams, but did not detail how they are resolved. Further exploration of this subject is needed, taking into consideration the level of security knowledge of the development team compared to the testing team.

Security is prioritized in post-development testing for all of our security adopters, where they rely on an independent team to test the application as a whole. On the other hand, although post-development testing appears to be common to all teams from the security inattentive group (with the exception of T10), it often focuses primarily on functionality, performance and quality analysis, with little to no regard for security. Our analysis revealed the following insights and approaches to post-development security testing.