To clearly specify the boundary of the contribution as well as the extensions and enhancements made to the original VAnDroid framework19, we use Figure 1, inspired by the taxonomy provided by Sadeghi et al for Android security analysis. As depicted in this figure, the original VAnDroid framework19 is intended to address security issues in a single app component (i.e., intracomponent analysis). VAnDroid2 made substantial extensions to the original VAnDroid framework19 for addressing the security issues in multiple app components (i.e., intercomponent analysis). Also, VAnDroid2 is intended to consider both a single app (i.e., intra-app analysis) and a combination of apps (i.e., inter-app analysis). Therefore, in VAnDroid2, four levels of analysis are supported: intracomponent (single component), intercomponent (multiple components), intra-app (single app), and inter-app (multiple apps). Among the three major types of interprocess communication (IPC) mechanisms (i.e., Intent, Android Interface Definition Language [AIDL], and data sharing), VAnDroid2 focuses on Intent.

The VAnDroid2 framework has been developed to generate comprehensive and scalable models of the Android app specification to enable more effective IAC security analysis. At the heart of this framework is a model-based static analysis approach for Android applications, implemented to enable an incremental and automated analysis of the security specification and structure of Android apps that are constantly being installed, removed, and updated on user’s devices. The VAnDroid2 framework consists of three phases. In the Model Discovery phase, through model-based static analysis, the comprehensive Intermediate Representation (IR) of each app in a bundle is created without losing information. Then, in the transformation and Integration phase, by collecting security information in the form of domain-specific models from each app, the comprehension of the Android system is facilitated and all potential inter-component communication (inside the same app or among different apps) are captured from a bundle of apps in an analyzable domain-specific model. Finally, in the analysis phase, according to the resulting models, a formal analysis process is conducted to support both intra- and inter-app vulnerability analysis.

The proposed framework has been developed as an Eclipse-based tool. It can be used to identify two prominent inter-app vulnerabilities called Intent Spoofing and Unauthorized Intent Receipt. To evaluate the VAnDroid2 tool, it has been applied to 10 bundles of real-world Android apps to examine the criteria of correctness, scalability, and run-time performance. These bundles, each containing 35 apps, have been randomly selected from the provided dataset in this study (i.e., a collection of benign, malicious, and vulnerable Android applications). The VAnDroid2 tool is also compared with several existing state-of-the-art tools related to ICC analysis of Android apps: IC320, IccTA9, Amandroid11, and COVERT10. The evaluation results indicate that VAnDroid2 has conducted a more effective IAC security analysis and achieved higher precision and recall in intra- and inter-app vulnerability detection. Research artifacts, including the tool and evaluation results, are available on the VAnDroid2 website*.

https://mdse.ui.ac.ir/project/vandroid2/
# Contributions
To summarize, this paper makes the following contributions (significant extensions from the original VAnDroid framework19).

1. Model-based static program analysis for Android. We presented a model-based static program analysis for Android, which supports extracting all the ICC information from an Android app needed for analyzing ICC at intra- and inter-app levels.

2. Model-based ICC extractor for Android. We developed a model-based ICC extractor for Android to precisely infer all potential ICCs at intra- and inter-app communication levels. This ICC extractor implements a model-based app component analysis that conducts a precise intent resolution (matching) algorithm to extract all potential ICCs from a bundle of Android apps.

3. A formal model-based analysis process. We implemented model-to-model (M2M) transformations through ATL (as a model transformation language) and OCL (as a formal language) rules, which supports the identification of two prominent ICC vulnerabilities at intra- and inter-app communication levels.

4. An extended version of the Android application security aspects metamodel. The metamodel is proposed to extract the security information from each app in a bundle of apps and integrate them into a single Android Application Security Aspects model. This model is reusable and detailed enough that it can be conducted to perform a more effective inter-app security analysis. This metamodel is an extension of the metamodel defined in our earlier work19. This metamodel is extensively enhanced to consider the more complete specification of Android apps, including various types of app components, all kinds of intent objects, and enforced permissions by components, as a set of permissions required to access components of an app. We also improved the implementations for extracting the Android Application Security Aspects model to perform an elementary string analysis. In this analysis, intent parameters are extracted to identify the more precise correspondence between the source and targets for ICC. The details of this metamodel are described in Section 5.

5. A metamodel for ICC of Android apps. This brand new metamodel is proposed to extract all potential ICCs in a bundle of apps at the intra- or inter-app levels and integrate them into a single model. In order to extract this model, a model-based algorithm has been implemented to perform app components analysis. This algorithm conducts the precise Intent resolution process, which makes it possible to support both intra- and inter-app analysis.

6. Implementation of the proposed framework as an Eclipse-based tool. To show the ability of the proposed approach to perform both intra- and inter-app vulnerability analysis, it is developed as an incremental and automated Eclipse-based tool called VAnDroid2. This tool receives multiple apps (app bundles) and performs incremental ICCs analysis to identify security issues at four analysis levels: intracomponent, intercomponent, intra-app, and inter-app. VAnDroid2 is extendable, and all components of this tool can be used for other types of inter-app vulnerabilities.

7. Experiments. The evaluation results of the VAnDroid2 tool w.r.t. correctness, scalability, and run-time performance have been presented. These experimental evaluation results corroborated VAnDroid2’s ability to perform effective inter-app ICC analysis. VAnDroid2 is also compared with several state-of-the-art tools (i.e., IC3, IccTA, Amandroid, and COVERT) related to ICC and IAC analysis of Android applications. The results of the comparisons indicate that VAnDroid2 outperforms the state-of-the-art tools. In comparison with IC3, as a program analysis tool for Android, VAnDroid2 significantly outperforms the IC3 tool both in extracting more comprehensive specifications from each app and execution time. In comparison with IccTA and Amandroid, as two intra-app analysis tools for Android, VAnDroid2 outperforms the other two tools and achieves higher precision (100%), recall (96%), and F-measure (98%) in intra-app ICC analysis. In comparison with COVERT, as an inter-app analysis tool for Android, VAnDroid2 significantly outperforms COVERT and achieves higher precision (100%), recall (100%), and F-measure (100%) in inter-app ICC analysis.

# Organization of the Paper
The remainder of this paper is organized as follows. Section 2 presents background information required to understand this study. Section 3 reviews the related work. Section 4 explains an illustrative inter-app vulnerability example to motivate our research. Section 5 introduces an overview of the proposed approach, the proposed metamodels, and tool support. The evaluation results are presented in Section 6. We discuss evaluation results, limitations, and threats to validity in Section 7. Finally, Section 8 concludes the paper and highlights the areas of future work.

# 2 BACKGROUND
This section provides background information on Android apps, ICC, access control model, and MDRE concepts.

# 2 Android applications
As the most popular mobile platform, Android accounted for 73% market share in June 2021. This platform includes the Linux operating system, middleware, system libraries, and a set of pre-installed Android applications. The Android platform architecture consists of several layers. At the bottom of this platform, there is a hardware layer that contains the hardware components of the Android system. The Linux layer, as the second layer, is the core of the Android System. This layer is responsible for the proper operations of all system components. At the top of this layer, there is a Hardware Abstraction Layer (HAL). This layer contains several library modules that provide interfaces for each hardware component. Finally, at the top of the Android system, there is an application layer that provides the API for Android apps to interact with the system. These applications can be pre-installed apps that exist on the Android system by default or installed by users from various repositories, which are called third-party apps.

Android apps are distributed as the Android Package (APK) file formats. An APK consists of several files. The Manifest file is a mandatory and important file for any app which contains metadata about the app, including the app components, required permissions, and enforced permissions. Components are the primary and logical units of the Android app, which can be following four types:
- Activity. It is the basis of the application interface. An Android app may have several activities that display different pages of the app to the user.

- Service. It provides the background processing of the app, such as playing music. This component does not provide any user interface.