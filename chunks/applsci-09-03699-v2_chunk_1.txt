# PerHelper: Helping Developers Make Better Decisions on Permission Uses in Android Apps
Guosheng Xu 1, Shengwei Xu 2, Chuan Gao 3, * Bo Wang 3, * and Guoai Xu 1
1 School of Cyberspace Security, Being University of Posts and Telecommunications, Beijing 100876, China; guoshengxu@bupt.edu.cn (G.X.); xga@bupt.edu.cn (G.X.)
2 Information Security Research Institute, Beijing Institute of Electronic Science and Technology, Beijing 100070, China
3 National Computer Network Emergency Response Technical Team, Coordination Center of China, Beijing 100029, China
* Correspondence: gc@cert.org.cn (C.G.); wb@cert.org.cn (B.W.)
Received: 3 August 2019; Accepted: 20 August 2019; Published: 5 September 2019
# Abstract
Permission-related issues in Android apps have been widely studied in our research community, while most of the previous studies considered these issues from the perspective of app users. In this paper, we take a different angle to revisit the permission-related issues from the perspective of app developers. First, we perform an empirical study on investigating how we can help developers make better decisions on permission uses during app development. With detailed experimental results, we show that many permission-related issues can be identified and fixed during the application development phase. In order to help developers to identify and fix these issues, we develop PerHelper, an IDE plugin to automatically infer candidate permission sets, which help guide developers to set permissions more effectively and accurately. We integrate permission-related bug detection into PerHelper and demonstrate its applicability and flexibility through case studies on a set of open-source Android apps.

# Keywords
permission; mobile app; permission overprivilege; app developer
# 1. Introduction
Mobile apps have seen widespread adoption in recent years. The number of apps on Google Play surpassed the 2 million mark by August 2019 . As apps become more pervasive, they usually access sensitive data stored on mobile devices, including users’ personal information (i.e., contacts) and data collected via various sensors (i.e., locations) . As a result, it is vital to protect these sensitive data from various adversaries.

The Android operating system provides a permission-based security model to restrict whether an app can access various resources on a smartphone, including sensitive data such as contacts and locations. App developers can declare what permissions the app requires in the Android manifest file, and users will be asked to approve these permissions. However, sometimes, the permission specifications for Android can be quite complicated and confusing to developers because of the large number of permissions and different usages, which will lead to many cases of inappropriate permission requests among Android apps.

For example, some previous studies [7–12] explored the issue of permission gaps, where there are differences between the set of permissions an app requests and the set of permissions it actually uses. These gaps introduced bad consequences on security and privacy of these Android apps. For example, malware can take advantage of the permission differences to achieve their malicious goals.

Appl. Sci. 2019, 9, 3699
Currently, most of the existing studies on permission-related issues have been conducted from the perspective of app users. For example, some approaches [13 – 15] point out security issues due to improper usage of permissions among apps and attempt to detect malware. Others  take a step further to develop tools or modify the operating system so that users can configure their own permission settings. These approaches try to inform app users of potential security and privacy vulnerabilities on permission-related issues and provide them with methods to avoid such problems. However, most of the existing works somehow neglect the other end of the mobile app ecosystem, i.e., the app developers.

We believe that app developers can play an essential role in exploring and fixing these issues. Different from app users, who view permission-related issues as an alert of potential security hazards, app developers view these issues as mistakes they commit during the development phase. As a result, these mistakes can prevent their apps from gaining popularity because they fail to function correctly or inadvertently being classified as malware.

On the other hand, according to existing studies , developers commit those mistakes for both intrinsic reasons (i.e., carelessness) and extrinsic reasons (i.e., incomplete Android API documents). This gives us opportunities to tackle the issues during the development phase, which will help developers avoid these mistakes. Solving these issues in advance will not only benefit the developers, but also benefit app users as the apps they use will be free of permission-related issues. In general, this will benefit the whole app ecosystem.

This paper investigates permission-related issues from a developer’s perspective. In particular, we propose to integrate automated detection and fixing of permission-related issues in an Integrated Development Environment (IDE) to help developers make better decisions on permission use during app development. In order to achieve this goal, we first give a summary of permission-related issues from the developer’s perspective. We find that apart from some widely-recognized issues (i.e., permission overprivilege (an app declares more permission than actually used)), several other issues cannot be ignored among Android apps. For example, permission underprivilege also happens to many apps, which means that they actually use more permissions than they requested. We also find that there are permission-related bugs that might cause the app to crash or function incorrectly.

Based on the summary, we develop PerHelper, a prototype tool designed as a plugin of Android Studio, to help developers make better decisions on permission uses. Built on static analysis techniques, PerHelper is able to infer candidate permission sets, which include required and optional permission sets for each app based on its various source files and libraries. The candidate permission sets can help developers decide which permissions should be included to solve the permission gap issues. Meanwhile, PerHelper is also able to detect and fix the permission-related bugs mentioned above. We conduct case studies on PerHelper with about 100 open-source Android projects to demonstrate its effectiveness and efficiency.

Overall, this paper makes the following main research contributions:
- We present a detailed summary on permission-related issues from the developer’s perspective. The study reveals the prevalence and importance of various permission-related issues and how they can be fixed in the development phase.

- To the best of our knowledge, we are the first to detect the issue of permission underprivilege in Android apps and discuss its possible causes.

- We develop a comprehensive permission analysis, checking, and bug-fixing tool as a plug-in to Android Studio and evaluate it with real-world case studies on open-source Android apps.

# 2. Background and Related Work
In this section, we first give a brief introduction of the Android permission model, discuss the current challenges of research on the permission model, and then analyze the benefits brought by looking at the problems from the developers’ perspective.

# 2. The Android Permission Model
Android uses a permission-based security model to control accesses to system resources. Although the permission enforcement mechanism has evolved from time to time, in general, permissions are required when interacting with system APIs, databases, and the message-passing system when sensitive data on the mobile devices are involved in the process. In order to gain access to these sensitive data, developers must declare appropriate permissions in the Android Manifest file . For example, if an app needs to read the contact information of a smartphone, the developer will need to declare the READ_CONTACT permission (the prefix of standard Android permission name “android.permission.” is omitted throughout this paper). In most cases, developers will refer to the official Android API documentation provided by Google  or use debugging information from IDEs to determine permission declarations, as was shown in a comprehensive survey on app developers.

Several studies have evaluated the effectiveness of the Android permission model. Felt et al.  and Kelley et al.  both conducted surveys on Android users and found that most users do not pay attention to these requests, and even fewer users actually fully comprehend them. On the other hand, studies have shown that even developers are not fully knowledgeable about permissions . A main reason is due to the incomplete or incorrect documentation, where Android API documentation does not mention that a permission is required or the wrong permission is documented.

# 2. Analyzing Permission Usage in Android Apps
Kirin  was the first to use Android permissions to identify dangerous functionalities. It produces a set of permission usage rules and checks whether the requested permissions of an app break the security rules. Barrera et al.  performed permission analysis among a variety of categories of apps in the Android market by mapping an app to a category based on its requested permissions. Permlyzer  leverages the combination of runtime analysis and static examination to analyze fine-grained information of the permission uses. It can identify where a permission is actually used and how the permission is used by analyzing the context of the API calls that trigger the permission check.