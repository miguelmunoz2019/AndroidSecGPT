These vulnerabilities provide privilege to the attackers to gain easy access to the Android device, breach the privacy of the user, exposing the user’s private information to the outside world. Attackers can even initiate Code injection attacks ; they can take control of the system by performing malicious acts like account hijacking , or an attacker can remotely perform malicious activities by linking compromised Dropbox account to the target system . Libraries are an integral part of the .apk file. They are included in the application code to ask for the permissions that are required to run the applications on the system. Third-party libraries hold a significant share in the Android application code (higher than 60%) . Various applications use 20 or more third-party libraries . These third-party libraries included in the source code the request for the permissions. Among these are some permissions that, once granted, can provide open access to the system. The main reason for this can be a lack of consistency between the description of the application and its functionalities. This inconsistency is the result of a large number of permissions requested by the third-party libraries, thus opening a channel for the malicious applications to intrude into the system . The tool called WHYPER is used to analyze this inconsistency. WHYPER is a tool based on Natural Language Processing (NLP); it looks for the sentences in application code that can explain why the application requires the requested permission. It helps in establishing a relationship between the description of an application and the need for the requested permission. For evaluation purposes, WHYPER used a dataset of 581 popular applications and three necessary permissions, i.e., ADDRESS_BOOK, READ_CALENDAR, and RECORD_AUDIO. The reason for using these three permissions was that they maintain the integrity of a critical security resource.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
# Obfuscation
Results showed that WHYPER was able to achieve accuracy of 97% . From a security point of view, it is essential for the Android security mechanism to be able to detect and analyze the library code separately from the application code. There are many techniques available for detecting library code, but, like any other techniques, malware developers can evade them with the help of the code obfuscation method. WuKong , LibRadar , LibScout , AdDetect , and LibSift  are few library detection tools. Analysis of these tools is summarized in Table 4.

Using an updated version of libraries in application code is of prime importance, as most of the security flaws arise because developers often use the outdated version of libraries or they slowly adapt the updated version. This time gap between identification of vulnerability, patch release, and adaptation of that patch is utilized by the attacker for intruding into the system and causing damage to the system. Leisurely adapting the patches is not the only difficulty; the obfuscation technique used by the attacker can help them bypass the security mechanism or the tool used for library detection effortlessly. The most commonly used method for detecting the third-party library is merely looking for the packages inside the library and matching their name with the previously known packages. However, this is not a reliable method and will fail in the case when malware developers use a code obfuscation method like the renaming of the identifier, as in this the method package name that the detector searches will not exist due to renaming . To tackle the problem of code obfuscation, where an identifier name is changed or obfuscated, the malware detectors should use library detection techniques that employ machine-learning approaches.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

P. Bhat and K. Dutta
Example, PEDAL (Privilege De-escalation)  is a tool proposed by B. Liu et al., where the classifier is trained to detect the libraries by extracting features from the library SDKs code and using the information based on the association between the packages. Library detection technique proposed in Reference  consists of a Profile Matching Algorithm. According to the author, it can identify library version, used in the application accurately and can withstand code obfuscation like control-flow randomization or API hiding, as the detection technique is not based on library code but on matching the profiles. These profiles represent the association information of the packages. The proposed Profile Matching Algorithm consists of two parts; in the first part profiles are extracted from the database, which is constructed from original library SDKs and in the second part profiles are compared to find a match for library version. The algorithm assigns scores from 0 to 1, based on finding an exact, partial, or no match. The result shows that the developers adapt to the updated versions of vulnerable libraries very slowly, giving attackers enough time to harm the system and thus putting the user’s privacy at risk of getting exposed.

# 2 Intra-library Collusion
Intra-library collusion  occurs when an individual library obtains a combined set of privileges assigned to multiple applications on a system. It occurs because of the sharing of libraries among several applications, especially third-party applications. Each application in Android has a different set of permissions or privileges assigned to it; since the individual library works as a shared library between multiple applications, it gets access to the entire set of permissions assigned to those applications . Malware attackers are exploiting this security vulnerability as, such flaws allow access to the user’s private information, with the help of the collective privileges, gained by shared libraries. After analyzing 15,000 applications, the .com/facebook library (11%), Google Analytics libraries (9%), and Flurry libraries (6%) were found to be holding a significant share among the libraries that used “Intra-library collusion.” Revocation of privileges is not of much help. It is challenging to detect this flaw, because malicious activity, mostly, does not take place at the user’s end but at the servers belonging to a third party . The security model of an Android operating system does not perform privilege separation in-between applications and their in-built libraries or Ad libraries. The security model of an Android operating system does not perform privilege separation in-between applications and their in-built libraries or Ad libraries. Due to this, all the permissions allowed to an application are by default accessible to its in-built libraries. Sometimes, permissions are added intentionally by developers, to allow these libraries to run smoothly on the system. Some of the libraries especially Ad libraries take undue advantage of intra-library collusion. They require access to the Internet for downloading the content to be advertised. Ad libraries are supported by ad networks, which act as an intermediate between advertising agents and application developers. The Ad libraries, taking advantage of the Intra-library collusion flaw, gain added permissions like being able to access information regarding the location of the user or personal information of the user like International Mobile Equipment Identity (IMEI). The attackers can use the SIM card to access such information, which can help the ad library in extracting information regarding the user. Added permissions give these Ad libraries the privilege to gain access to the stored files in the system, record voice or audio messages or even use the information from other applications installed in the system. Analysis of all this information helps the Ad libraries interpret user’s interest and lure them by fetching and downloading the particular customized content. The purpose of the Ad libraries is to attract users to click the Ads, thereby increasing the number of clicks and hence increasing the revenue. Because of the Intra-library collusion, Ad libraries are proving beneficiary for the advertising industry, analytics, and the malware developers. Malware developers are using this flaw to get into the system and harm the targeted system or fetch private information of the user. Attackers use this information to threaten the user or sell this information for economic profit.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
# 2 Privilege Escalation Attacks
Time and again, attacks exploiting privilege escalation vulnerabilities are reported, that too with a much higher rate. For example, Dirty COW (CVE-2016-5195), well-known privilege escalation vulnerability, was found in the Linux kernel versions 5, 6, and 7. It was exposed in 2016 by the researcher Phil Oester. COW stands for “Copy-on-Write,” used by Linux for reducing the repetition of objects in the memory. For exploiting this vulnerability, one necessary condition is that the attacker must have a connection with the host server. Then, after gaining unprivileged access to the target file, a race condition is created to exploit Copy-on-Write method that allows the attacker to write on the file, which is otherwise available for reading only . The patch for this vulnerability is included in Linux kernel 7 and later versions.