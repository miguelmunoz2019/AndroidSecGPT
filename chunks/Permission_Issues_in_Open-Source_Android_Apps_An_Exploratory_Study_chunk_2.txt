# III. GOAL AND RESEARCH QUESTIONS
The primary goal of this study is to provide a better understanding of permission-related issues introduced and fixed by developers in Android apps. To achieve this goal, we first collect 2,002 Android repositories from F-Droid  and then analyze these repositories using three existing open-source analysis tools: M-Perm , P-Lint , and oSARA . Our research questions are as follows:
RQ1 – What are the most common types of permission-related issues in Android apps? By determining the most prevalent permission-related issues, Android developers can be made cognizant of these issues and devote appropriate efforts to avoid them in their apps. Answering RQ1 will also help researchers gain better insights into the prevalence of permission-related issues in Android apps. While previous work examines permissions-issues on the older install-time model , , , to our knowledge, this is the first study that examines permission-related issues on a large scale on the current Android run-time model.

RQ2 – How long do permission-related issues tend to remain in Android apps across their lifetime? Understanding how long permission-related issues typically exist in the code of Android apps can provide insight into how long introduced issues can be expected to impact the app. Indirectly, answering RQ2 provides an objective indication regarding the priority of developers to locate and address permission-related issues.

RQ3 – How does developers’ status within the project correlate with the introduction of permission-related issues? By determining if a developer’s status within a project significantly correlates with the introduction of PRIs provides
insight on who should be making permission-based decisions and modifications in Android apps. Answering RQ3 can also provide additional insight on whether regular contributors or project newcomers are introducing different amounts of permissions-related issues. This can create the foundation for improving the assignment of code reviews. For example, additional security-oriented reviews may be performed on code authored by developers whose status is more correlated with the introduction of PRIs.

# RQ4 – How does developers’ status within the project correlate with fixes of permission-related issues?
Answering RQ4 provides insight on whether regular contributors or project newcomers fix different amounts PRIs. Here the underlying intuition is that developers with more experience in the project are more adept at fixing PRIs (see Section V-D).

Summarizing, identifying newcomer-specific effects in open-source projects is relatively new , , ,  and it is specially important for better understanding the onboarding process in open-source Android projects  and for helping teams to deal with permission-related issues more efficiently, e.g., via dedicated guidance in the decision making process, practices, and tools.

# IV. DATA COLLECTION AND ANALYSIS
Our data collection and analysis process consists of 3 phases: Repository Collection, Detection of PRIs, and Data Analysis. We first mine the F-Droid catalog to obtain a list of open-source Android apps and perform a set of filtering steps on collected apps. In the second phase we execute the P-Lint and M-Perm tools for statically analyzing apps source code and project files. In the third phase, the results of the static analysis tools are statistically analyzed. Further details of this process can be found in Scoccia et al..

# A. Repository Collection
F-Droid is a catalog of FOSS apps for the Android platform. F-Droid contains links to Android app Github repositories. These projects range from small infrequently updated apps, to large popular apps. We chose F-Droid as our primary source for open-source Android projects due to the diversity of apps in its catalog and for its use in prior research works , , . To retrieve the project repositories of the cataloged apps, we first cloned the F-Droid repository and then parsed the text files associated with each app to extract the apps’ metadata. Extracted metadata includes name, description, category and repository URL of each app. We then clone the GitHub repository of all the apps. In order to avoid duplicates, we exclude apps from our dataset that were duplicated/forked by ensuring that all source URLs and commit log SHA’s are unique. After cloning the repositories, we extract the following data from each of them:
- Commit Log Details. Using Git’s commit log1, we retrieve additional data associated to each commit, such as the author and committer of the commit, their respective timestamp, and the commit message.

- Affected Files. For each commit of all apps, we examine the list of affected files and extract the revision of all the *.java and AndroidManifest.xml files.

As shown in Figure 1, we mined a total of 2,002 GitHub repositories. Since we used GitHub repositories, we ran the risk of including inactive or unmaintained repositories in our study . To help mitigate this risk, we consider only repositories that (i) have a lifetime span2 of at least 8 weeks, (ii) contain at least 10 commits, (iii) with at least one commit since January 2017 and (iv) also published on the Google Play store. The 10-commits threshold is derived from the fact that 90% of all considered repositories have more than 10 commits before this filtering step. The 8-weeks threshold is derived from the fact that 8 weeks is the average development time for an Android app  and has been used in a previous study on mining GitHub repositories of Android apps . The January 2017 rule has been adopted to filter out unmaintained apps, without removing apps that are seldom updated. We excluded apps that were not published on the Google Play store to filter out unfinished or proof-of-concept apps. This filtering results in a final dataset of 574 active repositories, containing a total of 502,907 commits performed by 7,945 unique developers.

**Demographics of apps included in the study (SD = standard deviation, IQR = inter-quartile range)**
Table I provides a summary of the demographics for apps included in the study. As demonstrated, apps in our dataset have a median rating on the Google Play store of 4 (out of a maximum of 5), while the median number of installs3 is 10k. The median number of commits for apps in our study is 260, and the median number of committers per app is 7. Based on these numbers, we are reasonably confident that the apps considered in our study are of good quality and adequately representative of real-world projects.

32 Lifetime span: the range between the first and last commits of a repository.

3 Google Play does not provide the precise number of installs, but only a range (i.e., 100-1000). We conservatively adopted the bottom of the range. Hence, all statistics on installs should be considered as a lower bound.

# B. Detection of PRIs
We used the existing M-Perm  and P-Lint  tools to detect permission-based issues in Android apps. Although both tools have been used in foundational studies , , we decided to further evaluate them prior to including them in our own research. Other permission analysis tools, such as Stowaway  and PScout , have been used in existing literature to conduct permission analysis. However, a direct comparison with these tools was unfeasible, as both are several Android versions out of date and neither is compatible with the current run-time permission model.

# Tool Evaluation
We evaluated M-Perm and P-Lint using several oracle Android apps. These include minimal calendar, camera, SMS messaging, contact storage and location recording apps. We then created multiple versions of these apps, and injected PRIs into them with the goal of covering numerous possible cases in which a PRI may occur. We then ran M-Perm and P-Lint on each of these app versions, identifying all TP, FP, FN and TN for PRIs. Both tools obtained a precision and recall value of 1. Although largely elementary, these results provided confidence in the ability of these tools in our study. The oracle apps are available on the project website . Although both tools used in our study are able to decompile and analyze apk files , , decompilation was not performed as the source code for subject apps was readily available. In this analysis we created our own apps to provide a greater amount of confidence that we were aware of all PRIs in this oracle, whereas manually identifying PRIs in existing apps would have been a time-consuming and largely imperfect task.

After the successful analysis of these tools, we used them to analyze all 502,907 commits belonging to the 574 apps in our dataset. These tools enabled us to identify a variety of permissions-based issues, ranging from not correctly adhering to the permission standards proposed by Google , to more severe issues such as over-permissions.

# Table II: Permission-related issues detected in this study
Android apps since we were able to easily collect and reverse engineer a large set of Android apps, something that would not be easily accomplished with iOS apps due to a lack of available tools and available apps.