- Link Attack. Parallel Space is the only framework which is not affected by the relative attack. However, we find it vulnerable to another kind of attack. The malware can create a link file which points to targeted external file (e.g., using command ln -s la /data/data/Parallel Space/parallel/0/Facebook to create a link to the Facebook directory in Parallel Space). Since this link file (la) is stored in the directory of the malware, the accessibility check passes, although it actually points to an unauthorized location.

Information leakage in system services. Revealed by our experiments, 30 of the tested frameworks lack access controls to restrict the queries to the system services. Thus, malware can steal the data of other virtualized apps. For example, Twitter stores the user credentials in a system service AccountManagerService. Any customized app can query this service to get all the account information stored in it, which leads to account leakage of Twitter users.

Abuse the private app components. In 30 of the tested virtualization frameworks, malware can easily access the private components of other apps. Thus, all the data in these private components are leaked to attackers. For example, Firefox uses a private content provider to store the browser histories and bookmarks of its users. Attackers can query this component using a specific URI Uri.parse("content://org.mozilla.firefox.db.browser/"), which actually leaks all the sensitive user data in this content provider.

Monitor other processes through shell commands. To prevent sensitive information leakage and side-channel attacks, Android restricts the usage of shell commands (e.g., logcat, ps and top).

Proc. ACM Meas. Anal. Comput. Syst., Vol. 3, No. 1, Article 17. Publication date: March 2019.

17:10 L. Zhang et al.

Commonly, these commands can list the runtime information of the foreground processes. For example, some apps (i.e. TP-Link) log user credentials in plain text. Utilizing these commands, existing work shows that malware can launch targeted phishing attacks . Unfortunately, 29 of the 32 tested virtualization frameworks do not restrict these commands. Thus, every app in virtualization frameworks can monitor other processes by utilizing these shell commands.

Abuse socket. Android apps use private sockets to communicate with different processes or remote servers. However, 26 of the tested frameworks do not enforce effective protections to them. That is, all our tested sockets are exposed to attackers. For example, our penetration test sample can read or write data in the socket of a popular VPN app openVPN in virtualization frameworks. Besides, each socket domain can be bound by only one app. Thus, an attacker can preemptively bind to the socket domain of other apps and conduct DoS attacks.

# 3 Case study: several demonstrations
We conduct several exploitation demos to illustrate the real-world damage of the vulnerabilities introduced before. The demonstration videos are available on YouTube (https://youtu.be/Mk_ZISSitow), and the details are introduced below:
# Abusing Facebook account
Facebook is a popular social app with numbers of users. Using its Android app, users can manage their contacts, share their photos with friends or record their daily life. To ease the usage of Facebook, it manages a token as the certificate of each login transaction. The token is generated by the Facebook server, and stored locally by the client-side app.

The login token is stored in the local directory (/data/data/Facebook/) of the Facebook app. Normally, thanks to the isolation mechanism of Android, an app can only access its own local storage. However, our studies show that this access control mechanism does not work on virtualization frameworks. Thus, we write a demonstration app which dumps all the local files of Facebook, and sends them to our remote server. In this server, we run an Android emulator, and pre-install the Facebook app. After the server receives the dump files from the victim, it replaces the login token of its local Facebook app with the token stolen from the victim. As a result, our remote server can login Facebook as the victim, and abuse its account (i.e. steal chatting history or send messages). The victim is unaware of the attack because Facebook allows an account to be logged in from multiple devices simultaneously.

# Phishing attacks to in-app billing
In-app billing is a common feature of Android apps. Users usually bill in apps to enjoy the advanced functionalities. To the best of our knowledge, no existing phishing attack targets in-app billing, because in Android, it is hard for attackers to know when the in-app billing starts and to hijack the billing activity. However, these restrictions are not in effect within the virtualization frameworks. Our demonstration attack targets a popular wallet app (AliPay). The attack can be easily ported to other apps.

To conduct the phishing attack, our demonstration app runs a background service that monitors when the AliPay starts. Specifically, it obtains the foreground app information by calling the interface getRunningProcessInfo() of a system service ActivityManagerService. By continuously monitoring this interface, our app can be notified when the AliPay starts up. Then, we pop up a transparent phishing window to cover the top activity. This window can capture the user inputs (password for payment), and send them to our remote server.

# Leaking chatting history
WeChat is a widely used chatting app in China. To protect the chatting history, WeChat encrypts these data and stores them in a private database of its internal storage. Like other local storage data, Android isolation mechanisms prevent the chatting history of WeChat from being stolen.

Proc. ACM Meas. Anal. Comput. Syst., Vol. 3, No. 1, Article 17. Publication date: March 2019.

# App in the Middle
Due to the weakness of virtualization frameworks, our demonstration app can directly obtain the encrypted chatting history. Besides, WeChat open-sourced their encryption algorithm, which uses user account information and device information to generate an encryption key. We read the SharedPreference of the WeChat to get the account information of the user and query the device information from the Android system services. Then, based on the encryption algorithm, we compute the encryption key, and use it to decrypt the chatting history. Finally, we obtain all the user chatting history in plain text.

Steal/forge user email. Gmail is a popular email service developed by Google. Its Android app uses a content provider (com.android.email.provider.EmailProvider) to store user sensitive data such as login credential and email history. To protect this content provider, Gmail defines a signature level permission (com.google.androidgm.email.permission.ACCESS_PROVIDER), which only can be granted to apps signed with Google’s certificate. However, our experiment shows that within virtualization frameworks, this content provider can be arbitrarily accessed by any other virtualized apps. As a result, attackers can query this content provider to obtain the email history of a Gmail user. More severely, attackers can also forge a fake email as the victim, and send it to his/her friends, conducting phishing attacks. Figure 4 illustrates a code example for forging a fake email.

1 ContentValues values = new ContentValues () ;
2 values . put (" fromList " , " Bob@gmail . com ");
3 values . put (" toList " , " Alice@hotmail . com ");
4 values . put (" snippet " , " Hello , Alice - from : Bob ");
5 values . put (" displayName " , " Bob ");
6 ... ...

7 Uri uri = Uri . parse (" content :// com . google . android . gm . email . provider / message ");
8 ContentResolver resolver = getContentResolver () ;
9 resolver . insert ( uri , values );
# 4 SEVERENESS OF VULNERABILITIES
To better understand how malware can attack the virtualization frameworks and virtualized apps, we systematically study the ecosystem of app virtualization. To be specific, our study proceeds from two perspectives: first, we study what kinds of apps are actually executed on virtualization frameworks by Android users. The result reveals the real-world attack surface of app virtualization. Second, we study how apps are launched and used in virtualization frameworks. This experiment shows how malware can be distributed. Finally, we provide real-world case studies and proof-of-concept exploitations to demonstrate the attack scenario in our anonymous video: https://youtu.be/Mk_ZISSitow. Our study unveils a complete exploitation scenario: a malware can be installed and launched in an app virtualization framework (§4), utilizes the vulnerabilities of the underlying virtualization framework (§3), and attacks the benign Android apps residing in the framework (§4).

# 4 Understanding the attack surface
To understand the attack surface, we first study what kinds of apps are executed on virtualization frameworks. To achieve this, we design an experiment based on the observation that user reviews illustrate the usage scenarios of apps. Thus, our experiment proceeds in three steps. First, we crawled user reviews of the top ten studied frameworks from Google Play. Despite the non-English
Proc. ACM Meas. Anal. Comput. Syst., Vol. 3, No. 1, Article 17. Publication date: March 2019.

L. Zhang et al.