# 2) MULTIMEDIA DATA TRANSMISSION
Multimedia content in the m-health apps could be classified into the following categories: i. multimedia content the app needs in order to be functional and aesthetically pleasing to the user, ii. multimedia content a user submits in the process of creating his/her account, e.g., his/her photo, and iii. multimedia content the app requests for health related purposes, e.g., scans of x-rays images. Although in the first case a possible transmission seems innocent, as personal data are not involved, still an eavesdropper can very easily monitor the content and reach conclusions about the nature and the scope of each app a user installs or uses. In the second and third cases, however, the data under process concern sensitive personal data. Our experiments showed that a number of apps, in addition to the transmission of text data over the network, disseminate user submitted multimedia files closely related to his/her health condition without always providing the necessary protection security mechanisms. Also, the majority of these apps do not transmit their core multimedia content over the HTTPS. More precisely, 20% of the apps ask users to submit personal photos (from categories ii and iii). Only half of those send health-related multimedia content over HTTPS for all of their transmissions, whereas most of the spread multimedia content (N = 3) was transferred to third.

VOLUME 6, 2018 9395
# A. Papageorgiou et al.: Security and Privacy Analysis of Mobile Health Applications
# 5) EMAIL AND DEVICE ID TRANSMISSION
According to our tests, while 75% of the apps transmit user email addresses to at least one of their connected domains, 33% of those apps use an insecure connection for this transmission to at least one of their connected domains, and 60% of those apps share users’ emails addresses with third parties. Moreover, one of these apps transmits user’s email address to an unknown IP whose owner couldn’t be identified.

Regarding device identifiers, we searched for unique IDs related to the device used in our experiments. More specifically, we searched for the IMEI, the GSF ID and the Secure ID and, we found that 45% of the apps transmit at least one of the device’s unique IDs to at least one of their connected parties’ cloud-based solutions. Moreover, most multimedia links provided by the apps were static links, which is a major privacy issue . Yet, only 44% of these apps make use of HTTPS. Based on our experimental results, we observe that each time a domain requests one of the GSF ID or the IMEI, the app sends also the Secure ID. Further, 89% of these apps shared their users’ device Secure ID with third parties. Thus, by snooping and uniquely binding the device unique ID to an individual, users’ sensitive health data privacy may be compromised.

# 3) LOCATION PRIVACY
Seven of the analyzed apps requested and transmitted location information, that under certain data protection regulations is considered, not only personal, but sensitive as well. The findings about transmitted users’ location information are shown in Table 5. More precisely, 35% of the apps transmitted users’ geolocation information or their postal address either to their vendors or to third parties. Moreover, 4 of the assessed apps send their users’ location to 5 distinct third party domains, while 3 of them are doing so over HTTP. Furthermore, our analysis showed that 5 out of the 7 apps that transmit users’ location ask for it with a GET request. Especially, one of the apps, although did not offer any special geolocation service to its users, two of its third party ad services asked for users geolocation at a rate of almost one request every 3 seconds within a timeframe of approximately 12 minutes. Apart from draining the battery, the app transmitted the user’s location to third party domains over HTTP connections via GET requests. Figure 4 shows an example of a GET request that leaked location information (latitude, longitude) over HTTP.

# 6) USERS’ SEARCH QUERY PRIVACY AND OS TYPE
Based on our findings, 25% of the apps are found to transmit users’ search queries over the network, but only 20% of these apps use a secure connection (HTTPS) when doing so. While all the apps transmitting search queries send them to their vendor’s domain, 80% of them send this information to third parties as well, and two apps send their users’ queries to 16 different third party domains. The most dangerous behavior, though, is that all of these apps are found to transmit users’ search queries by using the GET request. As expected, it is more than easy for an eavesdropper to collect this information and infer user’s health condition. Moreover, our examination revealed that the information of the OS type was transmitted at least once to at least one domain per app and at least one of the connections was insecure. As a result, an eavesdropper could easily figure out whether a user makes use of an Android device and, in most of the cases, the version of the device software. This could lead to privacy issues when a user makes use of an app, e.g., within a specific place or area, because an eavesdropper having access to the same area can easily match the logs of his activity with the user.

# 4) USER’S REGISTRATION AND LOG IN SECURITY
Many of the m-health apps required a profile to be created and, in many cases, a password as well. We focused on examining each app’s registration and login security. Therefore, we captured the registration process and we repeatedly tested the login procedure of each app in order to check: whether the app transfers its user login data over the HTTP, and whether the app requests user login data via GET requests. The outcome of this analysis revealed that 55% of the apps asked for and transmitted users’ passwords, while 27% of those do not use a secure connection (HTTPS) for its dissemination. Also, 45% of the apps that transmit users’ passwords used GET requests, which is not considered a good practice in terms of security.

# 7) CHAT SESSIONS TRANSMISSION
Chats are not very common within the analyzed m-health apps. Nevertheless, we had the opportunity to test two apps.

# A. Papageorgiou et al.: Security and Privacy Analysis of Mobile Health Applications
offering this function. Our results indicate that an insecure chat implementation can lead to several privacy risks for all its participants. One major issue is the non-use of HTTPS connections. Additionally, insecure database queries can lead to unnecessary transmission of personal, sensitive and health information even together in only one request. Figure 5 shows a part of a response we collected through a GET request over HTTP. The request, in addition to leaking private information from the user, discloses data from other users participating in the chat. More specifically, the request leaks email addresses, passwords, names, images and health related questions. For privacy reasons we have blinded out part of the users’ sensitive information in Figure 5.

# D. SSL WEB SERVER CONFIGURATION
In the fifth step of our methodology we analyzed the web server configuration to determine the security level of HTTPS data transmission. In order to analyze the SSL web configuration of each captured domain, we used the SSL Server Test service from Qualyss SSL labs. This service tests and rates the SSL web server configuration of each domain with a letter grade scale (A, B, C, D, E, F, M, T). Tests include: i. the assessment of the certificate to verify that it is valid and trusted, ii. the inspection of the server configuration in three categories: a. protocol support, b. key exchange support and c. cipher support.

We divided our findings into HTTPS connections to domains that are owned by the apps’ vendors and HTTPS connections to third party servers. The number of HTTPS connections to servers owned by vendors for each app per SSL grade result is presented in Table 6. Apps that do not establish at least one HTTPS connection to its vendor’s server are excluded from the table. Additionally, the number of HTTPS connections to third parties for each app per SSL grade result is presented in Table 7. Moreover, the total number of HTTPS connection for each data category per SSL grade result is presented in Table 8.

# E. RESPONSE TO OUR SECURITY AND PRIVACY REPORTING
As described in our methodology’s final step, we provided each app vendor with a report of our findings using the vendor’s email address provided in Google Play. By the date we performed our re-evaluation process, one of the apps had been withdrawn from the Google Play and therefore, from now on, we do not include it in our tests and results.