# 2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)
# AndroCT: Ten Years of App Call Traces in Android
Wen Li
Washington State University, USA
li.wen@wsu.edu
Xiaoqin Fu
Washington State University, USA
xiaoqin.fu@wsu.edu
Haipeng Cai
Washington State University, USA
haipeng.cai@wsu.edu
Abstract—Data-driven approaches have proven to be promising in mobile software analysis, yet these approaches rely on sizable and quality datasets. For Android app analysis in particular, there have been several well-known datasets that are widely used by the community. However, there is still a lack of such datasets that represent the run-time behaviors of apps—existing datasets are largely static, whereas run-time datasets are essential for data-driven dynamic and hybrid analysis of apps. In this paper, we present AndroCT, a large-scale dataset on the run-time traces of function calls in 35,974 benign and malicious Android apps from ten historical years (2010 through 2019). These call traces were produced by running each sample app against automatically generated test inputs for ten minutes. Moreover, each app was exercised both on an emulator and a real device, and the traces were separately curated. AndroCT has been used to build a novel dynamic profile of Android apps that has enabled several effective techniques and informative empirical studies concerning Android app security. We describe what this dataset includes, how it was created and stored, and how it has been used in past and would be used in the future.

Index Terms—Android apps, dataset, function calls, tracing
# I. INTRODUCTION
The open nature of Android embraces framework-based app development and supports rapid reuse-based creation of user apps that provide ever-enriching functionalities. Meanwhile, the openness of Android contributes to the rise of varied challenges to developing, maintaining, and securing Android apps. For instance, accompanying the popularity of Android have been tremendous security threats and attacks targeting this dominant platform, resulting in the proliferation of security threats in the Android ecosystem . Also, their peculiar behavioral traits and programming practices lead to unique difficulties in testing and debugging Android apps –.

In response, researchers have developed techniques  for and conducted studies – on Android apps to better assure their quality. Among others, data-driven approaches have gained great momentum, including learning-based app classification – and bug fixing based on extracting behavioral patterns from known examples/samples , . Essential to these technical approaches is the availability of a sizable and informative dataset. Such datasets can also serve as an immediate basis to empirical approaches that mine new insights about apps. Several datasets (e.g., Malgenome , Drebin , AMD , RmvDroid , and AndroZooOpen ) have been curated and made publicly available. Especially, the AndroZoo project  offers a continuous service collecting millions of apps from a variety of sources. These efforts have enabled a growing number of techniques and studies that advanced our knowledge about the Android ecosystem.

Meanwhile, existing publicly available datasets on Android apps have one or more of the following shortcomings.

- First, the majority of them are exclusively focused on malware, as mainly motivated by the need for developing security defense solutions (e.g., malware detection and categorization). Thus, these datasets are not sufficient for techniques/studies that require data on benign apps.

- Second, most of them just provide the apps themselves, with a few others including metadata (e.g., AndroZoo, RmvDroid), but they do not provide derived data (e.g., code traits of apps) that would require substantial computation costs to generate. Thus, techniques/studies that need the derived data would incur the costs repeatedly.

- Third, existing datasets are largely static (e.g., describing the app code), including no information about the run-time behaviors of apps. These datasets are thus not sufficient for dynamic techniques/studies.

- Fourth, most current datasets span a relatively short range of time—for instance, 4 years with RmvDroid, 3 years with Malgenome, and 1 year with Drebin. Thus, these datasets may not be sufficient for a longitudinal, evolutionary study (which would need to examine datasets spanning a much longer period of time). A few datasets, such as AMD and AndroZoo, do span more years but still they are static in nature.

To complement existing datasets on Android apps and to overcome their shortcomings as stated above, this paper presents AndroCT, a large-scale longitudinal dataset of 35,974 Android apps from ten years (2010 through 2019). In addition to reflecting an evolutionary perspective in sampling the Android app population, our dataset includes not only the benchmarks themselves but more importantly a major type of data on run-time app behavioral characteristics—the trace of calls to any functions in an app, including functions in exception-handling constructs and those invoked through reflection. Each app trace was generated by running the app against randomly generated run-time inputs for ten minutes, and was ensured to cover the majority of the app’s code.

It is well known that Android apps, especially malicious ones, can exhibit different behaviors across different run-time environments (e.g., emulators versus real devices)—for instance, anti-dynamic-analysis malware can hide their malicious/suspicious behaviors when they detect that they are.

running on an emulator. Considering these differences and the research value of enabling deep understanding of such differences, we further collected call traces of each app on both an emulator and a real Android device with the same Android platform version, for the same length of time and same run-time input coverage criteria. The entire AndroCT dataset took over 12,000 net machine-hours to produce on high-performance servers with large memory. AndroCT also includes two reasonably balanced subsets: one for 18,277 benign apps and the other for 17,697 malicious apps.

While typically only the original/raw datasets are necessary and derived data should be computed on demand, we aim to share our app execution traces as a dedicated kind of dataset in order to save the time that would be incurred by a purely dynamic or hybrid technique/study that needs these derived data. By doing so, our vision is that this dataset would boost the research on dynamic or hybrid technical and empirical app analysis. Not only is our dataset useful for developing data-driven approaches to app testing, debugging, and security analysis, it also opens doors for knowledge discovery about app run-time behaviors through empirical studies.

A peculiar merit of AndroCT lies in its inclusion of both emulator-based and real-device-based collections of dynamic call traces of a large number of apps—not only can each collection serve respective needs (e.g., emulator-based dynamic malware detection versus on-device real-time malware detection), the differences between these two collections are highly valuable for anti-dynamic-analysis malware defense research. For instance, a learning-based approach can developed using AndroCT to detect whether an app has evasive behaviors. Although function calls do not give the full spectrum of an app’s run-time profile, they do provide a useful way to understand and model app behaviors.

Another value of our dataset comes from its longitudinal construct. AndroCT contains the call traces of apps from ten different years, a span of a non-trivial length to suffice for studying any of the above-mentioned app behavioral traits and security properties in an evolutionary perspective. In particular, both the differences between malware and benign apps, and those between emulator-driven and real-device-driven calling relationships in apps, may form the basis of various insights into sensitive, malicious, and evasive behaviors of apps.

The originality of AndroCT is three-fold. First, the entire dataset has never been used before. Relevant prior works only used part of the datasets, corresponding to the apps of years 2010 through 2017, and used that part in one way—through a particular behavioral profile defined by a specific set of metrics of the function call traces. Second, the entire dataset has never been comprehensively described and documented as in AndroCT, especially in terms of the inclusion of both emulator- and real-device-based traces. Third, we are not aware of any prior open dataset focusing on dynamic, derived data of apps based on function call traces, despite the presence of a number of benchmark suites and static datasets. To the best of our knowledge, AndroCT represents the first longitudinal Android app dataset on the dynamic call traces of both benign and malicious apps for as long as ten years. The AndroCT dataset has already been made publicly accessible at https://zenodo.org/record/4470320#.YBEtnehKhPY.