# Enhancing Trustability of Android Applications via User-Centric Flexible Permissions
# Gian Luca Scoccia, Ivano Malavolta, Member, IEEE, Marco Autili, Amleto Di Salle, and Paola Inverardi
Abstract—The Android OS market is experiencing a growing share globally. It is becoming the mobile platform of choice for an increasing number of users. People rely on Android mobile devices for surfing the web, purchasing products, or to be part of a social network. The large amount of personal information that is exchanged makes privacy an important concern. As a result, the trustability of mobile apps is a fundamental aspect to be considered, particularly with regard to meeting the expectations of end users. The rigidities of the Android permission model confine end users into a secondary role, offering the only option of choosing between either privacy or functionalities. In this paper, we aim at improving the trustability of Android apps by proposing a user-centric approach to the flexible management of Android permissions. The proposed approach empowers end users to selectively grant permission by specifying (i) the desired level of permissions granularity and (ii) the specific features of the app in which the chosen permission levels are granted. Four experiments have been designed, conducted, and reported for evaluating it. The experiments consider performance, usability, and acceptance from both the end user’s and developer’s perspective. Results confirm confidence on the approach.

Index Terms—Android permissions, static analysis, trustability
# 1 INTRODUCTION
THE Android market is experiencing an explosive growth in the last years. It is the smartphone OS market leader among all age segments in the US, UK, and other countries . People rely on Android mobile devices for surfing the web, purchasing products, or to be part of a social network. Represented by the well known Google Play Store, the Android apps market now counts more than two millions apps, downloaded billions of times per year.

In this landscape, the Android permission model plays a key role, given the constant need of mobile apps to access sensitive and private information of end users , , , to the point that consumers have to choose between lower prices and more privacy protection , . The Android permission model can influence the success of mobile apps as well. Indeed, a recent empirical study found that privacy-aware users with negative concerns on an app’s runtime permissions tend to give negative reviews to the whole app, thus confirming the importance of how permissions are managed for the success of Android apps.

G.L. Scoccia, M. Autili, A. Di Salle, and P. Inverardi are with the Department of Information Engineering, Computer Science and Mathematics (DISIM), University of L’Aquila, L’Aquila, AQ 67100, Italy. E-mail: {gianluca.scoccia, marco.autili, amleto.disalle, paola.inverardi}@univaq.it. I. Malavolta is with the Department of Computer Science, Vrije Universiteit Amsterdam, Amsterdam 1081, HV, The Netherlands. E-mail: i.malavolta@vu.nl.

Manuscript received 8 Jan. 2019; revised 15 July 2019; accepted 8 Sept. 2019. Date of publication 19 Sept. 2019; date of current version 15 Oct. 2021. (Corresponding author: Gian Luca Scoccia.) Recommended for acceptance by X. Zhang. Digital Object Identifier no. 10/TSE
The current Android permission model suffers of a number of rigidities related to, notably, the granularity level of the permissions, the timing at which permissions are granted, the fact that the permission model considers all users as equal , . On the one hand, this lack of flexibility may have a negative impact on the success of a mobile app; on the other hand, it neglects the rights of the user to fully express her desires and exert her control on how and by whom her data are used. According to a survey conducted among adult Americans , 91 percent of participants believe that consumers have lost control over how personal information is collected and used by companies, and that most participants would like to do more to protect their personal information.

In this paper, we propose Android Flexible Permissions (AFP), a user-centric approach to flexible permissions management aimed at empowering end users to play an active role with respect to Android permissions. AFP embraces the European vision of next generation internet, more human-centric and concerned with privacy protection by giving control back to users . End users are allowed to specify and customize fine-grained permission levels on private or sensitive resources, according to their own subjective privacy concerns, risk taking attitudes and sense of trust. AFP leverages a novel permission model through which fine-grained app permissions are specified on a per-feature1 basis.

Differently from the current Android permission model, AFP empowers end users to selectively grant finer-grained permissions by specifying (i) the desired permission levels2
1. Building on the definition provided in the Software Engineering Body of Knowledge , the term feature is used to denote a functionality offered by the app to the user.

2. The granularity at which a sensible resource/data can be accessed.

# SCOCCIA ET AL.: ENHANCING TRUSTABILITY OF ANDROID APPLICATIONS VIA USER-CENTRIC FLEXIBLE PERMISSIONS
2033
(e.g., access to the contacts list can be granted to all contacts that do not belong to specific circles of people like relatives or close friends), and (ii) the features of the app in which the specified permission levels are granted (e.g., access to the relatives circle in the contacts list can be granted only during the usage of the video call feature in a messaging app). AFP offers a dedicated external mobile app for managing flexible permissions.

From the developer’s point of view, AFP enables apps to support user-defined permission levels with very limited additional effort. Developers can work on their mobile apps as usual, without using any additional library or tool. In order to use AFP, a developer is provided with automatic support by the AFP Web application that (by means of a guided workflow) allows to (i) define the features offered by the mobile app; (ii) map each feature to the components that implement it, i.e., Android activities, services, broadcast receivers, or content providers. Given the feature-component(s) mappings, AFP leverages static control-flow analysis for automatically retrofitting the app so to make it able to handle fine-grained and feature-based permission levels.

We evaluated AFP by designing, conducting, and reporting four independent experiments aimed at empirically investigating on key aspects of AFP. Specifically, we assessed the performance of the AFP instrumenter via 1,277 real-world apps, the performance at runtime of 7 AFP-enabled real-world apps, the usability and acceptance of AFP for both end users and developers (involving 47 and 11 subjects, respectively).

The main contributions of this paper are:
1. an in-depth discussion of the characteristics and challenges of the Android permission model;
2. the definition of a new flexible permission model for Android apps;
3. the definition of an approach that empowers end users to specify and enact flexible permissions for Android apps;
4. a publicly available implementation of AFP using a combination of Java and Web technologies;
5. the results of the empirical evaluation of AFP, and a complete replication package for independently assessing and replicating the aforementioned experiments.

An initial version of this work appeared as a poster paper at the 2017 ACM/IEEE International Conference on Software Engineering. The new contributions of this journal version include: the precise definition of the AFP permissions data model, the app features specification and mapping mechanism, the algorithm for automatically instrumenting Android apps in order to make them AFP-enabled, and its implementation and technological aspects. Another completely new contribution of this paper is the empirical evaluation of AFP, for which we designed, conducted, and reported 4 independent experiments about its performance, usability, and acceptance from the perspective of both end users and developers. This paper also includes a thorough discussion of related work.

The remainder of the paper is structured as follows. Section 2 discusses in details the problem we want to solve and motivates our research. Section 3 presents the AFP approach, and Section 4 describes its implementation.

# 2 THE NEED OF A NEW PERSPECTIVE
In this section, we first analyze the evolution of the Android permission system by discussing the issues of both the older install-time permission system (Section 2) and the most recent usage-time permission system used by the latest Android releases (Section 2). Then, in Section 2, we discuss the need of a new perspective according to which users must be given the possibility of specifying their own rules on how sensitive resources should be accessed by apps.