# 6 Learned Lessons and Future Work
We analyzed 1,235 Android-related vulnerabilities from five different perspectives: (i) the types of the vulnerabilities and their hierarchical relationships; (ii) the most frequent CVSS vectors that describe the vulnerabilities; (iii) the layers and components from the Android software stack impacted by the vulnerabilities; (iv) the survivability of the vulnerabilities (i.e., the time required to fix a vulnerability since its introduction); and (v) the evolution of vulnerabilities across the Android OS history. To the best of our knowledge, this is the largest empirical study of Android OS vulnerabilities not only in terms of vulnerabilities but also in terms of aspects analyzed in the vulnerabilities dataset. Compared to previous studies on Android OS vulnerabilities such as Jimenez et al. (2016) and Linares-Vásquez et al. (2017) there is an increase of +1193 and +575 respectively, in the number of analyzed vulnerabilities. Moreover, ours is the first study that analyzes the evolution of the vulnerabilities and the features of the top CVSS vectors.

In terms of findings, while Jimenez et al. (2016) report that Android OS vulnerabilities are rooted on incorrect implementation of features and incorrect handling of authorization and input, our study — with a more comprehensive taxonomy — shows a diverse set of issues at different granularity levels such as permissions, privileges, and access control, weaknesses that affect memory, data handling, and improper check or handling of exceptional conditions. Also, Jimenez et al. (2016) reported the vulnerable Android OS.

# Empirical Software Engineering (2019) 24:2056–2101
components for the 42 vulnerabilities but in terms of the roles/features provided by the components; in our case, we report the most vulnerable OS layers and internal components, which provides a more detailed view of the OS internals that require more attention from the Android OS developers in terms of security. Jimenez et al. (2016) also analyzed the type of changes in the patches at statement level (e.g., add if-then-else). We report in this study the changes organized by higher level categories (see Fig. 7).

# The main findings of our study can be summarized as follows:
1. Most of the Android OS vulnerabilities are related to improper access control, improper restriction of operations in the bounds of memory buffers, issues processing data (e.g., numeric, type, and string errors), and improper input validations (from RQ1).

2. Most of the vulnerabilities (at least 69%) are exploitable remotely and do not require authentication of the system; in addition, in at least 53% of the vulnerabilities there is total disclosure of the system files, total compromise of the system integrity (i.e., the attacker is able to modify any file NIST 2015), and there can be a total shutdown of the affected resource or of the complete system (from RQ2).

3. The kernel and the native libraries layers are the ones most affected by the vulnerabilities (82% of the analyzed vulnerabilities impact these two layers). Kernel drivers and the media framework are the top affected subsystems (from RQ3).

4. A vulnerability remains unnoticed in the system for 770 days, on average (considering the conservative model) before being identified, possibly exploited, and then fixed (from RQ4), without considering those vulnerabilities that are neither discovered nor reported.

5. The number of reported vulnerabilities has been increasing since 2015. It is clear that the kernel layer has kept a continuously increasing tendency in the number of reported vulnerabilities since 2015. Moreover, the vulnerabilities in the categories permissions, privileges, and access control, weaknesses that affect the memory, and data handling categories are the top-3 in terms of increasing tendency since 2015 (from RQ1).

Based on the aforementioned findings, researchers and practitioners should invest in designing approaches and implementing processes for the early detection of vulnerabilities in the Android OS. As presented in Section 2, there is a plethora of approaches and tools for detecting vulnerabilities at the Applications level; however, little effort has been devoted to the identification of vulnerabilities at the Android OS level. This study is a first effort to present the magnitude of the problem and a potential research/action agenda aimed at reducing not only the volume of vulnerabilities in the Android OS but also their impact and survivability. In particular, based on the main findings of our study, we propose the following set of actions:
1. Our findings indicate that third-party hardware drivers are the components with most of the vulnerabilities in the Android OS, thus suggesting the need to strengthen verification & validation tasks. The usage of automated vulnerabilities detection tools could be enforced as part of the continuous integration pipeline before committing to the AOSP repository.

2. We showed that Android vulnerabilities survive for long time in the code base. This stresses the importance for researchers to invest effort in the development of automatic vulnerability detectors tailored for the mobile world. The taxonomy of vulnerabilities presented in this paper can be used as a reference for the definition of the types of vulnerabilities such detectors should target. In terms of efforts prioritization, the
Empirical Software Engineering (2019) 24:2056–2101
Implementations can be focused on providing detectors for (i) the vulnerabilities in the most impacted layers (i.e., kernel and native libraries), (ii) the vulnerabilities belonging to the top CVSS vectors reported in this paper, or (iii) the most frequent vulnerability types we found. The design and implementation of effective vulnerability detection tools for mobile OS/apps is part of our future research agenda, in particular the ones for detecting vulnerabilities in the permissions, privileges, and access control and weaknesses that affect the memory categories.

# 3.

The manual analysis of the patches implemented to fix the vulnerabilities highlighted as many of them can be easily addressed with simple code transformations, for example by adding pre-condition checks (e.g., boundary and null checks), or by properly handling permissions in the manifest files. Given the wide availability of data in code sharing platforms such as GitHub, researchers could apply advanced machine learning techniques such as Deep Learning to automatically “learn” and apply these code transformations, similarly to what has been recently done by Tufano et al. (2018) for automatic bug-fixing. The authors showed that a Neural Machine Translation (NMT) model can automatically learn from real bug-fixing activities how to fix bugs in the same way as humans do. The model works in 9% of real buggy code provided as input. We believe that a technique specialized in fixing vulnerabilities (thus only learning from commits fixing vulnerabilities) could achieve even higher performance, given the simplicity of the code transformations often applied to fix them (see Fig. 7).

# 4.

The vulnerability categories in the Android OS layers show some interesting patterns. While permissions, privileges, and access control issues are traversal to all the layers, the vulnerabilities are more related to security features and improper check handling of exceptional conditions when the layer is closer to the user; when the layer is closer to the hardware, weaknesses that affect memory and pointer issues are the most frequent categories; and, in the middle of the stack, initialization and cleanup errors are the most common. These “patterns” are directly related to the choice of the implementation language used in a layer and the type of features implemented. Thus, the usage of secure coding practices could be promoted/supported/enforced according to the Android OS layer a developer is working on.

# 5.

If teaching/training secure coding practices is not an option, the secure coding practices could be enforced, for example, via just-in-time quality control techniques statically analyzing the code contributed to the Android OS in each commit activity. Therefore, future work could be devoted to develop secure coding-oriented linters and static analyzers that could be specialized according to the OS layer the developers are contributing to. Also, mobile OS developers could consider the usage of modern programming languages embedding mechanisms for secure coding (e.g., Rust 2013).

# 6.

Finally, it is worth highlighting the most common features of the vulnerabilities as reported by the top-5 CVSS vectors. Most of the vulnerabilities (i) are only exploited remotely, (ii) do not require authentication, and (iii) have complete impact on integrity/confidentiality/availability. This could be a “warning signal” for the OS designers. Thus, new efforts aimed at redesigning or updating the Android OS architecture (or a new OS for Android) could be oriented to implement mechanisms that control or avoid the aforementioned issues.

Given the wide diffusion of Android devices nowadays and the impact that security vulnerabilities can have on private data, we strongly believe in the need of investigating the
Empirical Software Engineering (2019) 24:2056–2101 2095
above listed action items, and we hope that our paper can represent a stepping stone in this direction.

Publisher’s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.