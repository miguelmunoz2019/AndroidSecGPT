Furthermore, API wrappers are currently developed on a per-API basis. In the future, we plan on investigating possible categorizations of Android APIs, in order to group together similar ones, hence reducing the effort required to develop new wrappers. As these groupings must be well understood by both end users and developers, we plan on conducting new experiments to assess their effectiveness.

Threats to Validity. There are several threats and points of improvement for Experiment 4. Although users were instructed to act as they would do with their own smartphone, they were still performing the trials in a controlled environment, potentially different from the normal. This means that participant activities and answers may differ from what can be observed in the real world. As future work, we will mitigate this potential threat to validity by performing the experiment via an app that users can install on their own smartphone in order to monitor the AFP-enabled apps during their usage.

Despite our efforts to have a balanced and unbiased set of participants, we ended up with a group of relatively young people (age between 21 and 30 years old) and with a majority of male participants (32 males as opposed to 15 females). Moreover, we are aware that the sample size of this experiment (47 participants) is limited with respect to all Android smartphone users today. We mitigated this potential threat by contacting participants with different backgrounds and professions, different experience about the Android platform, and by letting them interact with the real apps instead of Android emulators or simulated services to directly publish mobile apps to the Google Play Store.

Another possible threat is represented by the limited amount of apps used to perform trials in the study. Hence, results of our study might potentially not generalize to other apps. We mitigated this threat by selecting three apps with very different purposes and features, thus collecting data on users behavior in varied scenarios. Additionally, participants were not familiar with selected apps in advance. Hence, their behavior during the trial might properly resemble the one of a user that runs a freshly installed app for the first time.

Authorized licensed use limited to: Pontificia Universidad Javeriana. Downloaded on August 13, 2024 at 04:26:33 UTC from IEEE Xplore. Restrictions apply.

# 7 RELATED WORK
Android permissions and their usage have attracted considerable research interest over the years. In , Felt et al. report on the usability study they performed to evaluate whether Android users pay attention and understand permissions upon installing apps. The outcome of the study is that Android users make security and privacy decisions with a minimal comprehension of what the implications of their decisions will be.

The problem addressed in our paper falls into the class of problems identified in , and from there it takes the move. The authors of  investigated whether users are willing to pay premiums for privacy: results suggest that many smartphone users are concerned with their privacy and are willing to pay premiums for apps that are less likely to request access to personal information. Similar conclusions are presented by Kelly et al. in an independent study  that, in the form of a series of semi-structured interviews, was aimed at understanding user’s attention to and comprehension of permissions screens displayed during app’s installation. Their findings highlight that, while permissions displays are generally viewed and read, mostly often they are not understood by Android users.

Recent work has focused on studying the new Android runtime permission system. In , we identified points of possible improvement in the new system analyzing mobile apps user reviews. In , Peruma et al. conducted an in-person study to investigate user perception of the previous, current and a new proposed system. Among their findings there is the indication that current system does not make users feel more secure than the old one.

Andriotis et al. studied users’ adaptation to the new runtime permission model , collecting and analyzing anonymous data from 50 participants. Although their analysis indicates that users adapted positively to the new model, participants of their study hardly ever utilized the newer capabilities that allow a more efficient control over resources used by applications . In , the same authors suggest that users should be informed about the resources needed by an app to provide its core functionalities before installation.

Many approaches aim to offer a finer-grade control over permissions using a wide array of strategies , , , , . In particular, Mockdroid , TISSA  and SHAMDROID  allow users to restrict access to a resource by providing mocked information in place of real one whenever access to the resource is attempted. The evaluation presented shows that the majority of apps are able to continue execution when injected with mocked information but their usefulness might be greatly reduced for the end user. In , Jeon et al. define some strategies for developing fine-grained variants of Android permissions and implement Dr. Android, a prototype tool that allows to retrofit existing Android apps to make use of fine-grained permissions.

Proposed by Nauman et al., Apex  allows a user to selectively grant permissions to apps based on runtime contextual information, such as the location of the device or the number of times a resource has been previously used. To our knowledge, AFP is the first approach that allows users to specify permissions on a per-feature basis.

Authorized licensed use limited to: Pontificia Universidad Javeriana. Downloaded on August 13, 2024 at 04:26:33 UTC from IEEE Xplore. Restrictions apply.

# SCOCCIA ET AL.: ENHANCING TRUSTABILITY OF ANDROID APPLICATIONS VIA USER-CENTRIC FLEXIBLE PERMISSIONS
Android devices are seamlessly supported. Authors of  University of Alabama at Birmingham Online Masters in Management Information Systems, “The future of mobile application,” 2014. [Online]. Available: http://businessdegrees.uab.edu/resources/infographic/the-future-of-mobile-application/
InstaGuard  instead propose a new approach that allows for instant deployment of hot-patches for mobile devices. The kernel vulnerabilities identified in , , together with the related kernel-level considerations therein, would be of undoubted interest towards a native low-level integration of the AFP approach directly in the Android operating system.

Researchers have investigated the effectiveness of nudging, i.e., the act of assisting individuals’ privacy and security choices with soft paternalistic interventions that drive users toward more beneficial options . Integrating such techniques into AFP can potentially be beneficial for end users.

In  Almuhimedi et al. report on a study that evaluates the benefits of giving users an app permission manager and sending them nudges intended to raise their awareness of the data collected. Nudges proved to be beneficial, with 95 percent of participants reassessing their permissions, and 58 percent of them restricting some. In our approach, the role of permissions manager is performed by the AFP App.

In , Balebako et al. performed a series of experiments to examine how timing impacts the salience of smartphone app privacy notices. Notices displayed during app use showed significantly increased users’ recall rates over notices displayed in the app store. Liu et al.  implemented and evaluated a Personalized Privacy Assistant (PPA) to automatically recommend permissions to users based on prior answers to a small set of questions. In their experiments, 78 percent of the recommendations were adopted by users and the PPA was perceived as useful and usable. Introducing a similar assistant in the AFP App can ease the permission configuration process for end users.

# 8 CONCLUSIONS
In this paper, we have presented an approach aimed at overcoming some limitations of the current Android permission model. At the core of the proposed approach lies a new flexible permission model for Android apps in which end users can grant and negotiate the level of each single permission of a mobile app, on a per feature-basis.

The new permission model is supported by an infrastructure comprising three main components: a library internal to the apps enacting the approach at runtime; a stand-alone mobile app that allows end users to configure and negotiate at any time the permissions for each app on their devices; a web-based server for allowing developers to analyze their own mobile apps, and enhance them with the new flexible permission system with very low effort.

Evaluation of proposed approach has been conducted by designing, conducting, and reporting on four independent experiments aimed at empirically investigating key aspects of it: performance of the instrumenter, performance at runtime of instrumented apps, usability and acceptance of the approach for both end users and developers. Results are promising and provide confidence in the approach.

# SCOCCIA ET AL.: ENHANCING TRUSTABILITY OF ANDROID APPLICATIONS VIA USER-CENTRIC FLEXIBLE PERMISSIONS
2051
# Authors
# Gian Luca Scoccia
Received the PhD degree from the Gran Sasso Science Institute, Italy, in 2019. Currently is a post-doc with the University of L’Aquila, Italy. His research focuses on software engineering, empirical software engineering, privacy and security of mobile apps, mining of software repositories, program analysis.