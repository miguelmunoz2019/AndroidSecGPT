# Discovering Flaws in Security-Focused Static Analysis Tools for Android using Systematic Mutation
Richard Bonett, Kaushal Kafle, Kevin Moran, Adwait Nadkarni, and Denys Poshyvanyk, William & Mary
https://www.usenix.org/conference/usenixsecurity18/presentation/bonett
This paper is included in the Proceedings of the 27th USENIX Security Symposium.

August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.

# Discovering Flaws in Security-Focused Static Analysis Tools for Android using Systematic Mutation
# Richard Bonett, Kaushal Kafle, Kevin Moran, Adwait Nadkarni, Denys Poshyvanyk
{rfbonett, kkafle, kpmoran, nadkarni, denys}@cs.wm.edu
# William & Mary
# Abstract
Mobile application security has been one of the major areas of security research in the last decade. Numerous application analysis tools have been proposed in response to malicious, curious, or vulnerable apps. However, existing tools, and specifically, static analysis tools, trade soundness of the analysis for precision and performance, and are hence soundy. Unfortunately, the specific unsound choices or flaws in the design of these tools are often not known or well-documented, leading to a misplaced confidence among researchers, developers, and users. This paper proposes the Mutation-based soundness evaluation (μSE) framework, which systematically evaluates Android static analysis tools to discover, document, and fix flaws, by leveraging the well-founded practice of mutation analysis. We implement μSE as a semi-automated framework, and apply it to a set of prominent Android static analysis tools that detect private data leaks in apps. As the result of an in-depth analysis of one of the major tools, we discover 13 undocumented flaws. More importantly, we discover that all flaws propagate to tools that inherit the flawed tool. We successfully fix one of the flaws in cooperation with the tool developers. Our results motivate the urgent need for systematic discovery and documentation of unsound choices in soundy tools, and demonstrate the opportunities in leveraging mutation testing in achieving this goal.

# 1 Introduction
Mobile devices such as smartphones and tablets have become the fabric of our consumer computing ecosystem; by the year 2020, more than 80% of the world’s adult population is projected to own a smartphone . This popularity of mobile devices is driven by the millions of diverse, feature-rich, third-party applications or “apps” they support. However, in fulfilling their functionality, apps often require access to security and privacy-sensitive resources on the device (e.g., GPS location, security settings). Applications can neither be trusted to be well-written or benign, and to prevent misuse of such access through malicious or vulnerable apps , it is imperative to understand the challenges in securing mobile apps.

Security analysis of third-party apps has been one of the dominant areas of smartphone security research in the last decade, resulting in tools and frameworks with diverse security goals. For instance, prior work has designed tools to identify malicious behavior in apps , discover private data leaks , detect vulnerable application interfaces , identify flaws in the use of cryptographic primitives , and define sandbox policies for third-party apps . To protect users from malicious or vulnerable apps, it is imperative to assess the challenges and pitfalls of existing tools and techniques. However, it is unclear if existing security tools are robust enough to expose particularly well-hidden unwanted behaviors.

Our work is motivated by the pressing need to discover the limitations of application analysis techniques for Android. Existing application analysis techniques, specifically those that employ static analysis, must in practice trade soundness for precision, as there is an inherent conflict between the two properties. A sound analysis requires the technique to over-approximate (i.e., consider instances of unwanted behavior that may not execute in reality), which in turn deteriorates precision. This trade-off has practical implications on the security provided by static analysis tools. That is, in theory, static analysis is expected to be sound, yet, in practice, these tools must purposefully make unsound choices to achieve a feasible analysis that has sufficient precision and performance to scale.

# Mutation-based Soundness Evaluation (μSE)
Stance, techniques that analyze Java generally do not over-approximate analysis of certain programming language features, such as reflection, for practical reasons (e.g., Soot , FlowDroid ). While this particular case is well-known and documented, many such unsound design choices are neither well-documented, nor known to researchers outside a small community of experts.

Security experts have described such tools as soundy, i.e., having a core set of sound design choices, in addition to certain practical assumptions that sacrifice soundness for precision . While soundness is an elusive ideal, soundy tools certainly seem to be a practical choice: but only if the unsound choices are known, necessary, and clearly documented. However, the present state of soundy static analysis techniques is dire, as unsound choices (1) may not be documented, and unknown to non-experts, (2) may not even be known to tool designers (i.e., implicit assumptions), and (3) may propagate to future research. The soundiness manifesto describes the misplaced confidence generated by the insufficient study and documentation of soundy tools, in the specific context of language features . While our work is motivated by the manifesto, we leverage soundiness at the general, conceptual level of design choices, and attempt to resolve the status quo of soundy tools by making them more secure as well as transparent.

This paper proposes the Mutation-based Soundness Evaluation (μSE, read as “muse”) framework that enables systematic security evaluation of Android static analysis tools to discover unsound design assumptions, leading to their documentation, as well as improvements in the tools themselves. μSE leverages the practice of mutation analysis from the software engineering (SE) domain , and specifically, more recent advancements in mutating Android apps . In doing so, μSE adapts a well-founded practice from SE to security, by making useful changes to contextualize it to evaluate security tools.

μSE creates security operators, which reflect the security goals of the tools being analyzed (e.g., data leak or SSL vulnerability detection). These security operators are seeded, i.e., inserted into one or more Android apps, as guided by a mutation scheme. This seeding results in the creation of multiple mutants (i.e., code that represents the target unwanted behavior) within the app. Finally, the mutated application is analyzed using the security tool being evaluated, and the undetected mutants are then subjected to a deeper analysis. We propose a semi-automated methodology to analyze the uncaught mutants, resolve them to flaws in the tool, and confirm the flaws experimentally.

We demonstrate the effectiveness of μSE by evaluating static analysis research tools that detect data leaks in Android apps (e.g., FlowDroid , IccTA ). We evaluate a set of seven tools across three experiments, and reveal 13 flaws that were undocumented. We also discover that when a tool inherits another (i.e., inherits the codebase), all the flaws propagate. Even in cases wherein a tool only conceptually inherits another (i.e., leveraging decisions from prior work), just less than half of the flaws propagate. We provide immediate patches that fix one flaw, and in other cases, we identify flaw classes that may need significant research effort. Thus, μSE not only helps researchers, tool designers, and analysts uncover undocumented flaws and unsound choices in soundy security tools, but may also provide immediate benefits by discovering easily fixable, but evasive, flaws.

# Contributions
- We introduce the novel paradigm of Mutation-based Soundness Evaluation, which provides a systematic methodology for discovering flaws in static analysis tools for Android, leveraging the well-understood practice of mutation analysis. We adapt mutation analysis for security evaluation, and design the abstractions of security operators and mutation schemes.

- We design and implement the μSE framework for evaluating Android static analysis tools. μSE adapts to the security goals of a tool being evaluated, and allows the detection of unknown or undocumented flaws.

- We demonstrate the effectiveness of μSE by evaluating several widely-used Android security tools that detect private data leaks in Android apps. μSE detects 13 unknown flaws, and validates their propagation. Our analysis leads to the documentation of unsound assumptions, and immediate security fixes in some cases.

# Threat Model
μSE is designed to help security researchers evaluate tools that detect vulnerabilities (e.g., SSL misuse), and more importantly, tools that detect malicious or suspicious behavior (e.g., data leaks). Thus, the security operators and mutation schemes defined in this paper are of an adversarial nature. That is, behavior like “data leaks” is intentionally malicious/curious, and generally not attributed to accidental vulnerabilities. Therefore, to evaluate the soundness of existing tools that detect such behavior, μSE has to develop mutants that.

1264 27th USENIX Security Symposium USENIX Association
mimic such adversarial behavior as well, by defining mutation schemes of an adversarial nature. This is the key difference between μSE and prior work on fault/vulnerability injection (e.g., LAVA ) that assumes the mutated program to be benign.