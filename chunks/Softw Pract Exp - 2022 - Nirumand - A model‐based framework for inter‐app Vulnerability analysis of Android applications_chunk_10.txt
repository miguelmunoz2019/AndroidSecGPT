# 7 Breakdown of the discovered vulnerabilities
Chin et al discussed several ICC attacks in Android inter-app communication and proposed a breakdown of these attacks in real-world Android apps. According to the reported breakdown by Chin et al.,23 in the second column of Table 6, the Activity hijacking vulnerability is the most common inter-app vulnerability, because Activity uses the message passing mechanism through intent more than other components. According to the discovered vulnerabilities by VAnDroid2 (i.e., the Warning column in Table 3), the obtained breakdown, in the third column of Table 6, is similar to the breakdown obtained by Chin et al.,23 and Activity hijacking is the common vulnerability in Android applications.

# 7 Comparing with related work
# 1097024x, 2023, 4
Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

# NIRUMAND et al.

# T A B L E 7 A comparison between VAnDroid2 and related work
Abbreviations: ●, Full support; ○, No support; ◑ Partial support.

Most of the solutions have been done to address the detection of sensitive information leakage in Android applications, and some analysis approaches have been proposed to identify ICC vulnerabilities, such as Intent Spoofing and Unauthorized Intent Receipt. The majority of related studies are considered a single Android application. These studies do not support the ICC analysis at the inter-app level. As depicted in this table, the VAnDroid2 tool identifies two prominent ICC vulnerabilities (i.e., Intent Spoofing and Unauthorized Intent Receipt) at both intra-app and inter-app levels.

The Conducted Technique row of Table 7 delineates the analysis techniques that are conducted by VAnDroid2. The taint analysis technique tracks the flow of sensitive data within the programs. As previously explained, Android allows ICC at both intra-app and inter-app levels mainly through intent messages. These intent objects may transfer tainted data from one component or app to another. Since VAnDroid2 analyzes ICC at both inter-app and intra-app levels by focusing on the message passing mechanism through intent, it can detect sensitive ICCs that leak sensitive information.

In this analysis, a leak is considered as a communication between two components or two apps that originates in one class and ends in another class. Therefore, the taint analysis technique is partially supported by VAnDroid2.

VAnDroid2 conducts the ICC data flow analysis technique. In this analysis, a sensitive ICC is a communication from an ICC exit point such as bindService and startActivity to an ICC entry point such as getIntent and onActivityResult. This communication transfers an intent object that can be contained the sensitive data. In this sensitive ICC, the ICC exit leak identifies the sender app and the ICC entry leak identifies the receiver app.

Type and model checking are two methods for program verification. The purpose of type checking is to ensure that a program is safe in terms of type error. Model checking is a process that aims to check the status of the program to ensure that certain specifications are met. VAnDroid2 first extracts domain-specific models of the security specifications of Android apps and their interactions. Then, in the analysis phase, the resulting models are analyzed against ICC vulnerabilities through a formal analysis process. Therefore, VAnDroid2 conducts the type/model checking technique in the ICC analysis.

1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
# NIRUMAND et al.

In comparison with related studies, VAnDroid2 uses the MDRE technique to enable inter-app security analysis. In this tool, the structural complexity of the Android applications is reduced by extracting the security information of each Android app in the form of a single model. Due to the nature of these platform-independent models, the proposed approach does not depend on a specific API and considers features beyond the API in modeling. As a result, it will be able to support new versions of Android. Since one of the main principles of MDRE is to quickly create initial models of software artifacts without losing information, in the proposed approach, these raw and completely accurate initial models are considered as IRs of the Android application code. These initial models are then considered as the input (starting point) for all the reverse engineering activities.

To summarize, since our study is based on MDRE, the main benefits of VAnDroid2 are as follows.

- Extensibility. Due to the use of metamodels, the ability to customize model-based components, and the clear decoupling of the result models from different phases, new features can be plugged into the developed tool.

- Full coverage. Full coverage of app artifacts can be provided through complementary representations of the app at different abstraction levels and considering different perspectives (i.e., metamodels).

- (Re)use and integration. Due to the clear separation of concerns in VAnDroid2, Android apps and their specifications displayed in the form of models are strictly separated, which further facilitates the reusability of such models.

# 7 Comparing with existing tools
In comparison with other tools, the ability of VAnDroid2 to satisfy its goals and to generate reliable analysis results is examined. As explained earlier, one of the main goals of VAnDroid2 is to provide a comprehensive IR of the Android app to create high-level models without losing information. These models can also be used for an effective ICC and IAC security analysis. Therefore, first, in Section 7, VAnDroid2 is compared with IC3, as the state-of-the-art Android static program analysis tool, in extracting specifications from the Android app. Then, in Section 7, VAnDroid2 is compared with three existing state-of-the-art Android static analyzers for ICC vulnerability detection.

# 7 Comparing with IC3
To compare with IC3, two benchmarks, DroidBench and ICC-Bench, are used. Table 8 shows the results of comparing the effectiveness of VAnDroid2 with IC3 in extracting security specifications from Android apps. As shown in this table, we counted the number of ICC values, including components, intent filters, and intents inferred by IC3 and VAnDroid2. Also, we measured the average execution time for each tool. The values that indicate the superiority of VAnDroid2 to IC3 are distinguished by the bolded text in this table.

According to Table 8, for apps of DroidBench, we observe that VAnDroid2 outperforms IC3 in inferring components, intent filters, and intents. The reason for these differences is related to the ability of tools in detecting all types of app components, including Activity alias and Broadcast Receivers. The Echoer app, related to IAC test cases of DroidBench, has
1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions https://onlinelibrary.wiley.com/terms-and-conditions on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License
NIRUMAND et al.

an Activity alias that IC3 could not detect. This component is considered as a separate component with its characteristics, including permissions and intent filters. Therefore, this component should be considered in extracting information from the Android app. Furthermore, for some apps of DroidBench, IC3 could not detect Broadcast Receivers that were dynamically introduced in the Java code. This type of component is one of the most important app components and any app can send malicious intent to this component. It should be possible to identify all of these components in Android apps. As shown in Table 8, the average execution time of VAnDroid2 (1 ms) is considerably less than IC3 (3 ms). Therefore, for DroidBench, VAnDroid2 significantly outperforms the IC3 tool in terms of extracting more comprehensive specifications (i.e., ICC values) as well as execution time.

According to Table 8, for apps of ICC-Bench, we observe that VAnDroid2 performs similarly to IC3 in inferring components, intent filters, and intents. The average execution time of VAnDroid2 (1 ms) is considerably less than IC3 (5 ms). Therefore, for ICC-Bench, VAnDroid2 has been able to extract the same specification from each app compared to IC3. VAnDroid2 significantly outperforms the IC3 tool in terms of execution time. The outputs of running IC3 and VAnDroid2 on Android apps of these two benchmarks are available on the VAnDroid2 website.