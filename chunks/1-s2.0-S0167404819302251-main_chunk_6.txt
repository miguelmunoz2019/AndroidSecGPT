Authors in MIRROR  propose hybrid reflection analysis approach for Java applications. The reflection oriented slicing ahead of dynamic analysis increases the code coverage of dynamic analysis significantly with low false reflective targets. However, the approach does not apply to Android due to various reasons like no single entry point, event-oriented execution, dependency between components using different ways as mentioned in Section 2.

# 6. Dynamic/hybrid analysis
Harvester  as described in Section 2 computes highly optimized slices (intra-component slices) and thus will not be able to identify the target of reflection APIs accurately during ICC dependency. EspyDroid+ approach of slicing is peculiar to component level slicing which improves the overall recall. Standard methods of computing the backward slices (Chen and Xu, 2001; Jayaraman et al., 2005) are not practically feasible for platforms like Android.

DROIDPF  is a framework that proposes model checking for identifying sensitive leaks in Android apps. The authors developed executable mock-up Android OS for enabling JPF  to dynamically explore the concrete state spaces of Android apps. Mock-up OS includes programs for generation of user interactions and environmental inputs, which drive the dynamic execution of the apps. However, DROIDPF identifies obfuscated reflection targets only and does not include reformation and instrumentation of equivalent non-reflection APIs in the original app. Also, it is limited by underlying JPF so it can only explore the app if the underlying JPF can explore. The approach is too complex due to the design of mock-up OS. Adding features of new Android releases and associated libraries require the efforts of continuous development of the precise model of mock-up OS for verifying latest apps, which limits the scalability of DROIDPF. DROIDPF is not fully automatic as one of the case is Pincer which is controlled by C&C server. For Pincer, DROIDPF can find malicious behaviors but with manual efforts of analysts by providing data inputs, which satisfy branching conditions. In contrast, EspyDroid+ includes taming conditional behaviors that make it independent of such external events.

StaDyna  focuses on addressing dynamic code loading and reflection using the hybrid approach. The static analysis first constructs call graph of application, then run the app and afterward expands callgraph with additional information captured at run-time. However, evaluation is done only in terms of an increased number of nodes and edges without any focus on privacy leakage. It needs a modified Android OS, which makes its installation and usage difficult. It does not provide a way to directly benefit existing static analyzers, i.e., to support them in performing reflection-aware analyses.

The first version of EspyDroid+ named EspyDroid was presented for uncovering reflection employed with run-time dependency in Android apps in our earlier work . EspyDroid+ has a number of considerable enhancements. First, EspyDroid+ proposes RGSS, a novel slicing approach that strengthens dynamic analysis by pruning irrelevant paths with respect to analysis targets. RGSS models the original app in form of Deterministic Finite Automaton by capturing transitions using intra-component, inter-component, and remote call analysis techniques. As detailed in Section 3, EspyDroid+ proposes an approach for converting RGSD (Reflection Guided State Diagram) from the original state diagram. RGSD prunes all the irrelevant transitions without any loss of accuracy. The results show that
J. Gajrani, U. Agarwal and V. Laxmi et al. / Computers & Security 90 (2020) 101688
# 6. Machine learning
In Android, number of vulnerable and malicious apps are increasing at an alarming rate and due to this, analysis time per app should be as small as possible without any loss of accuracy. Therefore, many authors have proposed machine learning based approaches, especially, deep learning based approaches which may be able to identify vulnerabilities not yet found.

Wang Wei et al.  propose a framework which employs an ensemble of multiple classifiers for detecting malicious apps and also categorizing benign apps. They extract 2,374,340 features from each app and apply Support Vector Machine (SVM) model to assign weights to features based on their effectiveness in distinguishing benign and malicious features. Finally, they used 34,630 top ranked features to perform the detection of malicious apps and the categorization of benign apps. The app undergoes classification by 5 classifiers i.e., SVM, Classification and Regression Tree (CART), Random Forest, Naive Bayes, and KNN algorithms. The final classification is based on the majority of these five classifiers. The authors shown effectiveness of proposed approach by performing evaluation on a large app set of 107,327 benign apps and 8701 malicious apps.

Liu Xing et al.  designed and implemented framework called “Alde”, which discovers privacy leaks caused by analytics libraries. The authors show that even some Google playstore and Chinese market apps leak private information to analytics libraries without users consent allows the owners of these companies to profile and characterize the users. The authors proposed and developed an app “ALManager” which leverages Xposed framework  to hook tracking APIs used by analytics libraries and further control the information to be collected by these.

Android apps have high dimensional feature set which require high training time. Wang et al.  propose to combine deep autoencoder (DAE) with convolutional neural network (CNN) to improve the detection accuracy and reduce the training time. Authors show that with inclusion of DAE, essential features of Android apps are captured efficiently. Further, CNN-S and CNN-P structures are employed and experimental results demonstrate that CNN-S model improves accuracy by 5% compared with Support Vector Machine (SVM) on the dataset of 23,000 apps. The time required for training is reduced by 83% by using DAE-CNN when compared to CNN-S model.

# 7. Conclusion and future work
In this work, we propose EspyDroid+, an automatic reflection analysis approach for Android apps. EspyDroid+ tackles the limitation of static analysis in verifying true targets of reflection by dynamically executing the app. Further, we propose RGSS for reducing the state space of dynamic analysis. We propose an approach to model standard state diagram from an Android app and modeling state diagram into an efficient Reflection Guided State Diagram (RGSD), which is suitable for dynamic analysis of reflection APIs. Instead of exploration of a complete app, dynamic analysis executes the sliced app having paths leading to reflection code. EspyDroid+ is also effective in handling anti-analysis, logic bombs, time bombs, C&C controlled execution, etc. Although, the current focus is on reflection code, it could be easily extended to log parameters of other sensitive sinks similarly. Limiting the number of paths to be explored based on analysis target makes EspyDroid+ an efficient solution for analyzing large real-world Android applications. We applied EspyDroid+ on a collection of 660 apps from diverse sources and showed that EspyDroid+ can significantly reduce the exploration time as the links not relevant to reflection code are broken.

Machine learning based solutions detect any possible malicious activity based on the structure of the app and depend on how good training dataset is. Considering that many zero day vulnerabilities are discovered only after an attack, modeling this vulnerability requires an analysis of effect of attack on vulnerable app and hybrid of static, dynamic, and machine based methods may be more effective than any single analysis technique. Therefore, in future, we further work on hybrid solution combining static, dynamic, and machine learning based methods.

# Declaration of Competing Interest
The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

# Author Information
Jyoti Gajrani received the M.Tech. degree in Computer Engineering from the Indian Institute of Technology, Bombay in 2013. She is currently pursuing the Ph.D. degree (Part-time) in computer science with Malaviya National Institute of Technology, Jaipur, under the supervision of Prof. Manoj Singh Gaur from Indian Institute of Technolgy, Jammu and Dr. Meenakshi Tripathi from Malaviya National Institute of Technology, Jaipur. She is working as Assistant Professor (Full-time) in Computer Engineering department at Govt. Engineering College, Ajmer since 2006. Her research interests include the area of security and privacy, with a special emphasis on security in Android.

Umang Agarwal is an undergraduate student at Govt. Engineering College Ajmer. Along with programming, his research interest includes cyber security, malware analysis. He has participated in various hackathons and programming contests conducted at national level. He has also developed Android apps for cultural and sports events in his college.

Dr. Vijay Laxmi received her Master’s in Computer Science and Engg. from Indian Institute of Technology Delhi and Ph.D. from University of Southampton, UK. She has been a faculty in Department of Computer Science and Engineering, Malaviya National Institute of Technology Jaipur, India. Her research interests include Information security, Malware analysis, Security and QoS provisioning in wireless Networks.