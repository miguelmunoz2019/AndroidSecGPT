Ref.  developed an application that runs on mobile devices and aimed to prevent security and privacy problems in the Android platform. The application is comprised of two main modules. The first module is called Mr. Hide. This module modifies the permissions in the manifest file. For instance, the INTERNET permission that is considered to be very dangerous is modified to a permission that limits it to a specific domain (Internet-URL(domain)). This provides more control over the permission mechanism. The second module is called Dr. Android. This module takes the permissions from the first module into account, modifies the byte-code of the application and rebuilds it with new permissions. Their solution does not make any changes at the operating system level. However, the first module causes an extra 10-50% overhead on the system, and the time to rebuild the application takes an average of one minute. The study was conducted on 19 popular free applications in different categories and 7 permissions that are considered to be dangerous by researchers. According to their results, the system successfully rebuilt the modified applications, and the applications ran without any problems. Because the developed system runs in the background as a service and rebuilds the code on the device, it causes overload, and modified applications run slower than their original ones. Additionally, the proposed system was not released to the public, which makes it unusable. Finally, the application dataset that was used in the study is not large enough and is limited to 19 popular free applications, which means it is difficult to tell whether it is successful or not.

Ref.  developed a system that analyzes the Android applications by using static and dynamic code analysis techniques. In the static analysis module, the permission file and the API function calls that correspond to permissions were inspected, and a report that shows the inconsistencies was created. The dynamic analysis module works on the application byte-code and gathers information about the behavior of the application. This study only reports the analysis and results and is not user-
Copyright © 2014 MECS I.J. Computer Network and Information Security, 2014, 12, 9-20
# A Comprehensive Analysis of Android Security and Proposed Solutions
focused. Furthermore, the cost of using dynamic analysis on applications decreases performance and limits the system's usability.

In , researchers developed Kirin, an application installer software that extends the Android permission system. The software replaces the default Android application installer, processes the permissions from the manifest file during the installation process and checks whether they match the predefined security rules. If the permissions match these rules, the application is installed. The security rules were created by utilizing security requirements engineering, and a security language that was named the Kirin Security Language (KSL) was developed. The fundamentals of this language were explained in the paper in detail and are out of this paper's scope.

Ref.  developed a statistical model (Probabilistic Generative model) that calculates the risk scores of the Android applications. Applications that have a high score were considered to be high-risk applications; applications that have a low score were considered to be low-risk applications. Risks were determined according to the permissions that were included in the manifest file. The developed model serves as a feedback mechanism for developers. Although they explain the theoretical details of risk scoring, a working system that makes of use of this statistical model does not exist. Furthermore, there are no details about how the cumulative score was calculated or what permissions caused the risks.

Ref.  developed a system that generates risk signals according to the permissions that exist within the application. When defining the risk signals, 121 malicious applications and 150,000 harmless applications were analyzed. The study focused on 26 critical permissions out of 122 Android permissions. Harmless and malicious applications were separated by employing the weighted Support Vector Machine (SVM). In addition, category information of applications was used to create risk signals. The reason behind utilizing category information was to understand whether the application was doing what it was supposed to do. This study is different from other studies in terms of risk assessment. However, it only calculates the risk scores according to certain data that were in hand.

# A. Source Code Based Solutions
Studies under this category provide solutions by processing the byte-code of applications. Some of these solutions make decisions based on static and dynamic analysis techniques and some modifies the byte-code and rebuilds the applications.

Ref.  developed a novel, state of the art open-source decompiler that was called DED and converted executable codes into source codes that could be read and understood by people. The study was conducted on 1100 popular free applications that were downloaded from the Android Market. Researchers applied the static analysis technique to examine the 21 million rows of source code that were decompiled from “.apk” image files by using their DED compiler. The results of their analysis revealed that applications posed a threat in terms of personal privacy because they used sensitive information, such as location and information that identifies a user. The developed DED compiler is the first and most successful source code generation utility, with a success rate of 94%, and is used widely by the research community whose work involves examining permissions by looking deep into the source code. This study's main contributions are its detailed security analysis on source code, its state of the art DED compiler and its success.

Ref.  developed a software framework that analyzes the applications on the code level by employing a static analysis technique, which automatically detects the leakage of sensitive information, such as one's phone number, contacts list, Wi-Fi data, and recorded sounds. The study was conducted on 24,350 applications and revealed that 7414 applications caused 57,299 potential information leaks. Their results showed that advertisement libraries caused most of these leaks. Although the software framework has the ability to generate detailed reports about leaks, an expert needs to look through the report to determine and approve of the existence of an information leak. Therefore, this developed tool targets security experts and facilitates the inspection process. However, users who do not have any knowledge of security cannot benefit from this tool. In addition, there is no information, download links or resources that explain how the software will be used.

In , researchers developed a security application that is called AppGuard and works on Android devices. This application has 3 main features. The first feature is its ability to generate security policies. It provides methods that generate policies to allow or limit the usage of GPS, camera, socket creation, and access to personal information. In regard to the second feature, it can rewrite the byte-code. The last feature is that it provides users with a user interface to create and customize application specific policies. The application utilizes the Java Reflection API to trace critical methods. This API assists developers in the intervention and examination of any method or variable without having to know the name of the method or variable. When a critical method is called, the parameters of policy methods are examined by using reflection. Whenever a security-related method is called, the monitoring interface calls the corresponding protection method. The developed application cannot work on already installed applications. In this situation, the application needs to be uninstalled and re-installed. The study was conducted on 13 applications that were downloaded from the Android Market. According to the test results, the system was overloaded because the applications were rebuilt on the device. For instance, the time that is needed to rebuild the popular game of Angry Birds is 45 seconds, while Instagram requires 66 seconds and WhatsApp Messenger requires 58 seconds. Furthermore, the overload on function calls that is caused by applying the security policies is 5%. In the event of removing the application from the device, applications revert to their previous states. This is the main disadvantage of the developed system.

Copyright © 2014 MECS I.J. Computer Network and Information Security, 2014, 12, 9-20
# A Comprehensive Analysis of Android Security and Proposed Solutions
Google removed this application from the Android Market, and the application has been hosted under the company's website and is only available for download from their website.