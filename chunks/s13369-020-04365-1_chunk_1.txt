# Arabian Journal for Science and Engineering (2020) 45:3289–3315
https://doi.org/10/s13369-020-04365-1
# RESEARCH ARTICLE-COMPUTER ENGINEERING AND COMPUTER SCIENCE
# Recovering Android Bad Smells from Android Applications
Ghulam Rasool1 · Azhar Ali1
Received: 16 July 2019 / Accepted: 19 January 2020 / Published online: 1 February 2020
© King Fahd University of Petroleum & Minerals 2020
# Abstract
The demand for Android mobile software applications is continuously increasing with the evolution of technology and new enriching features to make the life of people easy and comfortable. The mobile-based software applications are frequently updated as compared to other web and desktop applications. Due to these frequent updating cycles, the developers sometimes make changes in a rush which leads to poor design choices known as antipatterns or code bad smells. Code bad smells degrade the performance of applications and make evolution difficult. The recovery of bad smells from mobile software applications is still at infancy but it is a very important research realm that requires the attention of researchers and practitioners. The results of recovery may be used for comprehension, maintenance, reengineering, evolution and refactoring of these applications. Most state-of-the-art approaches focused on the detection of code bad smells from object-oriented applications and they target only a few code smells. We present a novel approach supplemented with tool support to recover 25 Android code bad smells from Android-specific software applications. We evaluate our approach by performing experiments on 4 open source and 3 industrial Android-specific software applications and measure accuracy using standard metrics.

# Keywords
Smart phone · Mobile software applications · Android smells · Software quality · Code refactoring
# 1 Introduction
In the last decade, the adoption of mobile devices and usage of mobile software applications have experienced exceptional and exponential growth around the globe. The market for mobile applications is expected to generate revenue around 189 billion dollars till 2020 that represents an excellent opportunity for mobile application developers interested to develop high quality and successful software applications . There were around 3 million mobile applications on Google Play Store till March 2018 and the number of downloads on famous app stores was 178 billion till 2017 . It is reported that Android accounts more than 85% of global smartphone sale worldwide It is predicted in a Gartner2 report that demand for mobile application development will soar at least 5 times faster till 2021 than IT capacity of companies to deliver these applications. It is predicted that the number of smart mobile phone users in the world is expected to pass the five billion mark by 2019 Android is the most popular open source mobile operating system designed for smartphones and tablets and it has market share of around 80% . Due to its openness and ease of use, it extracts a large number of developers, researchers and vendors for working on Android development environment. It is also reported that there are 2 billion Android devices in the world Indeed, the market for mobile applications has skyrocketed and it represents a rich opportunity for developers, researchers and practitioners. However, there is a dearth of research on evaluating the quality of mobile applications, especially Android and iOS applications. The success of mobile applications is dependent on their quality, reliability, correctness, performance and overall satisfaction of users. The development of high quality, robust and versatile mobile applications require the use of formally grounded.

1 https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/
2 https://www.mendix.com/blog/5-key-themes-from-the-gartner-application-strategies-solutions-summit/
3 https://www.statista.com/statistics/330695/number-of-smartphone-users-worldwide/
4 https://youtu.be/Y2VF8tmLFHw
# Arabian Journal for Science and Engineering (2020) 45:3289–3315
methods and standard practices. In order to achieve these objectives in Android applications, the mobile software application developers apply standard practices called design patterns for the design and development of mobile applications because patterns are proven solutions and they improve quality and development productivity of developers . It is also observed that developers sometimes overlook standard practices due to frequent and urgent changes, inexperience, time pressure, framework constraints and other reasons. The violation of standard principles and practices cause the birth of bad smells in software applications that are poor solutions. These bad smells have an impact on the quality, performance, comprehension and maintenance of mobile applications. A large number of papers are presented on the specification, detection and correction of code bad smells related to object-oriented software applications but a little attention is still paid on the detection and correction of code bad smells related with mobile applications. Riemann et al.  presented a catalog of 30 code bad smells(antipatterns) specific to Android mobile applications. The recovery of Android-specific code bad smells is still an open issue and it yields many benefits and supports a number of disciplines such as comprehension, reusability, maintenance, reengineering and refactoring.

The recovery of code bad smells from existing mobile software applications is more complex as compared to the recovery of design patterns. This is because of the fact that description containing detail of design patterns may exist in the available documentation but bad smells can never be part of any document. The manual analysis of bad smells from source code is a very daunting and challenging task due to the size and complexity of mobile software applications. The recovery is a prerequisite for the automatic refactoring of mobile software applications in order to improve the structure and quality of these applications without altering their external behavior . Most authors perform static analysis on Android programs to uncover bad smells and bugs . A comprehensive systematic literature review on the static analysis of Android applications and limitations of static analysis for Android applications are presented by Li et al. . All existing techniques and tools applied for the recovery of code smells from object-oriented software applications are not capable to recover bad smells from Android-specific applications due to the different structure of Android applications.

Based on the comprehensive analysis of literature review, we ascertained that many research works are presented on the recovery of code bad smells [7–38] from object-oriented software applications but only a limited number of approaches are presented for the detection of Android-specific code smells from mobile software applications [36, 39–51]. The reason is very obvious that mobile applications have still very young history and first-ever catalog of Android-specific bad smells is presented in 2012 by Reimann et al. . In the last 5 years, it is being observed that research work for the specification and detection of Android bad smells is getting more and more attention of researchers due to unprecedented growth in the field of mobile applications. A number of empirical studies have highlighted that Android/OO code bad smells have an impact on comprehension, maintenance, reliability, change proneness, fault proneness, evolution, security, complexity, performance, energy efficiency, CPU performance, bugs, bugs prediction, exceptions handling, prioritization for refactoring, accuracy and quality of software systems [49, 52–103]. These publications clearly reflect the importance of field and motive researchers for recovering and removing bad smells from Android and other types of software applications.

Through a review of the literature, we identified the following gaps related to the research presented for detection of Android code bad smells. First, there is nonexistence of recent and comprehensive state of the art on all Android code bad smell detection techniques and tools. The comprehensive review of Android bad smell techniques and tools is important for the research community. Secondly, the standard specifications and detection rules for the recovery of Android bad smells are not publically available. The standard and agreed upon specifications from the research community are essential for the accurate recovery of smells. Thirdly, all presented techniques focused on a few Android code smells during recovery of smells from the source code. The generalization of these techniques for other code smells becomes questionable. Fourthly, most techniques applied PAPRIKA or extended versions of PAPRIKA tool to detect Android code smells. The PAPRIKA is limited to detect only 4–12 Android-specific code smells. It is very difficult to customize PAPRIKA and set dynamic threshold values for different Android bad smells. Finally, there is still no standard benchmark corpus for evaluating results of Android-specific code smells detection techniques and tools. We did not find a single approach that made detection results publically available for detail review and comparison of researchers. It becomes very difficult to compare the results of different techniques and tools in the absence of publically available benchmarks.