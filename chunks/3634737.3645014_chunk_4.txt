# 5 SEPI ARCHITECTURE
SEPI, a proof-of-concept design, ensures the integrity of Android system privacy indicators. It utilizes the hypervisor and TrustZone to maintain indicator trustworthiness, even under complete compromise. SEPI reliably detects camera or microphone status changes via the hypervisor. TrustZone’s secure world collaborates with the hypervisor to enforce top Z-order display rendering of privacy indicators, ensuring on-screen indicators accurately reflect the camera’s true state, impervious to malicious interference from user applications or the operating system.

# 5 Leveraging In-System Trust Anchors
SEPI proposes to introduce minimal and non-intrusive changes to the existing hypervisor  and TrustZone  support for system integrity monitoring. Many modern Android systems, in fact, not only ship with such trust anchors enabled but often feature basic system integrity monitoring. In our testing, all of Samsung’s Galaxy S line of products have these trust anchors enabled, thereby motivating us to build SEPI on top of their security guarantees.

Before we proceed further with SEPI’s design, we must elaborate on the system privilege organization in the Android system with the aforementioned trust anchors supported.

ARM TrustZone, introduced with the ARMv6 architecture, is a technology used in various devices like smartphones and tablets . It establishes a trustworthy ecosystem, leveraging the CPU as a programmable trusted platform module by creating a secure mode in the CPU, splitting the system into a protected ‘secure world’ and a ‘normal world.’ The secure world is protected and has access to designated RAM ranges and peripherals inaccessible to the normal world. Userspace or kernel code cannot access these protected resources even when the normal world is compromised.

Lightweight hypervisors are often deployed with ARM-based Android devices to serve as a trust anchor within the system. These hypervisors reside in a higher privileged layer (EL2) than the OS kernel (EL1), and can provide basic system integrity protection against possibly compromised kernel. Among such protection mechanisms, SEPI leverages the following for its design:
- Address translation integrity. The hypervisor interposes on the normal world kernel’s page table management to ensure address translation integrity on selected addresses. For instance, the in-memory kernel image cannot be relocated or modified through a duplicate RWX mapping. As explained in a previous work , this is achieved by eliminating a set of privileged instruction occurrences in the guest kernel. As such, page table updates can only be made through making explicit requests (i.e., through hypervisor calls) to the hypervisor.

- By leveraging this security feature, SEPI can ensure the sensitive kernel mappings, such as the camera device’s MMIO channel or frame buffer, can be reliably interposed. In other words, the adversary cannot relocate or create an illegitimate duplicate mapping of these sensitive memory mappings.

- Access control on devices. The hypervisor present in Samsung’s mobile devices possesses a unique security layer known as Hypervisor-based Device Manager (HDM), which provides crucial hardware protection against threats . HDM can control the permissions of resources, such as subsystems, in an isolated safe space at a level higher than Android and Linux Kernel by using functions that manage virtual machines.

- HDM controls the memory view within the virtual machine (VM). This allows the hypervisor to grant the VM control over memory-mapped system resources that are accessible to it, as well as determine where these resources are located within the VM’s address space . Leveraging the benefits of this high privilege of the hypervisor and stage 2 translation, we can govern access permissions for peripheral devices such as cameras and microphones, thereby ensuring the normal operation of devices.

We build SEPI on top of hypervisor-based system integrity guarantees that we explained thus far and inherited its security guarantees. Knox utilizes both a hypervisor (EL2) and TrustZone components to interpose and monitor normal world kernel operations to maintain the system’s trustworthiness.

Knox and similar security platforms are designed to maintain their integrity and functionality even under full system compromise. These components undergo integrity checks performed by hardware-supported secure boot. They are also developed to form a small TCB in terms of complexity and code size . SEPI depends on the trustworthiness of the hypervisor and TrustZone components, which are considered part of the TCB. The possibility of compromising these components falls outside the scope of our study.

# 5 Secure Device Status Updates
SEPI leverages a hypervisor-level page monitoring scheme to detect all camera and microphone hardware status changes against its powerful adversary model. By setting the MMIO pages that map the hardware control registers as read-only, SEPI’s hypervisor is notified of every modification attempt. As a result, when an Android application engages these devices, a page fault is induced in EL1 (i.e., the corresponding device driver), and the execution is transitioned into the hypervisor’s fault handler. Upon capturing such privacy-sensitive device status change, the hypervisor toggles the current state (i.e., off vs. in-use) of the device. Finally, the hypervisor emulates the faulting memory store operation before resuming execution.

# ASIA CCS ’24, July 1–5, 2024, Singapore, Singapore
Yurak Choe, Hyungseok Yu, Taeho Kim, Shinjae Lee, Hojoon Lee, and Hyoungshick Kim
The device status change record maintained by the hypervisor is periodically queried by the SEPI driver in the EL1; a dedicated kernel thread executes the SEPI driver’s polling function with a one-second interval using hypercalls (hvc) as shown in Figure 8.

Status updates sent upwards to the normal world user space notify the SEPI user components (SEPI Audit, HIDL Client, and HIDL Server) to render privacy indicator with the highest Z-order to visually override any fraudulent attempt to mask the indicators. This design allows SEPI to reuse the existing software layers for rendering while still guaranteeing the display integrity of the indicators. The hypervisor and TrustZone secure world software stack designed for implementing sensitive low-level tasks, however, are ill-suited for high-level tasks such as constructing and rendering images, not to mention that the display device is not directly exposed to the secure world in most cases. In the following subsections, we further explain how SEPI render the indicator with TrustZone composition approach.

# 5 Rendering Privacy Indicators
As shown in Figure 9, SEPI Audit monitoring device status receives device status update information from the SEPI driver, and passes it to the SEPI HAL Interface Description Language (HIDL) client.

Protected graphics buffer (Secure buffer). SEPI combines the Android OS Digital Rights Management (DRM) infrastructure and the hypervisor’s address integrity guarantee to implement a protected graphics buffer for privacy indicator rendering. SEPI utilizes Qualcomm’s customized implementation of Gralloc. Gralloc is an allocator that allocates device buffers that can be directly accessed by the devices. The customization of the allocator provides hypervisor involvement in the protection of the buffer. As such, not only the content of the buffer is protected, but also the address mapping integrity is guaranteed. This prevents the kernel can arbitrarily modify the address mappings for the buffer. During the allocation of the SEPI’s protected graphics buffer, the hypervisor engages and allocates the buffer in a pre-defined physical address range that can only be accessed by the TrustZone secure world.

Privacy indicator layer. HIDL Client is responsible for generating a privacy indicator frame to be loaded into the secure buffer and also passing the frame to the TrustZone which holds exclusive access to the secure buffer. HIDL Client creates a surface with the required width and height for the indicator, along with the PIXEL_FORMAT_RGBA_8888 attribute. The PIXEL_FORMAT_RGBA_8888 attribute is used because the alpha channel can represent transparency, allowing the area for drawing the indicator to be transparent except for the indicator itself. Furthermore, the setLayer function ensures that the newly created SEPI layer is rendered at the top. In Android, setLayer is a method in the View class that adjusts the rendering order and Z-order of a View. By passing a maximum value to the setLayer function, the View can be set as the one with the highest Z-order and be rendered at the top.

Finally, the SEPI HIDL system utilizes hidl_handle to transmit information about the secure memory allocated by the SEPI HIDL client to the SEPI HIDL server. The implementation is on top of the A52s 5G (A528) device with Qualcomm chipset SM7325, and Qualcomm-provided API was used to pass the memory buffer information from the SEPI HIDL server to TrustZone. The data header passed from SEPI HIDL to TrustZone includes the integrity information of the top Z-order setting from the setLayer function along with the indication of the BufferUsage::PROTECTED flag activation. The integrity information contains the combination of magic numbers from the top-ordering function and secure buffer flag to the SEPI surface layer.