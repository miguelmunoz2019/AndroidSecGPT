# 3 RQ2 – What Types of Update Patterns Developers Follow When Updating the Third-Party Libraries?
Even if most of the version changes of libraries are rarely or never updated, it is interesting to understand if there are common update-patterns occurring when developers decide to perform an upgrade of their external libraries. Table 6 reports the classification of the update-patterns obtained as a result of the open coding procedure. As it is possible to see, in 7% of cases, the version of a library was changed in a given version of the app and then the use of the library disappeared in the immediately subsequent commit: we call this pattern as “used once”. This category mainly refers to “abandoned” apps, i.e., apps that are not developed anymore. A clear example is represented by the ormlite library of the GRACECODE . ANDROID . PRESENTATION app, an app to manage image galleries. The library version was changed in the commit performed on December 26th, 2014, which is exactly the last commit on the repository.

As for the pattern called diligent, which is the one containing the cases where developers constantly update the libraries, being always able to get the latest version of a library, we found a total of 1976 uses that follow the “diligent” pattern, corresponding to the 15% of the total libraries uses. These results seem to be in line with the findings discussed above on the limited willingness of developers to update libraries.

The third update-pattern we classified is called “jump up”, and refers to cases where developers missed several version changes of a library before deciding to perform an upgrade toward a higher version of the library. Globally, we observed 1091 cases, which correspond to 8% of the uses of libraries, follow this update-pattern. An interesting case is the one of the COM . ANDROZIC app, where the library com.nispok.snackbar (whose evolution is depicted in Fig. 5) has been firstly introduced in the app on December 2014, when the version 2 was available. Then, during the evolution of the app, several newer versions of the library became available, however the developers did not change the version used until May 2015, when the current available version of the library was the 2. Further, analyzing this specific case, we found that the developers performed the upgrade only when the source code became not compatible anymore with the older version of the library. Indeed, the developer performing the commit left this message: “Fix compatibility issue by updating the build.gradle file.”
Another pattern recognized is named “jump down” that represents the opposite of the jump up pattern described above. Indeed, it arises when developers decide to perform a downgrade toward a much lower version of the library. We identified this pattern in only 39 cases. One of this cases refer to the ORG . CIPHERDYNE . FWKNOP 2 app where the library com.android.support:appcompat-v7 was introduced on June 2015 (see Fig. 6).

# Empirical Software Engineering (2020) 25:2341–2377
# Version
An example of jump up pattern, the com.nispok:snackbar library evolution for the COM . ANDROZIC app
# Version
An example of jump down pattern, the com.android.support:appcompat-v7 library evolution for the ORG . CIPHERDYNE . FWKNOP 2 app
Empirical Software Engineering (2020) 25:2341–2377 2363
# Version
Immediately after the introduction of the version 22, the library created compatibility issues that enforced developers in downgrading the library toward the 19 version. When committing the library downgrade, the developer left the following message:
“Downgraded dependency version due to compatibility issues with the fwknopd service package.”
Finally, the last pattern is called “back & forth”. It refers to the cases in which developers tried to upgrade the used version of a library several times, restoring each time an older version. We observed this pattern in 181 cases, i.e., 1% of the library version changes followed this pattern. A representative example is depicted in Fig. 7, reporting the case of the library com.android.support:cardview-v7 of the app ORG.DOLPHINEMU.DOLPHINEMU, a NINTENDO GAME CUBE simulator. As it is possible to see, between May and September 2015 the developers of the app continuously upgraded and downgraded the library. This was due to continuous issues that developers had with the visualization of the cards representing the characters of the simulated games. In particular, the developers experienced a different bug every time they tried to upgrade the library. One of the comments left on July 2015 perfectly explains the types of difficulties developers sometimes have to face:
“I’m getting crazy!!! I’m restoring the old version of that library hoping in good times!”
This example clearly highlights how more research is needed to (i) provide automatic tools for third-party libraries updates, and (ii) assess the impact of an update on the source code of a mobile app.

2014-12-01 2015-01-01 2015-02-01 2015-03-01 2015-04-01 2015-05-01 2015-06-01 2015-07-01 2015-08-01 2015-09-01
Finally, we noticed that in the remaining cases library uses are “never changed” after their introduction; this occurs in 66% of cases.

With the goal of further analyzing the update patterns and their potential impact, we conducted an additional experiment to understand if there are differences in the ratings of the different update patterns identified. To this aim, we extracted the ratings associated to the user reviews of the considered apps; we developed a web scraper that extracts the user reviews directly from the GOOGLE PLAY STORE, where they are publicly available. Afterwards, we followed the heuristics defined by Khalid et al. (2015) to discriminate high- and low-rated apps. In particular, apps whose average ratings were strictly higher than 3 were considered as high-rated, otherwise they were marked as low-rated. Once the two sets were formed, we verified the distribution of each update pattern in the two app types.

shows the distribution of each update pattern across the high- and low-rated apps of our dataset. As it is possible to observe, we recognized the prevalence of two specific update patterns, i.e., diligent (85% vs. 15%) and jump up (81% vs. 19%), in the high-rated apps. On the contrary, back & forth (23% vs. 77%), jump down (30% vs. 70%), and used once (27% vs. 73%) were more frequent in the low-rated apps. Interestingly, we observed that the never changed pattern is almost equally distributed across the two sets, i.e., 45% in case of high-rated apps and 55% for the low-rated ones.

These results suggest the existence of a relation between third-party library updates and app ratings. Although several other factors might have influenced the results (e.g., app domain, popularity, or source code quality ) and despite the fact that we cannot speculate on the reasons behind them, we believe that our findings provide initial hints of the importance that third-party libraries updates might have for the commercial success of mobile apps. Of course, our analysis is only preliminary, therefore this relation should be further investigated. At the same time, the results achieved when considering the low-rated apps suggest that a poor management of libraries has a negative effect on the ratings provided by end users on the GOOGLE PLAY STORE: this might be due to the inclusion of bugs and/or security issues inherited by the third-party libraries.

# Empirical Software Engineering (2020) 25:2341–2377
# In summary
Developers follow peculiar update patterns when dealing with library updates. Only in 15% of the cases the used external libraries are constantly updated by developers, while we found that in 66% of the cases external library uses are never changed after their introduction. Our findings suggest a relationship between the update of third-party libraries and the ratings assigned by end users on the store.

# 3 RQ3 – What is the Developers’ Perception of Third-Party Libraries Updates?
In the previous research questions, we performed quantitative analyses by mining the software repositories of the considered mobile applications. At the same time, we observed the data to come up with some possible reasons behind the observed phenomena. Nevertheless, we could only provide hints on the reasons behind the developers’ decisions to upgrade/downgrade libraries as opposed to facts. For this reason, in RQ 3 we perform a complementary study that aimed at surveying real Android developers on how they manage third-party libraries. The following subsections report the achieved results.