# 2 Attacks Targeting Root Privilege
These attacks target the vulnerabilities found in the kernel to exploit privileges. For example, the zero-day local privilege escalation attack exploits Linux kernel vulnerability (CVE-2016-0728). The error was found in the way the objects were referenced by the keyctl(), a critical management function of the Linux kernel. The flaw, when exploited, results in memory leakage, which is used by attackers to gain unprivileged access to the system. This flaw affected Linux kernel version 3 and higher.

Gooligan Attack: Malware called Gooligan exploits the zero-day vulnerability (CVE-2013-6282) . The zero-day vulnerability is called “zero-day” because it is the duration during which
ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# A Survey on Various Threats and Current State of Security in Android Platform
# 2 Vulnerability Exploitation
A vulnerability is exposed and used by the attackers while there is no patch provided by the vendor. The CVE-2013-6282 vulnerability exists due to the error found in kernel API (put_user/get_user). Attackers inappropriately perform read/write operations on the kernel memory using a malicious application. Exploitation of this vulnerability allows attackers to escalate privileges and execute any malicious code. The gooligan attack persists; attackers are using the vulnerabilities VROOT and Towelroot, which are found in Android version 4-Froyo and also in version 5-Gingerbread.

# DroidKungfu Attack
DroidKungFu malware , categorized under root exploit attack, is capable of bypassing the Android Sandbox security mechanism. The motive of this malware is to silently root into the mobile device and unlock all system files and functions. The malware is transmitted using repackaged applications. It exploits root privileges to use system resources without requesting for required permissions. DroidKungfu malware uses the exploits known as RageAgainstTheCage (CVE-2010-EASY) and Exploid (CVE-2009-1185) to escalate privileges. Exploid exploits the vulnerability found in the udev, which is a root-level code, by sending a NETLINK udev event message. The message tricks the udev into running an arbitrary binary as root when triggering a hotplug event. The RageAgainstTheCage exploited the Android Debug Bridge daemon (adb)’s functionality. The adb process starts with root privileges, and it has to call setuid() to lower its privileges to shell privileges. The exploit uses the fork function to start multiple processes. When the number of processes for the malware reaches the maximum permissible number RLIMIT_NPROC, the exploit kills the adb process. The adb process again restarts with root privilege and tries to call setuid() to lower its privilege, however, at that point, the exploit has already started RLIMIT_NPROC-1 processes other than adb process. So the call to setuid() fails and adb keeps running as root. The exploits come along with a repackaged application in encrypted form, and they get decrypted after getting installed on the device. While the user uses the application, the Trojan exploits the vulnerabilities in the background to perform actions such as download additional applications and adware without user’s permission. The Trojan can also add new service and receiver into the application. Once the system is booted, the malware sends a notification to the receiver. The receiver can then initiate the service without user permission. Eventually attackers gain unprivileged access to system resources. Security Enhanced (SE) Android prevents such attacks from exploiting the Linux kernel.

# 2 Attacks Targeting Memory
Code Reuse attack exploits memory corruption vulnerability for attacking system. We can define Memory corruption vulnerability as a situation where malicious code can alter the memory without giving instructions explicitly. The drivers  and generic syscalls are privy to this vulnerability. The simplest approach used by the attackers to attack the kernel is to look for a bug in kernel code. The information about these bugs is available on Common Vulnerabilities and Exposures (CVE) site. These loopholes or bugs are used by attackers, to add malicious content in the kernel address space or redirect the execution of the kernel to the address space where malicious content is present. These attacks require the knowledge about the location of the targeted component in the kernel. Return-Oriented Programming (ROP) , Jump-Oriented-Programming (JOP) , return-to-libc  and ret-2-user  are a few examples of such attacks. These attacks exploit the address space in kernel and address space of its code segment. A lot has been done to harden Android security with regards to these vulnerabilities. Researchers have come up with well-crafted security features, which include randomization of addresses; both kernel address space and user address space. The method is called Address Space Layout Randomization (ASLR) . The ASLR method randomly chooses the location in memory, where the executable program is to be loaded, thereby preventing the attacks that target these vulnerabilities to gain root access to the system and steal the data.

ACM Computing Surveys, Vol. 52, No. 1, Article 21. Publication date: February 2019.

# Return-oriented Programming Attack
Return-oriented Programming is a complex code reuse attack. Architectures like X86, ARM (Advanced RISC Machines) are vulnerable to this attack. Android is based on the ARM architecture, which makes it vulnerable to these attacks. The attackers use the code of an existing program for exploitation. This approach does not require attackers to inject any malicious code as it reuses existing code. The existing code here implies to the executable instructions that are also known as “Gadgets.” Gadgets are generally machine-level instructions that are present within the libraries preceding the “return” instruction.

Tools available to find the Gadgets are ROPgadget , Rp++ , Ropeme , Ropc , Nrop Gadgets . These tools list the available Gadgets; after finding the Gadgets, the address of the first instruction in the Gadget is saved on the stack to overwrite the saved, extended instruction pointer on the stack, this process changes the return address. Gadgets are executed indirectly by controlling the flow of stack. Buffer Overflow attack is a classic example of execution of such attacks. In Buffer Overflow attack a program is used to overwrite memory location adjacent to the boundary of the buffer thus making it possible for attackers to execute any random code.

Return-oriented Programming attack circumvent the security offered by the Data Execution Prevention (DEP) , ALSR and other techniques that are used to protect memory. Stack Canaries  can be used to detect ROP and similar attacks that are based on buffer overflow of the stack. In the Stack Canary approach, a small canary (integer) value is selected and placed before the address of stack return pointer. Canary value selection takes place at the beginning of the program. Whenever buffer overflow occurs Canary value gets overwritten along with the stack return pointer. Every time a routine calls the stack return pointer, it checks the first Canary value, if the value is different from the initial value at the beginning of the program; it indicates that buffer overflow has occurred, which means, the value of the stack return pointer has changed. This method will stop the execution of any malicious activity thus making it challenging for attackers to execute the buffer overflow attack in the presence of stack canaries.

To breach the security offered by Stack Canary, attackers have to look for some source for information leakage. Some other defensive techniques are ASLR, ROP Defender , KBouncer , Dynamic Binary Instrumentation (DBI) , Instruction set randomization , and so on. Researchers  have shown that return instruction is not compulsory to execute Return-oriented Programming attacks. JOP , SOP , BROP , SROP  are variants of ROP attack. JOP, unlike ROP, does not rely on the address of stack pointer or return instruction.

# Jump-oriented Programming Attack
For JOP attacks, as the name suggests, jump instructions are used. One gadget dispatcher and a program counter are the two main components required to perform this attack. A dispatcher is used to send functional gadgets and then control their execution. Role of the program counter, which is a register, is to point to the dispatch table, which contains the addresses and contents of the gadgets. Attackers with the use of these components overwrite the stack and a function pointer. Another approach followed by attackers for launching JOP attack is to overwrite setjmp buffer.

Control-flow integrity (CFI) , Data-flow integrity (DFI) , Program shepherding , and a few other similar techniques can be used to defend against ROP and JOP attack. However, these techniques require a significantly large number of resources and codebase, which makes it cumbersome to deploy such defensive techniques. The attackers have also introduced String-oriented Programming (SOP), an extension to ROP and JOP attacks. In SOP, the attacker uses format string exploit  to overwrite the Global Offset Table entries or function pointers. In a format string attack, the attacker exploits a string that is controlled by the user and passes that string as an argument to a function that belongs to print class. Tokens like %x, %p, %n, %s are passed with the strings as an argument. These tokens and their combinations can be used by the attacker to collect details about the implementation of the stack or can be used to fetch any other relevant information.