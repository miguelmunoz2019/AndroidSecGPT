To extract the security information from each app, the android security aspects metamodel proposed in our earlier work19 has been enriched and extended to consider the more complete specification of Android apps. Also, the ICC metamodel is proposed to capture all potential ICCs from the Android system.

In the following, first, the proposed metamodels are explained in Sections 5 and 5. Then, in Section 5, an overview of the proposed approach and its phases are presented. Finally, the incremental ICC analysis feature and the tool support are explained in Sections 5 and 5, respectively.

# 5 Android application security aspects metamodel
For automatic security analysis of IAC, a model of each app is required to identify its security structure and specification, which conforms to the metamodel shown in Figure 5. This metamodel is an extension of the proposed metamodel by our earlier work The elements with dark colors indicate the extended concepts. In the following, Sections 5-5 describe the main elements of this metamodel and their relationships.

# 906
# NIRUMAND et al.

Legend: Original Concepts Extended Concepts
Android application security aspects metamodel (extended from the proposed metamodel by our earlier work, the extended concepts are in dark color)
1097024x, 2023, 4, Downloaded from https://onlinelibrary.wiley.com/doi/10/spe by <Shibboleth>-member@javeriana.edu.co, Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

# NIRUMAND et al.

# 5 ApplicationPolicyFile
This element represents the root of the metamodel, which contains essential information of the Android application: (1) Package that identifies the name of APK file, (2) VersionCode that is needed for other apps to identify the version of the app, and (3) VersionName that specifies the version of the app shown to users.

# 5 SDK
The SDK element identifies the Android API level required to run the application. This element contains three attributes: (1) MinSdkVersion that specifies the Android API minimum level required to run the application, (2) MaxSdkVersion that specifies the Android API maximum level required to run the application, and (3) TargetSdkVersion that specifies the Android API level, which the Android application is designed to run on it.

# 5 UsesPermission
Android conducts a permission-based mechanism that restricts the access of Android apps to critical resources, other apps, or other app components. The requested permissions by the app are stored in the applicationâ€™s sandbox and granted to all app components. This model of coarse-grained Android permissions violates the principle of least privilege. Hence, malicious apps may exploit this mechanism for activities beyond their privilege. Therefore, the information related to requested permissions is one of the necessary security aspects of Android apps for static ICC analysis.

The UsesPermission element in the metamodel represents the requested permissions concept. This element specifies a set of permissions that an application needs to access protected parts of the system or other apps, both system-defined and application-defined permissions. This element contains two attributes of Name and Permissionkind that identify the name and the type of requested permission, respectively. Android permissions are divided into four levels: normal, dangerous, Signature, and Signature-OrSystem, which are considered through ProtectLevel in the metamodel.

# 5 AppPermission
This element is a set of permissions required to access components of an Android application, which contains two attributes of Name and Permissionkind that identify the name and the type of required permission, respectively.

# 5 Component
As explained before, an Android app can contain four types of components: Activity, Service, Receiver, and Content Provider. The Component element represents this concept of the Android app. All app components must be statically introduced in the Manifest file, but the Receiver component can also be dynamically introduced in the Java code. This type of component is considered through DynamicRegisteredComponent in the metamodel.

# 5 IntentFilter
This element represents a set of intent filters specified for a component. Activity, Service, and Receiver can have a set of intent filters, each of them specifies a different capability of the component. Intent filters for Broadcast Receivers registered dynamically must be declared in their Java code (i.e., at runtime), which is specified through SourceType in the metamodel.

# 5 CompPermission
If an app component is public (exported), the other app components (inside the same app or on different apps) can access this app component. However, a component can specify permissions to restrict access. The CompPermission element represents a set of permissions for a component that other components must have to communicate this component. This element contains two attributes of Name and Permissionkind that identify the name and the type of required permission, respectively.

# 5 Intent
As discussed in Section 2, app components can interact with each other mainly through Intent messages. The Intent element represents a set of intent messages that can be used for intra- and inter-app communication. This element has the following attributes:
- Name. This attribute specifies the name of intent.

- Action. Each intent can contain at most one action, which represents the general action that must be performed by the app component receiving the intent.

- Permission. It indicates the required permission to limit the number of app components that can receive the broadcast intent.

- IntentKind. It specifies the type of intent that can be of two types: explicit and implicit.

- SendComponentName. This attribute specifies the name of the component that creates the intent.

- TargetComponentName. This attribute specifies the name of the component that should receive and handle the intent (this attribute for explicit intent must be explicitly specified).

- MethodForSend. It indicates the used ICC methods for intent-sending mechanisms.

Each intent also has two sets: (1) Data, which specifies additional information related to the data that must be processed by the specified action. (2) Category, the intent object can also have a set of categories.

# 5 ICC metamodel
Regarding the Android access control model (described in Section 2), this research focuses on addressing ICC at the intra- and inter-app levels. As discussed earlier, ICC in Android is mainly implemented through the use of intent messages. Each of these intent messages is a specific event that executes an action on data that supports that action. The capabilities of the components are then determined by a set of filters that indicate the type of requests that the component can handle. In fact, intent filters provide interfaces for a component. Components can be invoked in different ways: (1) explicit, (2) implicit, (3) intra-app, or (4) inter-apps. To extract potential communications in the same or different apps via intent messages, the metamodel shown in Figure 6 is presented. This metamodel is described in the following.

InterComponentCommunicationInBundleOfApps is the root of the metamodel, which contains two sets that indicate two communication domains, as follows.

- Explicit Communication represents all potential interactions that can be made through explicit intent. This domain is considered as ExplicitCommunication in the metamodel.

- Implicit Communication represents all the potential interactions that can be made through implicit intent. This domain is considered as ImplicitCommunication in the metamodel.

SenderApp indicates the Android application whose component creates the intent. ReceiverApp specifies an Android application that can receive the intent. ExplicitIntent represents all explicit intent objects that exist in a bundle of Android apps. This element contains three attributes: (1) Name, the name of intent, (2) SendComponentName, the sender component name of the intent, and (3)
# NIRUMAND et al.

# InterComponent Communication in Bundle Of Apps
1097024x, 2023, 4, Downloaded from Wiley Online Library on [09/08/2024]. See the Terms and Conditions (https://onlinelibrary.wiley.com/terms-and-conditions) on Wiley Online Library for rules of use; OA articles are governed by the applicable Creative Commons License.

Action, the general action that must be performed by the component receiving the intent. Each ExplicitIntent also has one ExplicitTargetComponent that specifies the receiver component for the intent.

ImplicitIntent represents all implicit intent objects that exist in a bundle of Android apps. According to the Android Application Security Aspects metamodel (the part related to the intent element), ImplicitIntent contains five attributes: Name, SendComponentName, Action, Permission, and MethodForSend. This element also has the Data attribute that indicates the intent has at least one or no Data object. Each ImplicitIntent also has a set of ImplicitTargetComponent that specifies the receiver app components, which are all components in the Android system that can receive the intent.