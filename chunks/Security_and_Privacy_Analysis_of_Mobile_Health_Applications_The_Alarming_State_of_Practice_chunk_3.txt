8. Finally, based on the legal demand needs for compliance with the upcoming GDPR regulation, we performed a number of checks in order to estimate each apps’ readiness against the GDPR’s requirements.

Based on the aforementioned steps, we hereafter present our findings and analyze several patterns in terms of coding style and development process. Our ultimate goal, in addition to improving the security and privacy features of the m-health apps under review by providing their developers with extended feedback on their shortcomings, is to highlight common pitfalls in the application development life-cycle that may jeopardize the privacy rights of millions of users.

# IV. RESULTS
Based on the aforementioned methodology, the experiments were carried out accordingly for all the 20 m-health apps under evaluation. Before reporting the results of the static and dynamic analysis for each app, we discuss the results of their manual analysis, which covers the inspection of their privacy policies and permission requests.

# A. MANUAL ANALYSIS
# 1) PRIVACY POLICIES
Prior to our initial experiments, Google had not taken any action against the amount of apps not providing valid privacy policies, even though they are handling sensitive information. In fact, our initial results on February 2016 showed that 10% of the analyzed apps didn’t have any reference to a
VOLUME 6, 2018 9393
# A. Papageorgiou et al.: Security and Privacy Analysis of Mobile Health Applications
# 1. Privacy Policy Analysis
privacy policy page whereas 5% of the apps had a link to a URL that claimed to host their application privacy policy but responded with a 404 error page. Finally, 5% of the apps had a link to a privacy policy page that wasn’t translated into English, even though the contents of the application were. Furthermore, some of the apps under review did provide some kind of privacy policy, albeit of dubious validity since the quality and the relevance of their policy were not up to the required ones for protecting users from privacy issues, such as malicious or unintentionally data leakage. In compliance with  and , we have also found that the problem of missing or invalid privacy policies mainly affects the less popular apps. However, the mindset of the development community towards this practice has been arguably shifting due to the recent Google’s reaction (i.e., since the early 2017 Google has sent notifications to developers for not providing a valid privacy policy). Yet, an updated study on the existence, relevance, quality and overall validity of the provided privacy policies by the apps is deemed necessary.

# 2) PERMISSIONS ANALYSIS
To analyze the permission requests of the apps under examination, we collected the permissions listed in the Manifest files of the apps´ APKs using python scripts. Based on the dangerousness of the permissions , permissions in Android could be divided into ‘‘normal’’ and ‘‘dangerous’’. Figure 2 summarizes the requested dangerous permissions and the number of apps that did so. Upon closer examination of the results, several findings stand out as they imply other parallel usage, beyond applications’ scope. For instance, while only two apps required access to the microphone, one more was also requesting it without any obvious reason. While none of the apps in the study required any Bluetooth functionality or connectivity to a paired device, oddly, two applications requested this permission. To the best of our understanding, this permission was requested to fulfill the requirements of ad libraries which exploit Bluetooth devices to track user’s location , . Notably, Google since Marshmallow required apps that performed scanning for hardware identifiers, like via WiFi or Bluetooth, to request the location permission, leaving out though other indirect approaches for obtaining location information . Nonetheless, six of the studied apps requested permissions to access location and coarse location.

While only one app needed access to the calendar, two more asked for it and five requested access to the contacts list (i.e., another well-known ad library tactic). One application requested access to SMS in order to both read and write, while another requested access to dial phone numbers. Remarkably, none of these apps exhibited any functionality justifying such requests. Almost all apps requested access to the devices’ external storage, a permission not adequately justified since developers, instead of arbitrary accessing the storage, may use intents to get stored photos from the gallery or take a new photo for the user’s profile. Last but not least, six of the apps requested access to the camera, again an action that could be avoided, through proper Android intents utilization.

# B. STATIC CODE ANALYSIS
To evaluate the security of the apps in detail, we examined each APK independently using MobSF. The analysis of the tested APKs revealed several security issues summarized in Table 3. While some of these issues, such as the use of insecure random number generators, appear quite often, they are not all qualified as significant since, most of the times, the use of random number generators is not necessarily related to security or privacy violations. On the contrary, MobSF showed that many apps do not connect using HTTPS and have several issues concerning Android WebViews components. MobSF also revealed that 45% of the apps tried to determine whether the device was rooted – a feature irrelevant to their goals.

# C. DYNAMIC ANALYSIS
In our dynamic analysis, we evaluated the apps in terms of their security and privacy attributes when they transmit sensitive and personal data over the Internet. Next, we
9394 VOLUME 6, 2018
# A. Papageorgiou et al.: Security and Privacy Analysis of Mobile Health Applications
Discussed our findings grouped according to the kind of data that apps transmitted, namely health-related data, multimedia, location information, registration and log-in data, e-mails, devices Id., search queries, OS information, and chat sessions.

# 1) HEALTH-RELATED DATA
In order to identify the transmitted health information while the user interacts with the app, we captured all keywords and/or phrases related to the health status or the medical condition of the user by using the Fiddler web debugging tool. Our experiments showed that 80% of the analyzed apps transmit users’ health-related data, while 20% store them locally on the device. In terms of security, only 50% of those apps transmit health-related data over HTTPS connections for all of their communication. Table 4 summarizes our findings. The second column “Sent to Vendor” displays whether the app sends the collected health-related data to the vendor’s domain, while the third column “Sent to vendor over HTTP” specifies which of the apps that sent health-related data to the vendor’s domain did so over HTTP. The fourth column “Share data with third party” indicates whether the app shares health-related data with a third party domain, whereas the fifth column “# 3rd party domains” reflects the number of third party domains to which the app sends data. Finally, the sixth column “# 3rd party domains over HTTP” displays the number of third party domains that receive health-related data over HTTP. Figure 3 shows an example of a JSON response to a POST request over HTTP of one of the tested apps, resulting from us using the app’s backup function in order to send data to our email address. It can be observed that 50% of the apps send data to third parties. These third parties can be classified into two main categories: i. Marketing related platforms that provide mobile analytics or performance related data, and ii. Cloud based backend solutions used to configure applications’ functionalities. Oddly enough, one app was found to send health-related data to an IP for which it wasn’t possible to identify any authority based on online resources. Finally, from the apps transmitting data to remote hosts, 7 of them transmit health-related data to their vendors using GET requests, whereas 4 send information to third parties using GET requests. All these apps transfer their users’ health data through URLs. Practically, this means that identifiers and sensitive users’ data are open to everyone having access to the URLs. In the plain HTTP case, the threats are obvious and independent of GET/POST requests. However, even if HTTPS is used, the data is stored in the log files of the web server, which can potentially expose this data to unauthorized entities.