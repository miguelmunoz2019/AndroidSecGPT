# Empirical Software Engineering (2020) 25:2341–2377
The 33 categories of third-party libraries sorted by the number of version changes
The latter claim is supported by the manual analysis we made on the repositories of the subject apps: in this case, one of the authors of this paper analyzed all the 5923 commit messages related to changes in the apps involving an upgrade of a GUI library: the author read each commit message in order to elicit the reasons behind the high number of GUI-related upgrades. From this analysis, we found several cases where the commit message associated to the version change of a GUI library mentioned the willingness of developers to improve the layout of the GUI. An example is reported in the ZA . CO . LUKESTONEHM . LOGICALDEFENCE app, where we discovered the following commit message:
“Update com.android.recyclerview-v7 to get new fancy icons.”
Empirical Software Engineering (2020) 25:2341–2377 2359
At the same time, libraries belonging to the category frameworks are often updated as well. This is because most of the tools provided by such libraries support developers during their activities, e.g., in the case of com.android.support, that provides APIs for uploading/downloading files from a remote server. The high number of upgrades is motivated by the fact that developers are enforced to upgrade them as new Android versions are released. For instance, the com.android.support library mentioned above is constantly modified when new versions of the Android SDK are available: as a consequence, developers need to perform upgrades in order to use the new supports provided. As an example, we found that in the DE . GEEKSFACTORY. OPACCLIENT app, a developer upgraded the version of com.android.support library, leaving the following commit message:
“Update android.support to have an environment equivalent to the android platform.”
All the other libraries whose version changes is high perform various tasks related to the development of mobile apps and network management. However, the update of such libraries is not common as the one of the libraries in the GUI and frameworks categories. This result is in line with previous findings on the evolution of mobile apps. Specifically, Zhang et al. (2013) demonstrated how during the evolution of mobile apps the first Lehman’s law (i.e., continuous change Lehman and Belady 1985) holds for classes belonging to the GUI, while other pieces of code are changed only if strictly needed.

# In summary
Third-party libraries related to the graphical user interface or providing support tools for development are the ones having the highest number of version changes in the mobile apps using them. This may be mainly due to the will of developers to keep the GUI always up to date with the latest graphical tendencies, or update Android support tools to support the latest Android versions.

# 3 RQ2 – What Types of Third-Party Library Uses are Generally not Updated?
The version of almost 66% of libraries was declared and never updated by the developers of the mobile apps in our dataset. This behavior is in line with the findings achieved so far, since it shows once again that mobile developers are rarely interested in changing the versions of the used libraries.

Looking at the Table 5, it is also possible to notice the categories of libraries for which a version change was possible but whose version is less changed in the analyzed apps. Although some of the libraries in these categories are quite diffused (e.g., Sensors), their version is never changed. To elicit the likely causes behind missing updates, we performed an additional analysis. In the first place, we automatically mined developers’ discussions done through issue trackers and mailing lists for each of the subject apps. Then, we filtered those discussions by applying regular expressions aimed at finding only the ones in which there was a specific mention to the non-updated libraries. Finally, two of the authors of this paper manually went over each discussion and analyzed it with the aim of extracting the reasons for which a certain library was not updated. This manual analysis was done jointly by the two authors, as in this way they could better discuss about the likely reasons for non-updates.

From this analysis, we were able to discover two main reasons. In the first case, we observed a number of cases where the developers discussed the possibility to update the
# Empirical Software Engineering (2020) 25:2341–2377
source code on their communication channels, concluding the discussion with ignoring the update. For example, on October 2016 a new version of the jsonrpc library (Networking) was available for the ORG . XBMC . KORE app. The developers discussed of the version change on the issue tracker, mentioning potential security issues related to the use of HTTP GET requests. Such discussion was ended by one of the developers in the following way:
“My 2 cents. This is an extreme case, and it doesn’t justify the upgrade of the library.”
After this comment, the issue was marked as “closed”. We found other similar examples in the other apps analyzed, and thus we can conclude that one of the reasons behind missing version changes is that developers consciously ignore them. It is important to note that our results do not contrast the findings reported by Derr et al. (2017), who found security vulnerabilities to be a key motivation for developers to update their third-party libraries: indeed, we complement those findings by reporting that, in some cases, developers consciously decide not to perform an update because it would solve a problem that does not frequently appear in the context of their app. This result also allows us to claim that more empirical studies aimed at showing the impact of missing version change for the maintainability and security aspects of the source code might be useful for making developers aware of the negative consequences of ignoring the updates of libraries.

In the second case, we observed several cases where the developers refused an upgrade because they considered the cost/benefit ratio too high. For instance, it is worth mentioning the case of the UK . ORG . NGO . SQUEEZER app: here the version of the library eventBus is never updated. On February 2016 a new version of the library was available, and the two main developers of the app discussed, on the issue tracker of the application, about the possibility to update the library. The analysis of pros and cons of the update ended with a total agreement of the developer in not upgrading the used version of the library, since it would require the modification of several classes and methods of the app. In particular, they motivated their choice as follows:
“This would require more changes to the Squeezer code, so I don’t recommend working from that.”
More in general, we discovered that the cost/benefit ratio leading to missing updates is generally due to two specific problems. First, as highlighted in the example above, the refactoring required to update a library implies the modification of a consistent part of the codebase: this because of cascading dependencies that need to be updated if a main one changes or because of a high usage of the library in the code, which makes the effort to modify the codebase excessive to be performed. However, it is also true the opposite: sometimes libraries affect a small portion of the code, and developers want to focus on libraries having a higher impact on the codebase. All in all, both motivations shed lights on an important research aspect worth of a deeper investigation in the future, i.e., making techniques and tools available for (i) automatically or semi-automatically (Chow and Notkin 1996) updating dependencies, or (ii) effort-aware prioritization able to suggest developers a list of library version to update based on the total amount of code to be modified as a consequence of the update.

# In summary
Most of the versions of the libraries are not updated. The most likely reason behind this behavior seems to be the high cost/benefit ratio.