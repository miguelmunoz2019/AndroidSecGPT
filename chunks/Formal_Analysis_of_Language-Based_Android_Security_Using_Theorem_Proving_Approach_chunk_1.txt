# Formal Analysis of Language-Based Android Security Using Theorem Proving Approach
WILAYAT KHAN 1, MUHAMMAD KAMRAN 2, AAKASH AHMAD 3, FARRUKH ASLAM KHAN 4, (Senior Member, IEEE), AND ABDELOUAHID DERHAB 4
1 Department of Electrical and Computer Engineering, COMSATS University Islamabad at Wah Campus, Wah Cantonment 47040, Pakistan
2 Department of Computer Science, COMSATS University Islamabad at Wah Campus, Wah Cantonment 47040, Pakistan
3 College of Computer Science and Engineering, University of Hail, Ha’il 55476, Saudi Arabia
4 Center of Excellence in Information Assurance, King Saud University, Riyadh 11653, Saudi Arabia
Corresponding author: Wilayat Khan (wilayat@ciitwah.edu.pk)
This work was supported by the Deanship of Scientific Research at King Saud University, Saudi Arabia, through the Research Group under Project RGP-214.

# ABSTRACT
Mobile devices are an indispensable part of modern-day lives to support portable computations and context-aware communication. Android applications within a mobile device share data to support application operations and better user experience, which also increases security risks to device’s data integrity and confidentiality. To analyze the security provided by the Android permissions, modern security techniques, based on the programming languages, have been used to enforce best practices for developing the secure Android applications. Android security assessment, based on the language-based techniques in an informal setting without formal tool support, is tedious and error-prone. Furthermore, the lack of proof of the soundness of the language-based techniques raises questions about the validity of the analysis. To enable computer-aided formal verification in Android security domain, we have developed a mathematical model of language-based Android security using computer-based proof assistant Coq. One of the main challenges for mechanizing the language-based security in theorem prover relates to the complexity of variable bindings in language-based security techniques. As the main contributions of the paper: 1) the language-based security, including variable binding, is formalized in theorem prover Coq; 2) a formal type checker is built to type check (capture safe data flows within) Android applications using computer; and 3) the soundness of the language-based security technique (type system) is mechanically verified. The formal model of the Android type system and their proof of soundness are machine-readable, and their correctness can be checked in the computer using Coq proof and type checkers.

# INDEX TERMS
Android security, formal verification, language-based security, locally nameless representation, machine-readable proofs, theorem proving.

# I. INTRODUCTION
Originally designed and built for remote conversation, modern mobile devices are now mini computers with support for third party applications’ execution. This feature makes mobile devices smart and opens up the gate for applications supporting various tasks. These tasks include, but are not limited to, mobile commerce, health monitoring, entertainment, and location querying . According to Statista , there are over two billions of mobile users around the globe.

The associate editor coordinating the review of this manuscript and approving it for publication was Feng Lin.

and millions of mobile applications available on stores such as Google Play  and Apple Apps Store  for the most popular operating systems Android and iOS, respectively. Android is an operating system and open source applications development platform developed by Google. Based on Linux kernel, Android is the most popular operating system running on mobile devices such as tablets and smart phones , . According to Statista , Android market share in sales to end users in second quarter of 2017 was around 90%. Android framework is available with a software development kit (SDK) and many other developer tools. Its application programming interface (API) is used.

2169-3536 2019 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. VOLUME 7, 2019
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

# EEE Access
# W. Khan et al.: Formal Analysis of Language-Based Android Security Using Theorem Proving Approach
for building innovative modular mobile applications. The Android API allows applications to access software and hardware resources, such as such as camera and contacts, of the mobile device. Furthermore, a mobile application can share data with other applications or components within the same application using the API.

The data sharing facility available on Android framework provides enhanced user experience but it may also be exploited by the attackers. An unauthorised use of resources may lead to numerous security issues: a malicious application, for example, can illegally access contacts and share them with others by sending messages using Internet. The modular Android application framework enables mutually non-trusting Android applications, from different owners, to share their functionalities and resources. Security inside Android powered mobile devices is provided by the enforcement mechanism based on permissions , . Android permissions control the flow of data (such as contacts and photos) and access to resources (such as camera and Internet) within mobile devices. Each application declares a set of permissions, that it would require to best serve the user, in a manifest file and are set by a package installer during application installation. The user grants (or denies) access to resources by giving (or refusing) the permission that the application requests based on the trust it has on application developer and the security requirements of the resource.

Even though a sophisticated security mechanism based on permissions is in place, it does not provide information flow guarantees . The applications normally request permissions that can be misused to find the location of mobile (user) and put the mobile device and carrier network at risk , . Moreover, the permission system can be circumvented by (1) spreading the permissions over different applications that communicate with each other , or (2) when the applications over overprivileged . Even if the user denies a permission that is requested by an application, another application that holds that permission may perform the privileged task for the former application . To study the effectiveness of Android’s access control mechanism based on permissions, language-based technique has been applied to it , . However, no proof of soundness of the language-based security technique is provided in a formal setting, which raises questions about the validity of the technique and tools  built on top of it.

In this paper, we build a formal model of Android permissions system and language-based security in mechanical theorem prover Coq, and carry out the correctness proof of the system in the theorem prover. The mechanized formal model is interesting from two perspectives: 1) it can be seen as an implementation of the security system (type checker) to mechanically verify (type check) safe data flows within simple Android applications, and 2) the mechanization of Android type system in Coq provides a foundation to reason about soundness properties. The later, and the most challenging due to variable binding, is demonstrated by proving two soundness properties of the type system
# A. RESEARCH CONTEXT AND CHALLENGES
Android permissions system allows applications to interact and share data with each other; however, such data flows may result in unintended security consequences. Assume the data is labeled with security labels > (top), READ, WRITE and ⊥ (bottom). When confidentiality of data is assessed, the security label > tags secret data that can be read by other components with label > only. The data with label ⊥, on the other hand, is public with least security concerns: it can be read by anyone. When integrity is considered, the data with label > is the most trusted one and can be added to (or influence) data with any label. Similarly, the data with label ⊥ is untrusted (tainted) and it must not be written to data with higher security concerns (such as WRITE and >)
Consider a scenario, described in Fig. 1, where a component B reads data from the content provider (component) A. The security label pairs >⊥ and ⊥> (regardless of color) represent secret/trusted and public/tainted data, respectively, when data flow properties confidentiality/integrity are assessed. From component A’s perspective, component A writes to/updates the data in content provider (component) B. The upper dashed arrows in the figure describes a security violation: the component B with security context defined at ⊥> (right label pair in red), reads secret and write tainted data with label >⊥, respectively, from the content provider A (left label pair in red). The security system should enforce the security policy : the component that reads from/writes to a content provider (component) A must have permission (label) at least as high as component A. The data flow just described is a violation of the security policy (bad practice). The secret data is read by a component with security context ⊥, which effectively can be read by any other component with label (permission) ⊥ (secrecy violation). Similarly, the data in the content provider (component) B has integrity label > (trusted data), which is tainted by data that might have been written to (modified) by any component with label ⊥
1All the formal definitions and proof scripts are available at Github repository at https://github.com/wilstef/secdroid.