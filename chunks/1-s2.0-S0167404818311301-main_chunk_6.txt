The biggest challenge is that it is hard to verify the results of the process of TPL corpus establishment. In some situations, even TPL providers cannot offer all versions of their TPLs.

The decoupling process is a time-consuming process, and the cycle search is a memory-consuming process, which does not scale well to a large dataset.

# 5. Future Work
In the paper, we set the upper-threshold of PDG U related to the number of child’s nodes, by the rule of thumb. In the future, we will try to search the optimal value of this variable.

We will try to verify all cycles in the modules generated by decoupling and find more security threats to TPLs.

TPL identification is the first step of our TPL security study. In practice, we notice that most of TPL providers have noticed security problems of their TPLs and made remedies for their TPLs. To ensure compatibility, TPL providers usually preserve unsafe interfaces for developers. But usually developers still keep using unsafe interfaces even after receiving the warnings given by TPL providers. In such a case, to identify which API is invoked is helpful for security study. This task becomes even harder if an APP is shrunk or optimized.

# 6. Related Work
Although security study for Android is growing by leaps and bounds , in this section, we only present the works which are related to our TPL detection.

Clone detection. Clone detection techniques are widely used in Android, which are also a doable way to detect TPLs. DroidMOSS Zhou et al. (2012) calculates hash values for instructing sequences of a certain length, and figures out a fingerprint for the whole APP by combining these hashes. The fingerprint is compared pairwise to identify the clone in between. Juxtapp  uses k-grams opcode sequences and feature hashing as a signature for APPs, and identifies the clones existing in APP stores. DNADroid  and AnDarwin  both create the program dependency graph as a signature for each method, and then DNADroid employs subgraph isomorphism to determine the clones, and AnDarwin further extracts vectors from a graph to speed up the similarity computation.

Feature similarity computation. Li et al. (2016) employ a clustering algorithm with some empirical assumptions to obtain standalone packages, and then use these packages as signature to further detect TPLs. They propose a naming rule to judge whether the APP is obfuscated or not. LibRadar  only takes into account the Android APIs which are obfuscation-resilient for each package, and then performs multi-level clustering to identify TPLs. The selected Android APIs can effectively reduce the impact of obfuscation. Different with LibRadar, our approach also considers other prominent features such as string in case few, or even no, Android APIs are invoked in TPLs. LibD  extracts internal code dependencies as features and uses hashed features to identify TPLs. LibScout  leverages class hierarchy analysis to build Merkle trees with a fixed depth of three as a profile for each library. One matching algorithm is proposed to calculate the similarity with collected libraries. The pre-collected 800 distinct libraries of 9,623 versions form a tangible database that ensures an accurate detection result. Compared to their works, PanGuard is not resilient to obfuscated APPs, but also to shrunk and optimized.

# Computers & Security 80 (2019) 257–272
APPs which takes up a large proportion 23% in Android APPs.

Machine learning-based detection. PEDAL  takes into account the code features in Android SDKs, and the features are used to train a classifier to identify TPLs. Ad-Detect  and LibSift  propose using hierarchical packages and package dependency information as features and building a classifier to classify TPLs. In addition, they can also separate the primary code (i.e., the main functionality of APP) from TPLs. Compared to their works, we only take code similarity computation to achieve effectiveness and accuracy simultaneously.

Edge computing. To address the concerns of response time requirement, battery life constraint, bandwidth cost saving, as well as data safety and privacy, industry and academia have recently proposed edge computing. Luo et al. (2017) enables cloud to automatically offload computations to the edge servers. Chen et al. (2016b) study a multi-user computation offloading problem in a multi-channel wireless interference environment. Zhang et al. (2016) develop an energy-efficient computation offloading mechanism for mobile edge computing in 5G heterogeneous networks. Sardellitti et al. (2015) propose to reduce the energy consumption by jointly considering the radio resources and computational resources. Mao et al. (2016) exploit renewable energy to help reduce the energy consumption of mobile devices. Luo et al. (2017) design an energy-efficient autonomic offloading scheme that can automatically offload computational tasks to edge servers.

# 7. Conclusion
In this paper, we propose PanGuard, a novel and automated approach to detect TPLs in Android APPs. PanGuard leverages both structural and content information as a feature, and performs a feature set matching algorithm to identify TPLs. Invariants are studied and determined to overcome the disturbance caused by obfuscation, shrinkage, and optimization to code. PanGuard successfully identifies over 10 security issues in TPLs. PanGuard has been already deployed on our platform Janus, which has promoted the efficiency of Janus for malware detection and vulnerability analysis.

# Computers & Security 80 (2019) 257–272
Ma Z, Wang H, Guo Y, Chen X. Libradar: fast and accurate detection of third-party libraries in android apps. In: Proceedings of the 38th international conference on software engineering companion. ACM; 2016. p. 653–6.

Mao Y, Zhang J, Letaief KB. Dynamic computation offloading for mobile-edge computing with energy harvesting devices. IEEE J Sel Areas Commun 2016;34(12):3590–605.

Meng W, Ding R, Chung SP, Han S, Lee W. The price of free: privacy leakage in personalized mobile in-apps ads. Proceedings of the NDSS, 2016.

Micro T. Ghostclicker adware is a phantomlike android click fraud. http://www.blog.trendmicro.com/trendlabs-security-intelligence/ghostclicker-adware-is-a-phantomlike-android-click-fraud/; 2017. [Accessed 22 August, 2017].

Narayanan A, Chen L, Chan CK. Addetect: Automated detection of android ad libraries using semantic analysis. In: Proceedings of the IEEE ninth international conference on intelligent sensors, sensor networks and information processing (ISSNIP), 2014. IEEE; 2014. p. 1–6.

Pangu T. Akana: Interactive analysis environment. http://www.auditdroid.mobiseclab.org:8080/android/; 2017a. [Accessed 3 August, 2017].

Pangu T. Wormable browser. http://www.blog.pangu.io/wormable-browser/; 2017b. [Accessed 3 August, 2017].

Rastogi V, Shao R, Chen Y, Pan X, Zou S, Riley R. Are these ads safe: detecting hidden attacks through the mobile app-web interfaces. Proceedings of the NDSS, 2016.

Roy CK, Cordy JR. A survey on software clone detection research. Queen’s Sch Comput TR 2007;541(115):64–8.

Roy CK, Cordy JR, Koschke R. Comparison and evaluation of code clone detection techniques and tools: A qualitative approach. Sci Comput Program 2009;74(7):470–95.

Sardellitti S, Scutari G, Barbarossa S. Joint optimization of radio and computational resources for multicell mobile-edge computing. IEEE Trans Signal Inf Processr Netw 2015;1(2):89–103.

Soh C, Tan HBK, Arnatovich YL, Narayanan A, Wang L. Libsift: automated detection of third-party libraries in android applications. In: Proceedings of the 23rd Asia-Pacific software engineering conference (APSEC), 2016. IEEE; 2016. p. 41–8.

Ucloud Co. L. Ucloud. https://www.ucloud.cn/; 2017. [Accessed 3 August, 2017].

Wang H, Guo Y, Ma Z, Chen X. Wukong: a scalable and accurate two-phase approach to android app clone detection. In: Proceedings of the 2015 international symposium on software testing and analysis. ACM; 2015. p. 71–82.

Wikipedia. Fully qualified name. https://www.en.wikipedia.org/wiki/Fully_qualified_name; 2017. [Accessed 3 August, 2017].

Zhang K, Mao Y, Leng S, Zhao Q, Li L, Peng X, Pan L, Maharjan S, Zhang Y. Energy-efficient offloading for mobile edge computing in 5g heterogeneous networks. IEEE Access 2016;4:5896–907.

Zhou W, Zhou Y, Grace M, Jiang X, Zou S. Fast, scalable detection of piggybacked mobile applications. In: Proceedings of the third ACM conference on Data and application security and privacy. ACM; 2013. p. 185–96.

Zhou W, Zhou Y, Jiang X, Ning P. Detecting repackaged smartphone applications in third-party android marketplaces. In: Proceedings of the second ACM conference on data and application security and privacy. ACM; 2012. p. 317–26.

Zhou Y, Wu L, Wang Z, Jiang X. Harvesting developer credentials in android apps. In: Proceedings of the 8th ACM conference on security & privacy in wireless and mobile networks. ACM; 2015. p. 23..