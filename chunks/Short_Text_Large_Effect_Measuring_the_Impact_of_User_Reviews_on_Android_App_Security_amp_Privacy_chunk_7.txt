With the introduction of runtime permissions in Android 6, Google did also change the protection levels of a significant number of permissions. Before Android 6 (API level < 23) there have been 38 dangerous permissions that were prominently shown at install-time . Starting with API level 23, Google refactored the permission system and specified only 20 dangerous permissions. The remaining 18 permissions have either been downgraded to normal permissions (that are granted automatically and are not shown to the user by default) or have been deprecated. Among the most prominent examples are the INTERNET permission, used by the vast majority of apps, and READ|WRITE_PROFILE. In addition, one single permission READ_EXTERNAL_STORAGE was upgraded to dangerous. This is also the top-mentioned permission in SPR (16%, see Figure 6).

Our regression model (see Section V-C) suggests that applications adopting runtime permissions are significantly more likely to perform SPU compared to apps that stick to install-time permissions. But at the same time, the results indicate that for apps with runtime permissions there is still a high number of developer replies of type Explanation (163) in comparison to apps with install-time permissions (234). This suggests that many app developers do not follow runtime permission best practices , i.e., adding explanations for permission requests and requesting permissions in context rather than requesting permissions on app launch. In terms of transparency for the users, requiring the developers to add explanations in permission dialogs should be opt-out instead of opt-in by default. We think that our results support further investigation of how app developers use the runtime permissions.

Google recently announced that in the second half of 2018, Play will require new apps and app updates to adopt runtime permissions, i.e., to target an API level ≥ 23 . This will likely allow end-user privacy assessments for a larger number of apps, i.e., in our dataset about 45% of the top apps have not adopted runtime permissions in their latest version. According to our results this will generate more SPR and, as a result, more SPU in apps.

# D. User’s Perception of Risks and Privacy Incidents
Compared to related work, our results from studying users’ security- and privacy-related app reviews also suggest a change in the user’s concerns over the last years. A large scale survey on the perceived risks of smartphone users by Felt et al.  indicated that sending premium messages, dialing premium numbers, and deleting contacts were among the top risks in 2012. Contacts are still in the Top 2 mentioned permissions (see Figure 6), but reading external storage and location—now the top perceived risks—have previously been among the lowest-ranked risks. This is partly because of additional
security features that impede using monetary services without the user’s explicit consent and due to raised privacy awareness of end-users. Past incidents have shown that simple flashlight ,  or wallpaper apps  misused access rights to spy on the user or to exfiltrate personal data. As a result, Google specified both privacy policy for apps  and a general Unwanted Software Policy . Developers were notified that, by end of March 2017, “Google Play requires developers to provide a valid privacy policy when the app requests or handles sensitive user or device information.” In future work, we consider evaluating to which extent users’ SPR can be used to create trend analyses of users’ attitudes, in particular in response to regulatory (e.g., policies) and system changes (e.g., refactoring of permissions). For instance, in our data set, the downgrade of the INTERNET permission lead to a sharp decline in the number of SPR for that permission.

Moreover, a recent large-scale investigation of hidden tracking behavior in Android apps revealed that misuse of sensitive data by third-party advertisement and tracking libraries is even larger than ever . In consequence, Google extended its Unwanted Software Policy and additionally requires that “if an app collects and transmits personal data unrelated to the functionality of the app then, prior to collection and transmission, the app must prominently highlight how the user data will be used and have the user provide affirmative consent for such use.”  This implies that adhering to the new policy requires transparency for all included third-party components. Related work , , ,  indicated that particularly advertising and tracking libraries are the main source of privacy violations and also our results (see Section IV-B2) show that the majority of SPRs complain about behavior that apps inherited from included libraries. However, most of these third-party components are distributed as closed-source binaries and many are not explicit about their usage of permissions and end-user data. An open question will be how app developers can handle these problems, as this kind of libraries is often used as the main monetization factor. A related study  showed that app developers need more support in handling third-party libraries, both with better development tools and a dedicated package manager for libraries. Similar assistance will be necessary for developers to make educated decisions on the choice of libraries to adhere to the new policy and pro-actively avoid negative SPR on markets.

# E. Call for Action
The strict enforcement of the 350 character limit, prevents comprehensive and high quality reviews and forces users to omit additional information. Increasing the limit will give users the opportunity to write meaningful reviews and report issues without having to resort to alternative, non-public communication channels such as email. Both end-users and developers could also benefit from dedicated reviewer programs, such as Amazon Vine , which promote trusted reviewers that provide high-quality app assessments for incentives, such as paid apps for free. Particularly developers of top apps receive a high number of reviews every day, but only few of them include a call for action. Approaches such as ours—as standalone-tool or directly integrated into the developer console—can effectively reduce the number of reviews that have to be considered, hence making the time-consuming, manual triage process more effective. Additionally, the process of writing a review needs to be simplified to engage a higher number of users to participate. Currently, writing a review with a device constitutes a multi-step process via the Google Play app. This could be optimized by extending app launchers to provide such an option as an app shortcut  as a default for all apps hosted on Play. Moving to runtime permissions is a valuable step towards increasing the risk awareness. The latest beta version of Android P continues this path by disallowing idle apps to access the microphone and camera . Any attempt is shown to the user as symbol in a notification. It has to be shown whether this is already effective or whether such accesses should be highlighted in the status bar more prominently.

# VII. CONCLUSION
In this paper, we empirically studied the impact of user reviews on Android application security and privacy features. We automatically classified reviews into SPR and non-SPR. We mapped SPR to mentioned app versions and conduct a static code analysis to extract security- and privacy-related code changes for these versions (SPU). We find that in 60% of all cases the SPR triggered an SPU. The majority of these changes can be attributed to (closed-source) third-party code like advertising or tracking libraries. Furthermore, we built a regression model to evaluate the impact of different factors on SPU. With our regression model, we showed that SPR are significant predictors for SPU. In the majority of cases, app developers directly change the respective app code or publicly reply to users and explain why certain permissions are required. We have further seen that the adoption of runtime permissions has a significant positive effect on users’ privacy perception. With the announced enforcement of runtime permission adoption, the absolute number of SPR is likely to increase in the near future, which in turn will help to improve app security and privacy in general.

Our results make a call for action to further increase the transparency of apps to foster more SPR as way to increase privacy-friendly app behavior; but also call for better tools to support developers in adhering to privacy regulations and their users’ privacy preferences. Lastly, our approach might inspire future research to employ user reviews as a way to measure the effects of changes in regulations or Android’s design.

#!topic/play/OTjIUVr4g9I.

14. “App permissions best practices,” https://developer.android.com/training/permissions/usage-notes.html.

15. “Improving app security and performance on google play for years to come,” https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html, 2017.

16. “Android flashlight app tracks users via gps, ftc says hold on,” https://www.techrepublic.com/blog/it-security/why-does-an-android-flashlight-app-need-gps-permission/, 2013.

17. “Why does my flashlight app need access to all these things?!” http://www.sudosecure.com/why-does-my-flashlight-app-need-access-to-all-these-things/, 2013.

18. “Does an android live wall paper really requires any special permission? beware of android app permissions,” http://initpage.com/post/Does-an-Android-Live-Wall-Paper-really-requires-any-Special-Permission-Beware-of-Android-App-Permissions, 2013.

19. “Privacy, security, deception,” https://play.google.com/about/privacy-security-deception/.

20. “Google’s unwanted software policy,” https://www.google.com/about/unwanted-software-policy.html, 2015.

21. “Android users: To avoid malware, try the f-droid app store,” https://www.wired.com/story/android-users-to-avoid-malware-ditch-googles-app-store/, 2018.

22. “Additional protections by safe browsing for android users,” https://security.googleblog.com/2017/12/additional-protections-by-safe-browsing.html, 2017.