# Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability Related With Web Functions
Received May 4, 2020, accepted May 23, 2020, date of publication May 27, 2020, date of current version June 17, 2020.

Digital Object Identifier 10/ACCESS
JIAWEI QIN1, HUA ZHANG1, (Member, IEEE), JING GUO2, SENMIAO WANG1, QIAOYAN WEN1, AND YIJIE SHI1
1State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, Beijing 100876, China
2National Computer Network Emergency Response Technical Team/Coordination Center of China, Beijing 100029, China
Corresponding author: Hua Zhang (zhanghua_288@bupt.edu.cn)
This work was supported in part by the National Key Research and Development Program of China under Grant 2018YFB0804703.

# ABSTRACT
Nowadays, people’s lifestyle is more and more dependent on mobile applications (Apps), such as shopping, financial management and surfing the internet. However, developers mainly focus on the implementation of Apps and the improvement of user experience while ignoring security issues. In this paper, we perform the comprehensive study on vulnerabilities caused by misuse of APIs and form a methodology for this type of vulnerability analysis. We investigate the security of three types of Android Apps including finance, shopping and browser which are closely related to human life. And we analyze four vulnerabilities including Improper certificate validation (CWE-295: ICV), WebView bypass certificate validation vulnerability (CVE-2014-5531: WBCVV), WebView remote code execution vulnerability (CVE-2014-1939: WRCEV) and Alibaba Cloud OSS credential disclosure vulnerability (CNVD-2017-09774: ACOCDV). In order to verify the effectiveness of our analysis method in large-scale Apps on the Internet, we propose a novel scalable tool - VulArcher, which is based on heuristic method and used to discover if the above vulnerabilities exist in Apps. We download a total of 6114 of the above three types of samples in App stores, and we use VulArcher to perform the above vulnerability detection for each App. We perform manual verification by randomly selecting 100 samples of each vulnerability. We find that the accuracy rate for ACOCDV can reach 100%, the accuracy rate for WBCVV can reach 95%, and the accuracy rate for the other two vulnerabilities can reach 87%. And one of vulnerabilities detected by VulArcher has been included in China National Vulnerability Database (CNVD) ID (CNVD-2017-23282). Experiments show that our tool is feasible and effective. For the convenience of researchers in related communities, we make our data and tool available at https://buptnsrclab.github.io/blog/2020/01/03/vularcher-site-launched.

# INDEX TERMS
Static analysis, vulnerability, mobile agents, security, application software, detection algorithms.

# I. INTRODUCTION
With the rapid growth of functional requirement of mobile Apps, the development iteration of Apps is more and more rapid. In this circumstance, developers focus on how to quickly implement the logical functions of Apps and make it more user-friendly. Nevertheless, they spend little time on security issues of Apps.

The security issues of Apps are complex and challenging. Related research on Android security has been proposed, including static – and dynamic ,  methods. Wei et al.  just analyzed Android vulnerabilities which are associated with JavaScript. Mutchler et al.  and Chin and Wagner  analyzed a large-scale of mobile web Apps, and found that vulnerabilities are presented in all corners of the Android ecosystem. They did not propose methods for vulnerability verification. Li et al.  analysed a small set of Android music Apps and focused on the issue of data leakage during client and server communication. Li et al. ,  proposed a solution to quickly identify Android source code vulnerability ignoring to analyse Apps’ vulnerabilities. Mu et al.  contributed to how to quickly
VOLUME 8, 2020 This work is licensed under a Creative Commons Attribution 4 License. For more information, see https://creativecommons.org/licenses/by/4/
# EEE Access
# J. Qin et al.: Vulnerability Detection on Android Apps–Inspired by Case Study on Vulnerability
reproduce the vulnerabilities by combining the vulnerabil-
ity reports with widely crowdsourced information. In 2019, Diao et al.  analyzed one vulnerability caused by the usage of the accessibility API. Amin et al.  focused on proposing a detection tool for Android vulnerabilities, they did not give out a methodology for analyzing Android vulnerabilities. Luo et al.  was concerned about the vulnerabilities of the Android Framework and adopt a symbolic execution method to detect vulnerabilities. Wu et al.  conducted a systematic study for Android system vulnerabilities.

Aforementioned vulnerabilities researches are related to the web vulnerabilities . Although these vulnerabilities have been reported for a long time, they have received little attention. Moreover, researchers did not consider how to ana-lyze the vulnerabilities of these Apps if it is packed –. To the best of our knowledge, there is little effective analysis on aforementioned vulnerabilities. There is a very serious problem that many vulnerabilities reported early still exist in latest Apps, even in the same App. The main reason is that there is no feasible and complete vulnerability verification workflows for developers. In additional, more and more web functions are used in Apps , these functions may also increase new vulnerabilities of Apps. Users send their infor-mation through the network in the process of Apps, which makes it is particular important for Apps to ensure(assure) their security.

In this paper, our target of vulnerabilities are related to web functions. By manual analysis of 400 Apps, we find the vulnerabilities caused by the misuse of APIs accounted for the majority, and the most of vulnerabilities caused by API misuse are WRCEV, WBCVV, ICV and ACOCDV. So we chose these four vulnerabilities as our study goals. At the same time, we divide the above four vulnerabilities into three categories based on their behaviors: Overridden method(Cat1:OM), Use unsafe settings(Cat2:USS) and Data leakage of sensitive information(Cat3:DLSI).

# Contributions
Based on the above analysis, we explore the severity of these vulnerabilities and perform the comprehen-sive study on the four vulnerabilities caused by the misuse of APIs and form an analysis methodology for each category of vulnerabilities. In order to mitigate them, we propose corresponding improvement recommendations. Based on the methodology, we propose a vulnerability verification work-flow for each vulnerability. In order to verify the effective-ness of our analysis methodology in large-scale Apps on the Internet. Based on our findings, we propose a vulnerability detection tool, named VulArcher. It can detect the above four vulnerabilities in packed or unpacked Android Apps, and the average accuracy rate is 91%. The main contributions are as follows:
1. For the four vulnerabilities that are caused by the misuse of APIs, we divide them into three categories based on their behaviors. we perform the comprehensive study on them and form an analysis methodology for each vulnerability, which can help researchers to discover other vulnerabilities in the three categories. Based on the analysis, we provide improvement recommendations to mitigate the vulnerability threat.

2. Based on the methodology, we propose a vulnerabil-ity verification for workflow for each vulnerability, relevant researchers can verify corresponding vulnerabilities following them.

3. In order to verify our methodologies in large-scale Apps, we propose a static and scalable vulnerabilities detection tool based on our findings for vulnerability anal-ysis, VulArcher. We download 6,177 Android Apps con-taining transactions from the Internet, which are the latest version in 2018. After our random manual verification of the results of VulArcher, it shows that the average accuracy rate is 91%. In addition, VulArcher can also detect the vulnerabilities on packed Apps. By adding rules in a configuration file, VulArcher can detect other cat-egories of vulnerabilities. We will share VulArcher at https://buptnsrclab.github.io/blog/2020/01/03/vularcher-site-launched.

# II. BACKGROUND
# A. ANDROID APP OVERVIEW
An Android App file is a compressed file that contains AndroidManifest.xml file, certificate files, dex file, static resource files and so on.

1. Androidmanifest.xml, which defined and included in every App, describes the name, version, permissions, component name and other information of the App.

2. Certificate files hold the signature information that ensures the integrity of the App.

3. Dex file is an executable file, which contains all the operating instructions and runtime data of an the App. Its structure is as follows:
1. Header: containing metadata, and a body which contains the majority of the data.

2. String_ids: recording the offsets of each string in the data area.

3. Type_ids: recording the string indexs for each type.

4. Proto_ids: recording the declaration strings of methods, return type strings, parameter lists.

5. Field_ids: recording the classes, type, and method name which belongs to.

6. Method_ids: recording the classes’ name, declara-tion and the name of the methods and other informa-tion.

7. Class_defs: containing the type, inheritance hierar-chy, access metadata, and other class metadata.

8. Data: containing data of each classes.

4. Static resource files that exist in the res folder mainly contain pictures, audios and layout files of the App.

# B. ANDROID API AND ANDROID SDK
An Android API is an interface provided to developers to invoke system services, making App development more effi-cient and convenient. Here are a few Android APIs related to this paper.