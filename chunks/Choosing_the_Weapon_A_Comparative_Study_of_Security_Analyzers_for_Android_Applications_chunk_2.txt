The installed version used in this study was a Docker container provided and maintained by MobSF’s authors. This provided a simplified installation process and the ability to tear down or build the service on demand. When the Docker container successfully spins up, users can direct their web-browser to localhost:8000 to interact with MobSF’s graphical user interface. MobSF is capable of dynamic analysis, but this aspect was not tested or configured in this study. The dynamic analysis functionality of MobSF requires a cloud-based Android virtual machine service called Genymotion.

# 2) MARA Framework v0
The Mobile Application Reverse Engineering & Analysis Framework (MARA)  attempts to be a one-stop-shop for a user’s Android application reverse engineering and security analysis needs. It is open-source under the GNU Public License v3. MARA is mostly a bash script that combines multiple commonly used Android reverse engineering and vulnerability analysis tools into one project. The goal was to create an effortless pipeline for security researchers and developer to use. MARA is capable of dynamic and static analysis without any extra set-up post installation. MARA does not have a GUI component; it was built for terminal user interfaces only. Many of the sub-tools
# B. Benchmarking Applications
The Damn Insecure and Vulnerable App (DIVA)  for Android is a purposefully vulnerable Android application that was created as a learning tool for developers. DIVA was built to showcase many of the common vulnerabilities that are present in mobile applications. It has built-in coding vulnerabilities that cover insecure logging, insecure data storage, input validation errors, and access control issues. DIVA is not a core benchmarking package; it is really meant to be used by penetration testers and developers to learn how to exploit or recognize vulnerabilities in source code. Its use in this study is exploratory in nature, servicing as a touchstone of how the analyzers work.

Ghera  is a repository of Android applications that exhibit specific vulnerabilities. Benchmarking software for Android security analyzers has yet to mature, Ghera attempts to rectify the situation. Ghera is a collection of 60 separate benchmarks that tests for specific software vulnerabilities that can be found in real-world applications. Updates and additions to the benchmark collection are frequent. The benchmarks are split into multiple categories such as Crypto, Inter-component Communication (ICC), Networking, Permission, Storage, System, and Web. Each benchmark is comprised of three .apk files, an exploitable benign version, a malicious version, and a patched secure version.

The benign version has the targeted vulnerability built in, while the malicious version has the ability of exploiting the benign version. Secure versions of the benchmarks provide a patched implementation of the exploitable benign case . It is an open-source project under the BSD-3 License. Ghera was built by Joydeep Mitra and Ventkatesh-Prasad Ranganath of Kansas State University . In this study, subsets of Ghera benchmarks found in Table I are used.

# C. Live Applications
Testing the security analyzers against benchmarks provides a sound basis to reporting and functionality. Using real-world examples provides thorough testing of the reverse engineering capabilities of the analyzers and may reveal malicious content on the Google Play marketplace for Android applications. Normally, Google Play requires a registered Android device to install applications. There are known workarounds, such as third-party sites that host a reflection of applications currently on Google Play.

APKPure.com is a third-party distributor of free Android applications that can be found on the official market. Developers can submit their applications to the site through approved channels. Users can then download their choice of applications and run them in emulators or natively on their Android device . This provides a great way to acquire applications immediately, without using an Android device and isolating the .apk files for transferring them to analysis workstations. The live applications in this study, as listed in Table II, can be divided into the following broad categories: Flashlight Apps, Messenger Clones, Fitness Trackers, Home Automation, Photo Filters, TV Apps, and Other (e.g., social networking/business/special events).

# V. ANALYSIS AND FINDINGS
# A. Qualitative Results
# 1) Report Output:
The presentation of results to users is an important aspect to choosing a robust analysis tool. The results should be viewable in a human-readable format that is concise and provides enough contextual information so that a full security assessment can be done. MARA and MobSF arguably provide many of the same findings, but in inconsistent and problematic ways.

MARA is an all-in-one tool, built from many other Android reverse engineering and security analysis tools. It is the “Frankenstein’s Monster” of Android security analyzers. This becomes a significant setback in sub-tool usability. Each of these different tools have their own expected inputs and produced outputs. In the reverse engineering phases, the tools work well together in a typical workflow that is representative of how they would be used separately. Analysis, post reverse engineering, is a dizzying array of text files from multiple analysis tools which are spread across multiple file system directories. These text files are often terminal-based redirects of what would have been presented to the user by one of MARA’s sub-tools. The file naming conventions made it relatively easy to ascertain what type of information was in each file, but knowing which tool was responsible for the output is challenging.

Worst yet, many of MARA’s sub-tools do not seem to be producing the expected output. MARA claims to have a smali control-flow graph generator built in by using Eugino Delfa’s Smali-CFGs . The control flow graphs are nowhere to be found when parsing through MARA’s output directories. There are also cases when MARA simply fails to produce results. In the case of WeChat v7, the tool hit multiple runtime exceptions during the reverse engineering phases. Data could not be collected from running MARA on WeChat v7.

The Trueseeing Report is the most dependable report being produced. This report is the focal point in comparisons to MobSF’s reports. The Trueseeing Report categorizes its findings based on severity levels: Critical, High, Medium, Low, and Info. Each vulnerability found is given cursory information such as Synopsis, Description, Risk Factor (severity), CVSS Temporal Score, and Instances. The Synopsis and Description sections are not always filled in with information.

MobSF is a relatively easy application to use for in-depth APK analysis. Users are directed to upload the application of their choice, and a loading bar appears as the application goes through the entire reverse engineering and analysis process. The interface switches to a simple, yet elegant, webpage that shows all of MobSF’s security-focused findings with logical subsections and info pages. MobSF’s report format allows the user to take a quick glance to assess the severity of an
# TABLE I: Ghera Benchmarks
Vulnerability
- Block cipher algorithm in ECB mode
- Block cipher algorithm in CBC mode, uses non-randomized initialization vector
- Unnecessary permissions used for privilege escalation attacks
- Weak permissions used to export services, offers little protection.

- External storage susceptible to data injection
- External storage susceptible to data leaks
- Internal storage susceptible to directory traversal
- Transfer of internal to external storage may cause information leaks
- SQLiteDatabase.execSQL() method is susceptible to injection attacks
- SQLiteDatabase.rawQuery() method is susceptible to injection attacks
# TABLE II: Live Applications Used for Assessment
ing Report categorizes general findings and vulnerabilities in broad strokes. It categorizes general findings such as null-terminated strings, URLs, library usage, and others in the Information category. Problematically, it also categorizes some important findings such as Permissions in the Information category. Which Permissions are present is one of the core aspects of assessing an APK’s security. MobSF categorizes its general findings and vulnerabilities in a much higher granularity. MobSF also applies severity categorizations to many of MARA’s informational findings such as Permissions and Broadcast Receivers/Services. This led to a much higher reporting of severe vulnerabilities in MobSF’s report.

Tool Documentation: Proper documentation is an important aspect of using any software tool. Android application analyzers are no different. MARA’s documentation is fundamentally incomplete. Its GitHub page covers the “front-end” bash script that runs the sub-tool pipeline, but how these tools work together and how the output is formatted is not covered in detail. Essentially, users have to track down information on each sub-tool and make an educated guess to where its output goes. Another problem is that using MARA’s bash script removes any fine-grained control of how the sub-tools function. Users cannot pass optional flags from MARA’s “front-end” to a sub-tool. MARA is a wrapper for all of the other tools; users are forced to hunt for multiple wiki forms that may not even apply to their issues.