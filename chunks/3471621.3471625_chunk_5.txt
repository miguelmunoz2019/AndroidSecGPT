In evaluating T7, we find that 9 of 18 apps with their own IABI implementations only display the title of the page without the URL (e.g., WeChat in Case 9), which strictly speaking does not fall short on the extended subdomain but is still misleading. We therefore categorize this as NEUTRAL.

BAD. In T6, 11 apps display the lock emoji without any HTTP indicator or displaying the complete URL (e.g., Cases 5 and 6). End users have a high chance of being misled by the lock emoji, and we consider such designs BAD. Regarding T7, 8 of the subject apps display the subdomain name with the domain name missing (Case 10).

# 4 Usability Risks on Page Navigation
As mentioned in Section 3, our last test (T8) is to see how a subject app’s IABI implementation reacts to dangerous operation (e.g., password inputting) during the navigation of a web page. Specifically, T8 tests whether IABIs would show a specific or extra warning on a login page as compared with their normal behaviors on a non-login page. Figure 9 shows the screenshots of some representative IABIs.

Chrome Custom Tabs and SFSafariViewController. As shown in Case 1 of Figure 9, CCT does not provide any additional warning for password inputting when navigating both HTTP and HTTPS login pages. That said, it has the same behaviors as previously in T3 and T4; see Figure 5 and 6. Therefore, we consider CCT’s rating as BAD in this test. In contrast, SF performs slightly better than CCT. As shown in Case 5 of Figure 9, SF highlights the display of “Not Secure” (normally displayed for all HTTP pages; see Case 8 in Figure 6) by changing its color to red when end users navigate an HTTP login page, which is more striking for end users to notice. However, SF does not have specific warnings on HTTPS login pages. As a result, we assign NEUTRAL to SF’s performance on T8.

# Takeaways in §4:
- Ten apps using Chrome Custom Tabs or SF perform GOOD on nearly all the tests from T2 to T7.

- More than half of the remaining 15 apps do not display the domain name in their own IABI implementation, and nearly none of them provides HTTP and HTTPS indicators. This makes it difficult for end users to differentiate between secure and insecure pages. Fortunately, all apps behave GOOD when handling URLs with certificate errors.

- Moreover, nearly all those 15 apps have BAD performance on handling a title with the fake lock emoji or a long subdomain name, which could lead to insecure pages being misinterpreted as secure ones.

# RAID ’21, October 6–8, 2021, San Sebastian, Spain
# Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
IABIs as NEUTRAL. For all tested apps, we find that only the apps using SF have such performance. BAD. The other apps score BAD in T8, including WeChat which is also developed by Tencent but they do not show any warnings in this test. Upon further investigation, we find that this anti-fraud tip which is used by the other two apps can be removed in WeChat if the domain name is registered on the developer platform of WeChat. So maybe some developers have registered this domain name on that platform so the prompt is removed.

iOS. iOS apps their with own IABI implementation behave the same as their Android versions in this test.

Takeaway in §4: Most of the tested IABIs do not provide specific warnings to remind users of the risk of inputting passwords during navigating a login page, regardless it uses HTTP or HTTPS. Even CCT/SF does not perform well in this test.

# 5 APP DEVELOPERS’ RESPONSES
To understand developers’ reaction on our findings and to potentially provide our recommendations on fixing severe IABI issues, we issued security reports to all affected apps including WeChat, FB Messenger, QQ, Snapchat, Instagram (fixed as we reported), Weibo, 163 Mail, QQ Mail, Alipay, LinkedIn, Toutiao, and Baidu, through their bug bounty programs or security contact emails. Most of the apps acknowledged our findings and agreed with our assessment, but refused to recognize them as vulnerabilities, i.e., they consider the reported issues out of the scope of their bug bounty programs. By analyzing their responses in detail as follows, we find that developers’ willingness and readiness to fix usability security issues are rather low compared to fixing technical vulnerabilities, which is a puzzle in usability security research.

# Facebook’s response
While the Facebook app performs well in nearly all the tests, the other two apps from the same company, namely FB Messenger and Instagram, did not use the same IABI design and failed in our tests T3∼T4 and T6∼T8 (see §4). When we prepared the security reports for these two apps on 4 February 2021, we found that the latest version of Instagram had changed its IABI design to display a lock icon and an exclamation mark to indicate the HTTPS and HTTP pages, respectively. This suggests that they also noticed this problem (before our reporting) and made an improvement. Therefore, we focus on the response to our reports to FB Messenger.

There are two key points in the response given by the Facebook security team. First, they appreciated our report but said that our report does not qualify for their bug bounty program due to the social engineering nature of our reported attacks. Second, they already have a URL detection system called Linkshim, which could detect potentially malicious URLs and thus defend against IABI attacks. While we agree that the reported IABI usability issues would not cause the same security consequences as in the technical WebView vulnerabilities (e.g., ), the usability weaknesses in FB Messenger’s IABIs we demonstrated in §4 definitely give attackers ample rooms to successfully launch phishing attacks. Moreover, 3Apps using CCT/SF are generally secure; so we skip them. We failed to locate any feedback channel for KakaoTalk and Zhihu and therefore have to skip them as well. It is a puzzle to see that different apps developed by the same company make vastly different security decisions for seemingly the same component.

# Snapchat’s response
Compared with Facebook, the security team of Snapchat is more concerned on IABIs’ usability security issues with the following response (despite that a priority fix would not be issued as similar to FB Messenger): “While this attack scenario is quite interesting, we would consider this to be more of a defense-in-depth issue, rather than a discrete security vulnerability in Snapchat itself. Per our program rules, we generally don’t accept issues pertaining to ‘Reports solely indicating a lack of a possible security defense’. While we appreciate your suggestions here, we don’t feel that this poses a severe enough risk to warrant a priority fix, and as such we’ll be closing this report as Informative. We do appreciate your efforts here, and we hope you’ll continue reporting security issues to us in the future.”
# LinkedIn’s response
Compared to Facebook and Snapchat, the response from LinkedIn’s security team is more positive. Specifically, they consider patching it in the future versions of the LinkedIn app: “Thank you for your detailed email and report, we appreciate it. We regularly review incoming reports to identify opportunities to improve our member experience and their safe interactions on the platform. We have taken note of these items and included it for consideration in our future roadmaps. Once again, we appreciate the detail and effort that went into this research & report.”
# Some Chinese IT companies’ responses
We also received responses from a few large Chinese IT companies, including Tencent (developing QQ, WeChat, and QQ Mail apps), Alibaba (developing Alipay), ByteDance (developing Toutiao), Sina (developing Weibo), NetEase (developing 163 Mail), and Baidu. Most of them did not take our security reports seriously — either indicating that it was a known problem (by Tencent) or simply closed our reports without an explanation (by Sina). The only exception goes to ByteDance, whose security team responded that they just followed “the industry’s standard” but will report this issue to their product team. All these responses suggest a play down from app developers when it comes to IABI usability security concerns.

# 6 SECURE IABI DESIGN PRINCIPLES
In this section, we propose a set of secure IABI design principles and corresponding code-level implementations in this section to help mitigate risky IABIs and guide future designs. Here we provide implementations in Android as examples, and iOS developers can use corresponding counterparts in iOS.